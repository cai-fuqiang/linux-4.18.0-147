匹配到二进制文件 .git/index
Documentation/acpi/gpio-properties.txt:              Package () {"reset-gpios", Package() {^BTH, 1, 1, 0 }},
Documentation/acpi/gpio-properties.txt:In our Bluetooth example the "reset-gpios" refers to the second GpioIo()
Documentation/acpi/gpio-properties.txt:  { "reset-gpios", &reset_gpio, 1 },
Documentation/admin-guide/bcache.rst:You can also control them through /sys/fs//bcache/<cset-uuid>/ .
Documentation/admin-guide/bcache.rst:(if attached) /sys/fs/bcache/<cset-uuid>/bdev*
Documentation/admin-guide/bcache.rst:Available at /sys/fs/bcache/<cset-uuid>
Documentation/admin-guide/cgroup-v2.rst:	cpuset-enabled cgroups.
Documentation/admin-guide/cgroup-v2.rst:	cpuset-enabled cgroups.
Documentation/admin-guide/cgroup-v2.rst:	cpuset-enabled cgroups.
Documentation/admin-guide/cgroup-v2.rst:	cpuset-enabled cgroups.
Documentation/admin-guide/cgroup-v2.rst:	cpuset-enabled cgroups.  This flag is owned by the parent cgroup
Documentation/admin-guide/ras.rst:	reset-counters		writing ANY thing to this control will
Documentation/arm/sti/stih407-overview.txt:    The STiH407 is the new generation of SoC for Multi-HD, AVC set-top boxes
Documentation/arm/sti/stih415-overview.txt:    The STiH415 is the next generation of HD, AVC set-top box processors
Documentation/arm/sti/stih416-overview.txt:    The STiH416 is the next generation of HD, AVC set-top box processors
Documentation/arm/sti/stih418-overview.txt:    The STiH418 is the new generation of SoC for UHDp60 set-top boxes
Documentation/cgroup-v1/cgroups.txt:   css_set->tasks.
Documentation/device-mapper/unstriped.txt:  echo "0 1 unstriped ${NUM} ${CHUNK} ${i} /dev/mapper/raid0 0" | dmsetup create set-${i}
Documentation/device-mapper/unstriped.txt:  dd if=/dev/urandom of=/dev/mapper/set-${i} bs=${BS} count=${COUNT} oflag=direct
Documentation/device-mapper/unstriped.txt:  diff /dev/mapper/set-${i} member-${i}
Documentation/device-mapper/unstriped.txt:  dmsetup remove set-${i}
Documentation/devicetree/bindings/arm/gemini.txt:  - #reset-cells: should be set to <1> - the system controller is also a
Documentation/devicetree/bindings/arm/gemini.txt:			#reset-cells = <1>;
Documentation/devicetree/bindings/arm/mediatek/mediatek,ethsys.txt:- #reset-cells: Must be 1
Documentation/devicetree/bindings/arm/mediatek/mediatek,ethsys.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/arm/mediatek/mediatek,g3dsys.txt:- #reset-cells: Must be 1
Documentation/devicetree/bindings/arm/mediatek/mediatek,g3dsys.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/arm/mediatek/mediatek,hifsys.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/arm/mediatek/mediatek,infracfg.txt:- #reset-cells: Must be 1
Documentation/devicetree/bindings/arm/mediatek/mediatek,infracfg.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/arm/mediatek/mediatek,pciesys.txt:- #reset-cells: Must be 1
Documentation/devicetree/bindings/arm/mediatek/mediatek,pciesys.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/arm/mediatek/mediatek,pericfg.txt:- #reset-cells: Must be 1
Documentation/devicetree/bindings/arm/mediatek/mediatek,pericfg.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/arm/mediatek/mediatek,ssusbsys.txt:- #reset-cells: Must be 1
Documentation/devicetree/bindings/arm/mediatek/mediatek,ssusbsys.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/arm/omap/omap.txt:- ti,no-reset-on-init: When present, the module should not be reset at init
Documentation/devicetree/bindings/arm/tegra/nvidia,nvec.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/arm/tegra/nvidia,nvec.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/arm/tegra/nvidia,tegra30-actmon.txt:- resets: Must contain an entry for each entry in reset-names. See
Documentation/devicetree/bindings/arm/tegra/nvidia,tegra30-actmon.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/arm/tegra/nvidia,tegra30-actmon.txt:		reset-names = "actmon";
Documentation/devicetree/bindings/ata/ahci-mtk.txt: - resets	   : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/ata/ahci-mtk.txt: - reset-names	   : Associated names must be: "axi", "sw", "reg".
Documentation/devicetree/bindings/ata/ahci-mtk.txt:		reset-names = "axi", "sw", "reg";
Documentation/devicetree/bindings/ata/ahci-st.txt: - reset-names	   :   Associated names must be; "pwr-dwn", "sw-rst" and "pwr-rst"
Documentation/devicetree/bindings/ata/ahci-st.txt:		reset-names	= "pwr-dwn", "sw-rst", "pwr-rst";
Documentation/devicetree/bindings/ata/cortina,gemini-sata-bridge.txt:- reset-names: must be "sata0", "sata1"
Documentation/devicetree/bindings/ata/cortina,gemini-sata-bridge.txt:	reset-names = "sata0", "sata1";
Documentation/devicetree/bindings/ata/nvidia,tegra124-ahci.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/ata/nvidia,tegra124-ahci.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/bus/nvidia,tegra20-gmi.txt: - resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/bus/nvidia,tegra20-gmi.txt: - reset-names : Must include the following entries: "gmi"
Documentation/devicetree/bindings/bus/nvidia,tegra20-gmi.txt:	reset-names = "gmi";
Documentation/devicetree/bindings/bus/nvidia,tegra20-gmi.txt:	reset-names = "gmi";
Documentation/devicetree/bindings/bus/ti-sysc.txt:- ti,no-reset-on-init	interconnect target module should not be reset at init
Documentation/devicetree/bindings/c6x/clocks.txt:- ti,c64x+pll-reset-delay:  CPU cycles to delay after PLL reset
Documentation/devicetree/bindings/c6x/clocks.txt:		ti,c64x+pll-reset-delay = <12000>;
Documentation/devicetree/bindings/clock/amlogic,gxbb-aoclkc.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/amlogic,gxbb-aoclkc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/amlogic,meson8b-clkc.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/amlogic,meson8b-clkc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/csr,atlas7-car.txt:- #reset-cells: Should be <1>
Documentation/devicetree/bindings/clock/csr,atlas7-car.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/clock/hisi-crg.txt:- #reset-cells: should be 2.
Documentation/devicetree/bindings/clock/hisi-crg.txt:CRG: clock-reset-controller@12010000 {
Documentation/devicetree/bindings/clock/hisi-crg.txt:	#reset-cells = <2>;
Documentation/devicetree/bindings/clock/marvell,mmp2.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/marvell,pxa168.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/marvell,pxa1928.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/marvell,pxa910.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/nvidia,tegra114-car.txt:- #reset-cells : Should be 1.
Documentation/devicetree/bindings/clock/nvidia,tegra114-car.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/nvidia,tegra124-car.txt:- #reset-cells : Should be 1.
Documentation/devicetree/bindings/clock/nvidia,tegra124-car.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/nvidia,tegra124-dfll.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/clock/nvidia,tegra124-dfll.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/clock/nvidia,tegra124-dfll.txt:        reset-names = "dvco";
Documentation/devicetree/bindings/clock/nvidia,tegra20-car.txt:- #reset-cells : Should be 1.
Documentation/devicetree/bindings/clock/nvidia,tegra20-car.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/nvidia,tegra210-car.txt:- #reset-cells : Should be 1.
Documentation/devicetree/bindings/clock/nvidia,tegra210-car.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/nvidia,tegra30-car.txt:- #reset-cells : Should be 1.
Documentation/devicetree/bindings/clock/nvidia,tegra30-car.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/qcom,gcc.txt:- #reset-cells : shall contain 1
Documentation/devicetree/bindings/clock/qcom,gcc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/qcom,gcc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/qcom,lcc.txt:- #reset-cells : shall contain 1
Documentation/devicetree/bindings/clock/qcom,lcc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/qcom,mmcc.txt:- #reset-cells : shall contain 1
Documentation/devicetree/bindings/clock/qcom,mmcc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/qcom,videocc.txt:- #reset-cells : from common reset binding, shall contain 1.
Documentation/devicetree/bindings/clock/renesas,cpg-mssr.txt:  - #reset-cells: Must be 1
Documentation/devicetree/bindings/clock/renesas,cpg-mssr.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rk3036-cru.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/rockchip,rk3036-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rk3128-cru.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/rockchip,rk3128-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rk3188-cru.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/rockchip,rk3188-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rk3228-cru.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/rockchip,rk3228-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rk3288-cru.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/rockchip,rk3288-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rk3328-cru.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/rockchip,rk3328-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rk3368-cru.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/rockchip,rk3368-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rk3399-cru.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/rockchip,rk3399-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rk3399-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/rockchip,rv1108-cru.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/clock/rockchip,rv1108-cru.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/st,stm32-rcc.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/clock/st,stm32-rcc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/st,stm32h7-rcc.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/clock/st,stm32h7-rcc.txt:	rcc: reset-clock-controller@58024400 {
Documentation/devicetree/bindings/clock/st,stm32h7-rcc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/st,stm32mp1-rcc.txt:- #reset-cells: Shall be 1
Documentation/devicetree/bindings/clock/st,stm32mp1-rcc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/st,stm32mp1-rcc.txt:include/dt-bindings/reset-controller/stm32mp1-resets.h
Documentation/devicetree/bindings/clock/sun8i-de2.txt:- #reset-cells : must contain 1
Documentation/devicetree/bindings/clock/sun8i-de2.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/clock/sun9i-de.txt:- #reset-cells : must contain 1
Documentation/devicetree/bindings/clock/sun9i-de.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/clock/sun9i-usb.txt:- #reset-cells : must contain 1
Documentation/devicetree/bindings/clock/sun9i-usb.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/clock/sunxi-ccu.txt:- #reset-cells : must contain 1
Documentation/devicetree/bindings/clock/sunxi-ccu.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/clock/sunxi-ccu.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/clock/sunxi.txt:- reset-cells : shall be set to 1
Documentation/devicetree/bindings/clock/sunxi.txt:- reset-cells : shall be set to 0
Documentation/devicetree/bindings/clock/sunxi.txt:- #reset-cells : shall be set to 1
Documentation/devicetree/bindings/clock/sunxi.txt:	reset-names = "ahb";
Documentation/devicetree/bindings/clock/sunxi.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/clock/ti/davinci/psc.txt:- #reset-cells: from reset binding; shall be set to 1 - only applicable when
Documentation/devicetree/bindings/clock/ti/davinci/psc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/clock/ti/divider.txt:- ti,set-rate-parent : clk_set_rate is propagated to parent
Documentation/devicetree/bindings/clock/ti/fixed-factor-clock.txt:- ti,set-rate-parent: clk_set_rate is propagated to parent
Documentation/devicetree/bindings/clock/ti/gate.txt:- ti,set-bit-to-disable : inverts default gate programming. Setting the bit
Documentation/devicetree/bindings/clock/ti/gate.txt:		ti,set-bit-to-disable;
Documentation/devicetree/bindings/clock/ti/mux.txt:- ti,set-rate-parent : clk_set_rate is propagated to parent clock,
Documentation/devicetree/bindings/clock/ux500.txt:  PRCC (programmable reset- and clock controller) peripheral clocks.
Documentation/devicetree/bindings/clock/ux500.txt:  PRCC (programmable reset- and clock controller) kernel clocks
Documentation/devicetree/bindings/crypto/rockchip-crypto.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/crypto/rockchip-crypto.txt:- reset-names: Must include the name "crypto-rst".
Documentation/devicetree/bindings/crypto/rockchip-crypto.txt:		reset-names = "crypto-rst";
Documentation/devicetree/bindings/crypto/sun4i-ss.txt: - reset-names : must contain "ahb"
Documentation/devicetree/bindings/display/amlogic,meson-dw-hdmi.txt:  the reset-names should be "hdmitx_apb", "hdmitx", "hdmitx_phy"
Documentation/devicetree/bindings/display/amlogic,meson-dw-hdmi.txt:	reset-names = "hdmitx_apb", "hdmitx", "hdmitx_phy";
Documentation/devicetree/bindings/display/bridge/anx7814.txt: - reset-gpios		: Which GPIO to use for reset
Documentation/devicetree/bindings/display/bridge/anx7814.txt:		reset-gpios = <&pio 98 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/display/bridge/cdns,dsi.txt:- reset-names: can contain "dsi_p_rst".
Documentation/devicetree/bindings/display/bridge/dw_mipi_dsi.txt:- resets: References to all the resets specified in the reset-names property
Documentation/devicetree/bindings/display/bridge/dw_mipi_dsi.txt:- reset-names: string reset name, must be "apb" if used. (optional)
Documentation/devicetree/bindings/display/bridge/ps8622.txt:	- reset-gpios: OF device-tree gpio specification for RST_ pin.
Documentation/devicetree/bindings/display/bridge/ps8622.txt:		reset-gpios = <&gpc3 1 1 0 0>;
Documentation/devicetree/bindings/display/bridge/ptn3460.txt:	- reset-gpio: OF device-tree gpio specification for RST_N pin.
Documentation/devicetree/bindings/display/bridge/ptn3460.txt:		reset-gpio = <&gpx1 5 1 0 0>;
Documentation/devicetree/bindings/display/bridge/sii902x.txt:	- reset-gpios: OF device-tree gpio specification for RST_N pin.
Documentation/devicetree/bindings/display/bridge/sii902x.txt:		reset-gpios = <&pioA 1 0>;
Documentation/devicetree/bindings/display/bridge/sii9234.txt:	- reset-gpios: gpio specifier of RESET pin (active low)
Documentation/devicetree/bindings/display/bridge/sii9234.txt:		reset-gpios = <&gpf3 4 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/display/bridge/sil-sii8620.txt:	- reset-gpios: gpio specifier of RESET pin
Documentation/devicetree/bindings/display/bridge/sil-sii8620.txt:		reset-gpio = <&gpv7 0 0>;
Documentation/devicetree/bindings/display/bridge/toshiba,tc358767.txt: - reset-gpios: OF device-tree gpio specification for RSTX pin
Documentation/devicetree/bindings/display/bridge/toshiba,tc358767.txt:		reset-gpios = <&gpio3 24 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/display/ilitek,ili9225.txt:- reset-gpios:	Reset pin
Documentation/devicetree/bindings/display/ilitek,ili9225.txt:		reset-gpios = <&gpio0 8 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/display/multi-inno,mi0283qt.txt:- reset-gpios:	Reset pin
Documentation/devicetree/bindings/display/panel/ilitek,ili9322.txt:  - reset-gpios: a GPIO spec for the reset pin, see gpio/gpio.txt
Documentation/devicetree/bindings/display/panel/jdi,lt070me05000.txt:- reset-gpios: phandle of gpio for reset line
Documentation/devicetree/bindings/display/panel/jdi,lt070me05000.txt:			reset-gpios = <&tlmm_pinmux 54 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/display/panel/orisetech,otm8009a.txt:  - reset-gpios: a GPIO spec for the reset pin (active low).
Documentation/devicetree/bindings/display/panel/orisetech,otm8009a.txt:		reset-gpios = <&gpioh 7 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/display/panel/panel-common.txt:- reset-gpios: Specifier for a GPIO coonnected to the panel reset control
Documentation/devicetree/bindings/display/panel/panel-dpi.txt:- reset-gpios: GPIO to control the RESET pin
Documentation/devicetree/bindings/display/panel/panel-dsi-cm.txt:- reset-gpios: panel reset gpio
Documentation/devicetree/bindings/display/panel/panel-dsi-cm.txt:	reset-gpios = <&gpio4 6 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/display/panel/raydium,rm68200.txt:  - reset-gpios: a GPIO spec for the reset pin (active low).
Documentation/devicetree/bindings/display/panel/raydium,rm68200.txt:		reset-gpios = <&gpiof 15 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/display/panel/samsung,ld9040.txt:  - reset-gpios: a GPIO spec for the reset pin
Documentation/devicetree/bindings/display/panel/samsung,ld9040.txt:  - reset-delay: delay after reset sequence [ms]
Documentation/devicetree/bindings/display/panel/samsung,ld9040.txt:		reset-gpios = <&gpy4 5 0>;
Documentation/devicetree/bindings/display/panel/samsung,ld9040.txt:		reset-delay = <10>;
Documentation/devicetree/bindings/display/panel/samsung,s6e3ha2.txt:  - reset-gpios: a GPIO spec for the reset pin (active low)
Documentation/devicetree/bindings/display/panel/samsung,s6e3ha2.txt:		reset-gpios = <&gpg0 0 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/display/panel/samsung,s6e63j0x03.txt:  - reset-gpios: a GPIO spec for the reset pin (active low)
Documentation/devicetree/bindings/display/panel/samsung,s6e63j0x03.txt:		reset-gpios = <&gpe0 1 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/display/panel/samsung,s6e8aa0.txt:  - reset-gpios: a GPIO spec for the reset pin
Documentation/devicetree/bindings/display/panel/samsung,s6e8aa0.txt:  - reset-delay: delay after reset sequence [ms]
Documentation/devicetree/bindings/display/panel/samsung,s6e8aa0.txt:		reset-gpios = <&gpy4 5 0>;
Documentation/devicetree/bindings/display/panel/samsung,s6e8aa0.txt:		reset-delay = <100>;
Documentation/devicetree/bindings/display/panel/sharp,ls037v7dw01.txt:- reset-gpios: a GPIO spec for the optional reset pin.
Documentation/devicetree/bindings/display/panel/sharp,ls037v7dw01.txt:	reset-gpios = <&gpio5 27 GPIO_ACTIVE_HIGH>;	/* gpio155, lcd RESB */
Documentation/devicetree/bindings/display/panel/sharp,ls043t1le01.txt:- reset-gpios: a GPIO spec for the reset pin
Documentation/devicetree/bindings/display/panel/sharp,ls043t1le01.txt:			reset-gpios = <&pm8941_gpios 19 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/display/panel/sitronix,st7789v.txt:  - reset-gpios: a GPIO phandle for the reset pin
Documentation/devicetree/bindings/display/panel/sitronix,st7789v.txt:	reset-gpios = <&pio 6 11 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/display/panel/sony,acx565akm.txt:- reset-gpios: panel reset gpio
Documentation/devicetree/bindings/display/panel/sony,acx565akm.txt:	reset-gpios = <&gpio3 26 GPIO_ACTIVE_HIGH>; /* 90 */
Documentation/devicetree/bindings/display/panel/tpo,td043mtea1.txt:- reset-gpios: panel reset gpio
Documentation/devicetree/bindings/display/panel/tpo,td043mtea1.txt:	reset-gpios = <&gpio7 7 0>;
Documentation/devicetree/bindings/display/repaper.txt:- reset-gpios:		RESET pin
Documentation/devicetree/bindings/display/repaper.txt:		reset-gpios = <&gpio 24 0>;
Documentation/devicetree/bindings/display/rockchip/analogix_dp-rockchip.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/rockchip/analogix_dp-rockchip.txt:- reset-names: Must include the name "dp"
Documentation/devicetree/bindings/display/rockchip/analogix_dp-rockchip.txt:		reset-names = "dp";
Documentation/devicetree/bindings/display/rockchip/cdn-dp-rockchip.txt:- reset-names : string of reset names
Documentation/devicetree/bindings/display/rockchip/cdn-dp-rockchip.txt:		reset-names = "spdif";
Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt:- reset-names: string reset name, must be "apb".
Documentation/devicetree/bindings/display/rockchip/dw_mipi_dsi_rockchip.txt:		reset-names = "apb";
Documentation/devicetree/bindings/display/rockchip/rockchip-vop.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/rockchip/rockchip-vop.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/rockchip/rockchip-vop.txt:		reset-names = "axi", "ahb", "dclk";
Documentation/devicetree/bindings/display/sitronix,st7586.txt:- reset-gpios:	Reset pin
Documentation/devicetree/bindings/display/sitronix,st7586.txt:		reset-gpios = <&gpio 80 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/display/sitronix,st7735r.txt:- reset-gpios:	Reset signal (RSTX)
Documentation/devicetree/bindings/display/sitronix,st7735r.txt:		reset-gpios = <&gpio 80 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/display/ssd1307fb.txt:  - reset-gpios: The GPIO used to reset the OLED display, if available. See
Documentation/devicetree/bindings/display/ssd1307fb.txt:        reset-gpios = <&gpio2 7>;
Documentation/devicetree/bindings/display/ssd1307fb.txt:        reset-active-low;
Documentation/devicetree/bindings/display/ssd1307fb.txt:        reset-gpios = <&gpio2 7>;
Documentation/devicetree/bindings/display/ssd1307fb.txt:        reset-active-low;
Documentation/devicetree/bindings/display/st,stih4xx.txt:  - reset-names: names of the resets listed in resets property in the same
Documentation/devicetree/bindings/display/st,stih4xx.txt:  - reset-names: names of the resets listed in resets property in the same
Documentation/devicetree/bindings/display/st,stih4xx.txt:  - reset-names: names of the resets listed in resets property in the same
Documentation/devicetree/bindings/display/st,stih4xx.txt:			reset-names     = "compo-main", "compo-aux";
Documentation/devicetree/bindings/display/st,stih4xx.txt:			reset-names     = "tvout";
Documentation/devicetree/bindings/display/st,stih4xx.txt:				reset-names     = "hqvdp";
Documentation/devicetree/bindings/display/st,stm32-ltdc.txt:- reset-names: see [5].
Documentation/devicetree/bindings/display/st,stm32-ltdc.txt:			reset-names = "apb";
Documentation/devicetree/bindings/display/sunxi/sun4i-drm.txt:  - reset-names: must be "ctrl"
Documentation/devicetree/bindings/display/sunxi/sun4i-drm.txt:  - reset-names: must be "phy"
Documentation/devicetree/bindings/display/sunxi/sun4i-drm.txt: - reset-names: the reset names mentioned above
Documentation/devicetree/bindings/display/sunxi/sun4i-drm.txt:  - resets and reset-names need to have a phandle to the SAT bus
Documentation/devicetree/bindings/display/sunxi/sun4i-drm.txt:	reset-names = "lcd";
Documentation/devicetree/bindings/display/sunxi/sun6i-dsi.txt:		reset-gpios = <&r_pio 0 5 GPIO_ACTIVE_LOW>; /* PL05 */
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:  - reset-names: Must include the following entries:
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:		reset-names = "host1x";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "mpe";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "vi";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "epp";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "isp";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "2d";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "3d";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "dc";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "dc";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "hdmi";
Documentation/devicetree/bindings/display/tegra/nvidia,tegra20-host1x.txt:			reset-names = "dsi";
Documentation/devicetree/bindings/dma/nvidia,tegra20-apbdma.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/dma/nvidia,tegra20-apbdma.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/dma/nvidia,tegra20-apbdma.txt:	reset-names = "dma";
Documentation/devicetree/bindings/dma/qcom_adm.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/dma/qcom_adm.txt:			reset-names = "clk", "c0", "c1", "c2";
Documentation/devicetree/bindings/dma/qcom_hidma_mgmt.txt:- channel-reset-timeout-cycles: Channel reset timeout in cycles for this SOC.
Documentation/devicetree/bindings/dma/qcom_hidma_mgmt.txt:		channel-reset-timeout-cycles = <0x500>;
Documentation/devicetree/bindings/firmware/nvidia,tegra186-bpmp.txt:- #reset-cells : Should be 1.
Documentation/devicetree/bindings/firmware/nvidia,tegra186-bpmp.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/fpga/lattice-ice40-fpga-mgr.txt:- reset-gpios:		Active-low GPIO output connected to CRESET_B pin. Note
Documentation/devicetree/bindings/fpga/lattice-ice40-fpga-mgr.txt:		reset-gpios = <&gpio 22 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/fuse/nvidia,tegra20-fuse.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/fuse/nvidia,tegra20-fuse.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/fuse/nvidia,tegra20-fuse.txt:		reset-names = "fuse";
Documentation/devicetree/bindings/gpio/gpio-pca953x.txt: - reset-gpios: GPIO specification for the RESET input. This is an
Documentation/devicetree/bindings/gpio/gpio-uniphier.txt:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(29, 4) GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/gpio/gpio-xra1403.txt:	- reset-gpios: in case available used to control the device reset line.
Documentation/devicetree/bindings/gpio/gpio-xra1403.txt:		reset-gpios = <&gpio3 6 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/gpio/nvidia,tegra186-gpio.txt:interrupt signals generated by a set-of-ports. The intent is for each generated
Documentation/devicetree/bindings/gpu/nvidia,gk20a.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/gpu/nvidia,gk20a.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/gpu/nvidia,gk20a.txt:		reset-names = "gpu";
Documentation/devicetree/bindings/gpu/nvidia,gk20a.txt:		reset-names = "gpu";
Documentation/devicetree/bindings/gpu/nvidia,gk20a.txt:		reset-names = "gpu";
Documentation/devicetree/bindings/i2c/i2c-mux-gpio.txt:				reset-gpios = <&gpio2 7 1>;
Documentation/devicetree/bindings/i2c/i2c-mux-gpio.txt:				reset-active-low;
Documentation/devicetree/bindings/i2c/i2c-mux-gpmux.txt:				reset-gpios = <&gpio2 7 1>;
Documentation/devicetree/bindings/i2c/i2c-mux-gpmux.txt:				reset-active-low;
Documentation/devicetree/bindings/i2c/i2c-mux-pca954x.txt:  - reset-gpios: Reference to the GPIO connected to the reset input.
Documentation/devicetree/bindings/i2c/i2c-pca-platform.txt: - reset-gpios : gpio specifier for gpio connected to RESET_N pin. As the line
Documentation/devicetree/bindings/i2c/i2c-pca-platform.txt:		reset-gpios = <&gpio1 0 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/i2c/nvidia,tegra20-i2c.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/i2c/nvidia,tegra20-i2c.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/i2c/nvidia,tegra20-i2c.txt:		reset-names = "i2c";
Documentation/devicetree/bindings/iio/adc/rockchip-saradc.txt:- resets: Must contain an entry for each entry in reset-names if need support
Documentation/devicetree/bindings/iio/adc/rockchip-saradc.txt:- reset-names: Must include the name "saradc-apb".
Documentation/devicetree/bindings/iio/adc/rockchip-saradc.txt:		reset-names = "saradc-apb";
Documentation/devicetree/bindings/iio/dac/ad5592r.txt:	- reset-gpios : GPIO spec for the RESET pin. If specified, it will be
Documentation/devicetree/bindings/iio/dac/ad5592r.txt:		reset-gpios = <&gpio0 86 0>;  /* optional */
Documentation/devicetree/bindings/iio/health/afe4403.txt: - reset-gpios		: GPIO used to reset the device.
Documentation/devicetree/bindings/iio/health/afe4403.txt:		reset-gpios = <&gpio1 16 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/iio/health/afe4404.txt: - reset-gpios		: GPIO used to reset the device.
Documentation/devicetree/bindings/iio/health/afe4404.txt:		reset-gpios = <&gpio1 16 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/iio/light/cm3605.txt:- aset-gpios: GPIO line controlling the ASET line (drive low
Documentation/devicetree/bindings/iio/light/cm3605.txt:- capella,aset-resistance-ohms: the sensitivity calibration resistance,
Documentation/devicetree/bindings/iio/light/cm3605.txt:	aset-gpios = <&foo_gpio 1 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/iio/light/cm3605.txt:	capella,aset-resistance-ohms = <100000>;
Documentation/devicetree/bindings/iio/potentiometer/ad5272.txt: - reset-gpios: GPIO specification for the RESET input. This is an
Documentation/devicetree/bindings/iio/potentiometer/ad5272.txt:	reset-gpios = <&gpio3 6 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/iio/pressure/bmp085.txt:- reset-gpios: a GPIO line handling reset of the sensor: as the line is
Documentation/devicetree/bindings/iio/pressure/bmp085.txt:	reset-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/iio/proximity/sx9500.txt:	- reset-gpios: Reference to the GPIO connected to the device's active
Documentation/devicetree/bindings/iio/proximity/sx9500.txt:	reset-gpios = <&gpio2 10 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/iio/sensorhub.txt:- mcu-reset-gpios: [out] sensorhub reset
Documentation/devicetree/bindings/iio/sensorhub.txt:		mcu-reset-gpios = <&gpx0 5 0>;
Documentation/devicetree/bindings/input/atmel,maxtouch.txt:- reset-gpios: GPIO specifier for the touchscreen's reset pin (active low)
Documentation/devicetree/bindings/input/elants_i2c.txt:- reset-gpios: reset gpio the chip is connected to.
Documentation/devicetree/bindings/input/input-reset.txt:The /chosen node should contain a 'linux,sysrq-reset-seq' child node to define
Documentation/devicetree/bindings/input/input-reset.txt:sysrq-reset-seq: array of Linux keycodes, one keycode per cell.
Documentation/devicetree/bindings/input/input-reset.txt:                linux,sysrq-reset-seq {
Documentation/devicetree/bindings/input/nvidia,tegra20-kbc.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/input/nvidia,tegra20-kbc.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/input/nvidia,tegra20-kbc.txt:	reset-names = "kbc";
Documentation/devicetree/bindings/input/raydium_i2c_ts.txt:- reset-gpios: reset gpio the chip is connected to.
Documentation/devicetree/bindings/input/rmi4/rmi_2d_sensor.txt:- syna,offset-x: Add an offset to X.
Documentation/devicetree/bindings/input/rmi4/rmi_2d_sensor.txt:- syna,offset-y: Add an offset to Y.
Documentation/devicetree/bindings/input/rmi4/rmi_i2c.txt:- syna,reset-delay-ms: The number of milliseconds to wait after resetting the
Documentation/devicetree/bindings/input/touchscreen/cyttsp.txt: - reset-gpios		: the reset gpio the chip is connected to
Documentation/devicetree/bindings/input/touchscreen/cyttsp.txt:			reset-gpios = <&gpio3 4 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/input/touchscreen/cyttsp.txt:			reset-gpios = <&gpio3 4 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/input/touchscreen/edt-ft5x06.txt: - reset-gpios: GPIO specification for the RESET input
Documentation/devicetree/bindings/input/touchscreen/edt-ft5x06.txt:		reset-gpios = <&gpio2 6 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/input/touchscreen/goodix.txt: - reset-gpios		: GPIO pin used for reset
Documentation/devicetree/bindings/input/touchscreen/goodix.txt:			reset-gpios = <&gpio1 1 0>;
Documentation/devicetree/bindings/input/touchscreen/hideep.txt:- reset-gpios	: Define for reset gpio pin.
Documentation/devicetree/bindings/input/touchscreen/hideep.txt:		reset-gpios = <&gpx1 5 0>;
Documentation/devicetree/bindings/input/touchscreen/pixcir_i2c_ts.txt:- reset-gpios: GPIO connected to the RESET line of the chip
Documentation/devicetree/bindings/input/touchscreen/sis_i2c.txt:- reset-gpios: the gpio pin used to reset the controller
Documentation/devicetree/bindings/input/touchscreen/sis_i2c.txt:		reset-gpios = <&gpio2 30 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/input/touchscreen/tsc2005.txt: - reset-gpios		      : GPIO specifier for the controller reset line
Documentation/devicetree/bindings/input/touchscreen/tsc2005.txt:		reset-gpios = <&gpio4 8 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/input/touchscreen/tsc2005.txt:		reset-gpios = <&gpio4 8 GPIO_ACTIVE_HIGH>; /* 104 */
Documentation/devicetree/bindings/input/touchscreen/zforce_ts.txt:- reset-gpios: reset gpio the chip is connected to
Documentation/devicetree/bindings/input/touchscreen/zforce_ts.txt:			reset-gpios = <&gpio5 9 0>; /* RST */
Documentation/devicetree/bindings/interrupt-controller/brcm,bcm7038-l1-intc.txt:directly to one of the HW INT lines on each CPU.  Every BCM7xxx set-top chip
Documentation/devicetree/bindings/leds/leds-aat1290.txt:- enset-gpios : Must be device tree identifier of the flash device EN_SET pin.
Documentation/devicetree/bindings/leds/leds-aat1290.txt:	enset-gpios = <&gpj1 2 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/media/i2c/adv7604.txt:  - reset-gpios: Reference to the GPIO connected to the device's reset pin.
Documentation/devicetree/bindings/media/i2c/adv7604.txt:		reset-gpios = <&ioexp 0 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/i2c/imx274.txt:- reset-gpios: Sensor reset GPIO
Documentation/devicetree/bindings/media/i2c/imx274.txt:		reset-gpios = <&gpio_sensor 0 0>;
Documentation/devicetree/bindings/media/i2c/mt9p031.txt:- reset-gpios: Chip reset GPIO
Documentation/devicetree/bindings/media/i2c/mt9p031.txt:			reset-gpios = <&gpio3 30 0>;
Documentation/devicetree/bindings/media/i2c/mt9v032.txt:- reset-gpios: GPIO handle which is connected to the reset pin of the chip.
Documentation/devicetree/bindings/media/i2c/nokia,smia.txt:- reset-gpios: XSHUTDOWN GPIO
Documentation/devicetree/bindings/media/i2c/nokia,smia.txt:		reset-gpios = <&gpio3 20 0>;
Documentation/devicetree/bindings/media/i2c/ov2685.txt:- reset-gpios: Low active reset gpio
Documentation/devicetree/bindings/media/i2c/ov2685.txt:		reset-gpios = <&gpio2 3 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/i2c/ov5640.txt:- reset-gpios: reference to the GPIO connected to the reset pin, if any.
Documentation/devicetree/bindings/media/i2c/ov5640.txt:		reset-gpios = <&gpio1 20 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/i2c/ov5645.txt:- reset-gpios: Chip reset GPIO. Polarity is GPIO_ACTIVE_LOW. This corresponds to
Documentation/devicetree/bindings/media/i2c/ov5645.txt:			reset-gpios = <&gpio5 20 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/i2c/ov5695.txt:- reset-gpios: Low active reset gpio
Documentation/devicetree/bindings/media/i2c/ov5695.txt:		reset-gpios = <&gpio2 5 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/i2c/ov7670.txt:- reset-gpios: reference to the GPIO connected to the resetb pin, if any.
Documentation/devicetree/bindings/media/i2c/ov7670.txt:			reset-gpios = <&pioE 11 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/i2c/ov772x.txt:- reset-gpios: reference to the GPIO connected to the RSTB pin which is
Documentation/devicetree/bindings/media/i2c/ov772x.txt:		reset-gpios = <&axi_gpio_0 0 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/i2c/ov7740.txt:- reset-gpios: Rreference to the GPIO connected to the reset_b pin,
Documentation/devicetree/bindings/media/i2c/ov7740.txt:			reset-gpios = <&pioA 43 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/i2c/ov9650.txt:- reset-gpios: reference to the GPIO connected to the resetb pin, if any.
Documentation/devicetree/bindings/media/i2c/ov9650.txt:		reset-gpios = <&axi_gpio_0 0 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/media/i2c/tc358743.txt:- reset-gpios: gpio phandle GPIO connected to the reset pin
Documentation/devicetree/bindings/media/i2c/tc358743.txt:		reset-gpios = <&gpio6 9 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/i2c/ths8200.txt:recorders, set-top boxes.
Documentation/devicetree/bindings/media/i2c/toshiba,et8ek8.txt:- reset-gpios: XSHUTDOWN GPIO. The XSHUTDOWN signal is active low. The sensor
Documentation/devicetree/bindings/media/i2c/toshiba,et8ek8.txt:		reset-gpio = <&gpio4 6 GPIO_ACTIVE_HIGH>; /* 102 */
Documentation/devicetree/bindings/media/i2c/tvp5150.txt:- reset-gpios: phandle for the GPIO connected to the RESETB pin, if any.
Documentation/devicetree/bindings/media/i2c/tvp5150.txt:		reset-gpios = <&gpio6 7 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/renesas,ceu.txt:		reset-gpios = <&port3 11 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/media/rockchip-rga.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/media/rockchip-rga.txt:- reset-names: should be "core", "axi" and "ahb"
Documentation/devicetree/bindings/media/rockchip-rga.txt:		reset-names = "core, "axi", "ahb";
Documentation/devicetree/bindings/media/samsung-s5c73m3.txt:		reset-gpios = <&gpf1 3 1>;
Documentation/devicetree/bindings/media/si4713.txt:- reset-gpios: GPIO specifier for the chips reset line
Documentation/devicetree/bindings/media/si4713.txt:                reset-gpios = <&gpio6 3 GPIO_ACTIVE_HIGH>; /* 163 */
Documentation/devicetree/bindings/media/stih407-c8sectpfe.txt:- reset-gpios	: reset gpio for this tsin channel.
Documentation/devicetree/bindings/media/stih407-c8sectpfe.txt:			reset-gpios		= <&pio15 4 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/media/stih407-c8sectpfe.txt:			reset-gpios		= <&pio15 7 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/memory-controllers/exynos-srom.txt:                        Tcos : Chip selection set-up before OEn (0 - 15)
Documentation/devicetree/bindings/memory-controllers/exynos-srom.txt:                        Tacs : Address set-up before CSn (0 - 15)
Documentation/devicetree/bindings/memory-controllers/nvidia,tegra20-mc.txt:- #reset-cells : Should be 1. This cell represents memory client module ID.
Documentation/devicetree/bindings/memory-controllers/nvidia,tegra20-mc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/memory-controllers/nvidia,tegra30-mc.txt:- #reset-cells : Should be 1. This cell represents memory client module ID.
Documentation/devicetree/bindings/memory-controllers/nvidia,tegra30-mc.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/mfd/altera-a10sr.txt:- #reset-cells      : Should be one.
Documentation/devicetree/bindings/mfd/altera-a10sr.txt:		a10sr_rst: reset-controller {
Documentation/devicetree/bindings/mfd/altera-a10sr.txt:			#reset-cells = <1>;
Documentation/devicetree/bindings/mfd/arizona.txt:  - reset-gpios : GPIO specifier for the GPIO controlling /RESET
Documentation/devicetree/bindings/mfd/as3722.txt:				watchdog-in, soft-reset-in
Documentation/devicetree/bindings/mfd/aspeed-lpc.txt: - #reset-controller	indicates the number of reset cells expected
Documentation/devicetree/bindings/mfd/aspeed-lpc.txt:lpc_reset: reset-controller@18 {
Documentation/devicetree/bindings/mfd/aspeed-lpc.txt:        #reset-cells = <1>;
Documentation/devicetree/bindings/mfd/aspeed-scu.txt:- #reset-cells: should be set to <1> - the system controller is also a
Documentation/devicetree/bindings/mfd/aspeed-scu.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/mfd/qcom-pm8xxx.txt:- allow-set-time:
Documentation/devicetree/bindings/mfd/sun6i-prcm.txt:			#reset-cells = <1>;
Documentation/devicetree/bindings/mips/lantiq/fpi-bus.txt:- lantiq,offset-endianness	: Offset of the endianness configuration
Documentation/devicetree/bindings/mips/lantiq/fpi-bus.txt:		lantiq,offset-endianness = <0x4c>;
Documentation/devicetree/bindings/mips/lantiq/rcu-gphy.txt:- reset-names		: One entry, value must be "gphy" or optional "gphy2"
Documentation/devicetree/bindings/mips/lantiq/rcu-gphy.txt:		reset-names = "gphy", "gphy2";
Documentation/devicetree/bindings/mips/lantiq/rcu.txt:			reset-names = "gphy", "gphy2";
Documentation/devicetree/bindings/mips/lantiq/rcu.txt:			reset-names = "gphy", "gphy2";
Documentation/devicetree/bindings/mips/lantiq/rcu.txt:		reset0: reset-controller@10 {
Documentation/devicetree/bindings/mips/lantiq/rcu.txt:			#reset-cells = <2>;
Documentation/devicetree/bindings/mips/lantiq/rcu.txt:		reset1: reset-controller@48 {
Documentation/devicetree/bindings/mips/lantiq/rcu.txt:			#reset-cells = <2>;
Documentation/devicetree/bindings/mips/lantiq/rcu.txt:			reset-names = "phy", "ctrl";
Documentation/devicetree/bindings/mips/lantiq/rcu.txt:			reset-names = "phy", "ctrl";
Documentation/devicetree/bindings/mmc/mmc-pwrseq-emmc.txt:- reset-gpios : contains a GPIO specifier. The reset GPIO is asserted
Documentation/devicetree/bindings/mmc/mmc-pwrseq-emmc.txt:		reset-gpios = <&gpio1 12 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/mmc/mmc-pwrseq-sd8787.txt:- reset-gpios: contains a reset GPIO specifier with the default
Documentation/devicetree/bindings/mmc/mmc-pwrseq-sd8787.txt:		reset-gpios = <&twl_gpio 1 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/mmc/mmc-pwrseq-simple.txt:- reset-gpios : contains a list of GPIO specifiers. The reset GPIOs are asserted
Documentation/devicetree/bindings/mmc/mmc-pwrseq-simple.txt:	de-asserting the reset-gpios (if any)
Documentation/devicetree/bindings/mmc/mmc-pwrseq-simple.txt:- power-off-delay-us : Delay in us after asserting the reset-gpios (if any)
Documentation/devicetree/bindings/mmc/mmc-pwrseq-simple.txt:		reset-gpios = <&gpio1 12 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/mmc/nvidia,tegra20-sdhci.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/mmc/nvidia,tegra20-sdhci.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/mmc/nvidia,tegra20-sdhci.txt:	reset-names = "sdhci";
Documentation/devicetree/bindings/mmc/sunxi-mmc.txt: - reset-names : must contain "ahb"
Documentation/devicetree/bindings/mmc/synopsys-dw-mshc.txt:* reset-names: request name for using "resets" property. Must be "reset".
Documentation/devicetree/bindings/mmc/synopsys-dw-mshc.txt:		reset-names = "reset";
Documentation/devicetree/bindings/mtd/sunxi-nand.txt:- reset-names : must contain "ahb"
Documentation/devicetree/bindings/net/arc_emac.txt:- phy-reset-gpios : Should specify the gpio for phy reset
Documentation/devicetree/bindings/net/arc_emac.txt:- phy-reset-duration : Reset duration in milliseconds.  Should present
Documentation/devicetree/bindings/net/arc_emac.txt:  only if property "phy-reset-gpios" is available.  Missing the property
Documentation/devicetree/bindings/net/davicom-dm9000.txt:- reset-gpios : phandle of gpio that will be used to reset chip during probe
Documentation/devicetree/bindings/net/davicom-dm9000.txt:		reset-gpios = <&gpf 12 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/dsa/dsa.txt:			reset-gpios = <&gpio5 1 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/dsa/lan9303.txt:- reset-gpios: GPIO to be used to reset the whole device
Documentation/devicetree/bindings/net/dsa/lan9303.txt:- reset-duration: reset duration in milliseconds, defaults to 200 ms
Documentation/devicetree/bindings/net/dsa/lan9303.txt:		reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/dsa/lan9303.txt:		reset-duration = <200>;
Documentation/devicetree/bindings/net/dsa/lan9303.txt:				reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/dsa/lan9303.txt:				reset-duration = <100>;
Documentation/devicetree/bindings/net/dsa/marvell.txt:- reset-gpios		: Should be a gpio specifier for a reset line
Documentation/devicetree/bindings/net/dsa/marvell.txt:			reset-gpios = <&gpio5 1 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/dsa/marvell.txt:			reset-gpios = <&gpio5 1 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/dsa/mt7530.txt:- reset-gpios: Should be a gpio specifier for a reset line.
Documentation/devicetree/bindings/net/dsa/mt7530.txt:- reset-names : Should be set to "mcm".
Documentation/devicetree/bindings/net/dsa/mt7530.txt:			reset-gpios = <&pio 33 0>;
Documentation/devicetree/bindings/net/dwmac-sun8i.txt:- reset-names: must be "stmmaceth"
Documentation/devicetree/bindings/net/dwmac-sun8i.txt:	reset-names = "stmmaceth";
Documentation/devicetree/bindings/net/dwmac-sun8i.txt:	reset-names = "stmmaceth";
Documentation/devicetree/bindings/net/dwmac-sun8i.txt:	reset-names = "stmmaceth";
Documentation/devicetree/bindings/net/fsl-fec.txt:- phy-reset-gpios : Should specify the gpio for phy reset
Documentation/devicetree/bindings/net/fsl-fec.txt:- phy-reset-duration : Reset duration in milliseconds.  Should present
Documentation/devicetree/bindings/net/fsl-fec.txt:  only if property "phy-reset-gpios" is available.  Missing the property
Documentation/devicetree/bindings/net/fsl-fec.txt:- phy-reset-active-high : If present then the reset sequence using the GPIO
Documentation/devicetree/bindings/net/fsl-fec.txt:  specified in the "phy-reset-gpios" property is reversed (H=reset state,
Documentation/devicetree/bindings/net/fsl-fec.txt:- phy-reset-post-delay : Post reset delay in milliseconds. If present then
Documentation/devicetree/bindings/net/fsl-fec.txt:  a delay of phy-reset-post-delay milliseconds will be observed after the
Documentation/devicetree/bindings/net/fsl-fec.txt:  phy-reset-gpios has been toggled. Can be omitted thus no delay is
Documentation/devicetree/bindings/net/fsl-fec.txt:	phy-reset-gpios = <&gpio2 14 GPIO_ACTIVE_LOW>; /* GPIO2_14 */
Documentation/devicetree/bindings/net/fsl-fec.txt:	phy-reset-gpios = <&gpio2 14 GPIO_ACTIVE_LOW>; /* GPIO2_14 */
Documentation/devicetree/bindings/net/hisilicon-femac.txt:- reset-names: should contain the reset signal name "mac"(required)
Documentation/devicetree/bindings/net/hisilicon-femac.txt:- hisilicon,phy-reset-delays-us: triplet of delays if PHY reset signal given.
Documentation/devicetree/bindings/net/hisilicon-femac.txt:		reset-names = "mac","phy";
Documentation/devicetree/bindings/net/hisilicon-femac.txt:		hisilicon,phy-reset-delays-us = <10000 20000 20000>;
Documentation/devicetree/bindings/net/hisilicon-hix5hd2-gmac.txt:- reset-names: contain the reset signal name "mac_core"(optional),
Documentation/devicetree/bindings/net/hisilicon-hix5hd2-gmac.txt:- hisilicon,phy-reset-delays-us: triplet of delays if PHY reset signal given.
Documentation/devicetree/bindings/net/hisilicon-hix5hd2-gmac.txt:		reset-names = "mac_core", "mac_ifc", "phy";
Documentation/devicetree/bindings/net/hisilicon-hix5hd2-gmac.txt:		hisilicon,phy-reset-delays-us = <10000 10000 30000>;
Documentation/devicetree/bindings/net/hisilicon-hns-dsaf.txt:- reset-field-offset: is offset of reset field. Its value depends on the hardware
Documentation/devicetree/bindings/net/hisilicon-hns-dsaf.txt:	reset-field-offset = 0;
Documentation/devicetree/bindings/net/ieee802154/at86rf230.txt:  - reset-gpio:		GPIO spec for the rstn pin
Documentation/devicetree/bindings/net/ieee802154/ca8210.txt:	- reset-gpio:           GPIO attached to reset
Documentation/devicetree/bindings/net/ieee802154/ca8210.txt:		reset-gpio = <&gpio1 1 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/net/ieee802154/cc2520.txt:	- reset-gpio:		GPIO spec for the RESET pin
Documentation/devicetree/bindings/net/ieee802154/cc2520.txt:		reset-gpio = <&gpio1 12 0>;
Documentation/devicetree/bindings/net/ipq806x-dwmac.txt:		reset-names = "stmmaceth";
Documentation/devicetree/bindings/net/macb.txt:- reset-gpios : Should specify the gpio for phy reset
Documentation/devicetree/bindings/net/macb.txt:			reset-gpios = <&pioE 6 1>;
Documentation/devicetree/bindings/net/mdio.txt:- reset-gpios: One GPIO that control the RESET lines of all PHYs on that MDIO
Documentation/devicetree/bindings/net/mdio.txt:- reset-delay-us: RESET pulse width in microseconds.
Documentation/devicetree/bindings/net/mdio.txt:The 'reset-delay-us' indicates the RESET signal pulse width in microseconds and
Documentation/devicetree/bindings/net/mdio.txt:		reset-gpios = <&gpio2 5 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/mdio.txt:		reset-delay-us = <2>;
Documentation/devicetree/bindings/net/mediatek,mt7620-gsw.txt:- reset-names: Should contain the reset names "gsw"
Documentation/devicetree/bindings/net/mediatek,mt7620-gsw.txt:	reset-names = "gsw";
Documentation/devicetree/bindings/net/mediatek-net.txt:- reset-names: Should contain the names of reset signal listed in the resets
Documentation/devicetree/bindings/net/mediatek-net.txt:	reset-names = "eth";
Documentation/devicetree/bindings/net/micrel-ks8851.txt:- reset-gpios: reset_n input pin
Documentation/devicetree/bindings/net/micrel-ks8995.txt:- reset-gpios : phandle of gpio that will be used to reset chip during probe
Documentation/devicetree/bindings/net/micrel-ks8995.txt:		reset-gpios = <&gpio0 46 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/nfc/nfcmrvl.txt:- reset-n-io: Output GPIO pin used to reset the chip (active low).
Documentation/devicetree/bindings/net/nfc/nfcmrvl.txt:		reset-n-io = <&gpio3 16 0>;
Documentation/devicetree/bindings/net/nfc/nfcmrvl.txt:		reset-n-io = <&gpio3 19 0>;
Documentation/devicetree/bindings/net/nfc/nfcmrvl.txt:       		reset-n-io = <&gpio3 19 0>;
Documentation/devicetree/bindings/net/nfc/st-nci-i2c.txt:- reset-gpios: Output GPIO pin used to reset the ST21NFCB
Documentation/devicetree/bindings/net/nfc/st-nci-i2c.txt:		reset-gpios = <&gpio5 29 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/net/nfc/st-nci-spi.txt:- reset-gpios: Output GPIO pin used to reset the ST21NFCB
Documentation/devicetree/bindings/net/nfc/st-nci-spi.txt:		reset-gpios = <&gpio5 29 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/net/nokia-bluetooth.txt: - reset-gpios: GPIO specifier, used to reset the BT module (active low)
Documentation/devicetree/bindings/net/nokia-bluetooth.txt:               reset-gpios = <&gpio1 26 GPIO_ACTIVE_LOW>; /* gpio26 */
Documentation/devicetree/bindings/net/nxp,lpc1850-dwmac.txt:	reset-names = "stmmaceth";
Documentation/devicetree/bindings/net/phy.txt:- reset-gpios: The GPIO phandle and specifier for the PHY reset signal.
Documentation/devicetree/bindings/net/phy.txt:- reset-assert-us: Delay after the reset was asserted in microseconds.
Documentation/devicetree/bindings/net/phy.txt:- reset-deassert-us: Delay after the reset was deasserted in microseconds.
Documentation/devicetree/bindings/net/phy.txt:	reset-gpios = <&gpio1 4 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/phy.txt:	reset-assert-us = <1000>;
Documentation/devicetree/bindings/net/phy.txt:	reset-deassert-us = <2000>;
Documentation/devicetree/bindings/net/ralink,rt2880-net.txt:- reset-names: Should contain the reset names "fe". If a switch is present
Documentation/devicetree/bindings/net/ralink,rt2880-net.txt:	reset-names = "fe";
Documentation/devicetree/bindings/net/ralink,rt3050-esw.txt:- reset-names: Should contain the reset names "esw"
Documentation/devicetree/bindings/net/ralink,rt3050-esw.txt:	reset-names = "esw";
Documentation/devicetree/bindings/net/rockchip-dwmac.txt: - snps,reset-gpio       gpio number for phy reset.
Documentation/devicetree/bindings/net/rockchip-dwmac.txt: - snps,reset-active-low boolean flag to indicate if phy reset is active low.
Documentation/devicetree/bindings/net/rockchip-dwmac.txt:	snps,reset-gpio = <&gpio4 7 0>;
Documentation/devicetree/bindings/net/rockchip-dwmac.txt:	snps,reset-active-low;
Documentation/devicetree/bindings/net/smsc-lan91c111.txt:- reset-gpios: GPIO to control the RESET pin
Documentation/devicetree/bindings/net/smsc911x.txt:- reset-gpios : a GPIO line connected to the RESET (active low) signal
Documentation/devicetree/bindings/net/smsc911x.txt:	reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/snps,dwc-qos-ethernet.txt:- resets: Phandle and reset specifiers for each entry in reset-names, in the
Documentation/devicetree/bindings/net/snps,dwc-qos-ethernet.txt:- reset-names: May contain any/all of the following depending on the IP
Documentation/devicetree/bindings/net/snps,dwc-qos-ethernet.txt:- phy-reset-gpios: Phandle and specifier for any GPIO used to reset the PHY.
Documentation/devicetree/bindings/net/snps,dwc-qos-ethernet.txt:	phy-reset-gpios = <&gpioctlr 43 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/net/socionext,uniphier-ave4.txt: - reset-names: Should contain
Documentation/devicetree/bindings/net/socionext,uniphier-ave4.txt:		reset-names = "ether";
Documentation/devicetree/bindings/net/sti-dwmac.txt:	reset-names = "stmmaceth";
Documentation/devicetree/bindings/net/stmmac.txt:- snps,reset-gpio 	gpio number for phy reset.
Documentation/devicetree/bindings/net/stmmac.txt:- snps,reset-active-low boolean flag to indicate if phy reset is active low.
Documentation/devicetree/bindings/net/stmmac.txt:- snps,reset-delays-us  is triplet of delays
Documentation/devicetree/bindings/net/stmmac.txt:- reset-names: Should contain the reset signal name "stmmaceth", if a
Documentation/devicetree/bindings/net/wireless/qcom,ath10k.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/net/wireless/qcom,ath10k.txt:- reset-names: Must include the list of following reset names,
Documentation/devicetree/bindings/net/wireless/qcom,ath10k.txt:	reset-names = "wifi_cpu_init",
Documentation/devicetree/bindings/nios2/nios2.txt:- altr,tlb-num-ways: Specifies the number of set-associativity ways in the TLB.
Documentation/devicetree/bindings/nios2/nios2.txt:- altr,reset-addr: Specifies CPU reset address
Documentation/devicetree/bindings/nios2/nios2.txt:	altr,reset-addr = <0xc2800000>;
Documentation/devicetree/bindings/pci/designware-pcie.txt:- reset-gpio: GPIO pin number of power good signal
Documentation/devicetree/bindings/pci/fsl,imx6q-pcie.txt:- reset-gpio: Should specify the GPIO for controlling the PCI bus device reset
Documentation/devicetree/bindings/pci/fsl,imx6q-pcie.txt:- reset-gpio-active-high: If present then the reset sequence using the GPIO
Documentation/devicetree/bindings/pci/fsl,imx6q-pcie.txt:  specified in the "reset-gpio" property is reversed (H=reset state,
Documentation/devicetree/bindings/pci/fsl,imx6q-pcie.txt:- reset-names: Must contain the following entires:
Documentation/devicetree/bindings/pci/hisilicon-histb-pcie.txt:- resets: List of phandle and reset specifier pairs as listed in reset-names
Documentation/devicetree/bindings/pci/hisilicon-histb-pcie.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/pci/hisilicon-histb-pcie.txt:- reset-gpios: The gpio to generate PCIe PERST# assert and deassert signal.
Documentation/devicetree/bindings/pci/hisilicon-histb-pcie.txt:		reset-names = "soft", "sys", "bus";
Documentation/devicetree/bindings/pci/kirin-pcie.txt:- reset-gpios: The GPIO to generate PCIe PERST# assert and deassert signal.
Documentation/devicetree/bindings/pci/kirin-pcie.txt:		reset-gpios = <&gpio11 1 0 >;
Documentation/devicetree/bindings/pci/mediatek-pcie.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/pci/mediatek-pcie.txt:- reset-names: Must be "pcie-rst0", "pcie-rst1", "pcie-rstN".. based on the
Documentation/devicetree/bindings/pci/mediatek-pcie.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/pci/mediatek-pcie.txt:		reset-names = "pcie-rst0", "pcie-rst1", "pcie-rst2";
Documentation/devicetree/bindings/pci/mvebu-pci.txt:- reset-gpios: optional GPIO to PERST#
Documentation/devicetree/bindings/pci/mvebu-pci.txt:- reset-delay-us: delay in us to wait after reset de-assertion, if not
Documentation/devicetree/bindings/pci/mvebu-pci.txt:		reset-gpios = <&gpio0 25 1>;
Documentation/devicetree/bindings/pci/mvebu-pci.txt:		reset-delay-us = <20000>;
Documentation/devicetree/bindings/pci/nvidia,tegra20-pcie.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/pci/nvidia,tegra20-pcie.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/pci/nvidia,tegra20-pcie.txt:		reset-names = "pex", "afi", "pcie_x";
Documentation/devicetree/bindings/pci/nvidia,tegra20-pcie.txt:		reset-names = "pex", "afi", "pcie_x";
Documentation/devicetree/bindings/pci/nvidia,tegra20-pcie.txt:		reset-names = "pex", "afi", "pcie_x";
Documentation/devicetree/bindings/pci/nvidia,tegra20-pcie.txt:		reset-names = "pex", "afi", "pcie_x";
Documentation/devicetree/bindings/pci/nvidia,tegra20-pcie.txt:		reset-names = "afi", "pex", "pcie_x";
Documentation/devicetree/bindings/pci/qcom,pcie.txt:		    in reset-names property
Documentation/devicetree/bindings/pci/qcom,pcie.txt:- reset-names:
Documentation/devicetree/bindings/pci/qcom,pcie.txt:- reset-names:
Documentation/devicetree/bindings/pci/qcom,pcie.txt:- reset-names:
Documentation/devicetree/bindings/pci/qcom,pcie.txt:- reset-names:
Documentation/devicetree/bindings/pci/qcom,pcie.txt:		reset-names = "axi", "ahb", "por", "pci", "phy";
Documentation/devicetree/bindings/pci/qcom,pcie.txt:		reset-names = "core";
Documentation/devicetree/bindings/pci/rockchip-pcie-ep.txt:- resets: Must contain seven entries for each entry in reset-names.
Documentation/devicetree/bindings/pci/rockchip-pcie-ep.txt:- reset-names: Must include the following names
Documentation/devicetree/bindings/pci/rockchip-pcie-ep.txt:	reset-names = "core", "mgmt", "mgmt-sticky", "pipe",
Documentation/devicetree/bindings/pci/rockchip-pcie-host.txt:- resets: Must contain seven entries for each entry in reset-names.
Documentation/devicetree/bindings/pci/rockchip-pcie-host.txt:- reset-names: Must include the following names
Documentation/devicetree/bindings/pci/rockchip-pcie-host.txt:	reset-names = "core", "mgmt", "mgmt-sticky", "pipe",
Documentation/devicetree/bindings/pci/samsung,exynos5440-pcie.txt:		reset-gpio = <&pin_ctrl 5 0>;
Documentation/devicetree/bindings/pci/samsung,exynos5440-pcie.txt:		reset-gpio = <&pin_ctrl 22 0>;
Documentation/devicetree/bindings/phy/meson-gxl-usb2-phy.txt:- reset-names:	must be "phy"
Documentation/devicetree/bindings/phy/meson-gxl-usb3-phy.txt:- reset-names:	must contain "phy" and "peripheral"
Documentation/devicetree/bindings/phy/meson-gxl-usb3-phy.txt:		reset-names = "phy", "peripheral";
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:- reset-names: Must contain the following entries:
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:- reset-names: Must contain the following entries:
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:		reset-names = "padctl";
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:		reset-names = "padctl";
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:				reset-names = "phy";
Documentation/devicetree/bindings/phy/nvidia,tegra124-xusb-padctl.txt:				reset-names = "phy";
Documentation/devicetree/bindings/phy/nvidia,tegra20-usb-phy.txt: - resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/phy/nvidia,tegra20-usb-phy.txt: - reset-names : Must include the following entries:
Documentation/devicetree/bindings/phy/nvidia,tegra20-usb-phy.txt:  - nvidia,phy-reset-gpio : The GPIO used to reset the PHY.
Documentation/devicetree/bindings/phy/phy-ath79-usb.txt:- reset-names: "usb-phy"[, "usb-suspend-override"]
Documentation/devicetree/bindings/phy/phy-ath79-usb.txt:		reset-names = "usb-phy", "usb-suspend-override";
Documentation/devicetree/bindings/phy/phy-lantiq-rcu-usb2.txt:- reset-names	: Must be one of the following:
Documentation/devicetree/bindings/phy/phy-lantiq-rcu-usb2.txt:		reset-names = "phy", "ctrl";
Documentation/devicetree/bindings/phy/phy-mapphone-mdm6600.txt:- reset-gpios		GPIO to reset the device
Documentation/devicetree/bindings/phy/phy-mapphone-mdm6600.txt:	reset-gpios = <&gpio2 17 GPIO_ACTIVE_HIGH>;
Documentation/devicetree/bindings/phy/phy-miphy28lp.txt:- reset-names	: Associated name must be "miphy-sw-rst".
Documentation/devicetree/bindings/phy/phy-miphy28lp.txt:				reset-names = "miphy-sw-rst";
Documentation/devicetree/bindings/phy/phy-miphy28lp.txt:				reset-names = "miphy-sw-rst";
Documentation/devicetree/bindings/phy/phy-miphy28lp.txt:				reset-names = "miphy-sw-rst";
Documentation/devicetree/bindings/phy/phy-rockchip-typec.txt: - reset-names : string reset name, must be:
Documentation/devicetree/bindings/phy/phy-rockchip-typec.txt:		reset-names = "uphy", "uphy-pipe", "uphy-tcphy";
Documentation/devicetree/bindings/phy/phy-rockchip-typec.txt:		reset-names = "uphy", "uphy-pipe", "uphy-tcphy";
Documentation/devicetree/bindings/phy/phy-stih407-usb.txt:- reset-names		: list of reset signal names. Should be "global" and "port"
Documentation/devicetree/bindings/phy/phy-stih407-usb.txt:	reset-names	= "global", "port";
Documentation/devicetree/bindings/phy/qcom,usb-8x16-phy.txt:- reset-names:
Documentation/devicetree/bindings/phy/qcom,usb-8x16-phy.txt:		reset-names = "phy";
Documentation/devicetree/bindings/phy/qcom,usb-hs-phy.txt:- reset-names:
Documentation/devicetree/bindings/phy/qcom,usb-hs-phy.txt:			reset-names = "phy", "por";
Documentation/devicetree/bindings/phy/qcom-qmp-phy.txt:	   one for each entry in reset-names.
Documentation/devicetree/bindings/phy/qcom-qmp-phy.txt: - reset-names: "phy" for reset of phy block,
Documentation/devicetree/bindings/phy/qcom-qmp-phy.txt:	   one for each entry in reset-names.
Documentation/devicetree/bindings/phy/qcom-qmp-phy.txt: - reset-names: Must contain following for pcie qmp phys:
Documentation/devicetree/bindings/phy/qcom-qmp-phy.txt:		reset-names = "phy", "common", "cfg";
Documentation/devicetree/bindings/phy/qcom-qmp-phy.txt:			reset-names = "lane0";
Documentation/devicetree/bindings/phy/qcom-qusb2-phy.txt: - qcom,imp-res-offset-value: It is a 6 bit value that specifies offset to be
Documentation/devicetree/bindings/phy/ralink-usb-phy.txt: - reset-names: the names of the 2 reset controllers
Documentation/devicetree/bindings/phy/ralink-usb-phy.txt:	reset-names = "host", "device";
Documentation/devicetree/bindings/phy/rockchip-pcie-phy.txt: - resets: Must contain an entry in reset-names.
Documentation/devicetree/bindings/phy/rockchip-pcie-phy.txt: - reset-names: Must be "phy"
Documentation/devicetree/bindings/phy/rockchip-pcie-phy.txt:		reset-names = "phy";
Documentation/devicetree/bindings/phy/rockchip-usb-phy.txt:- reset-names: Only allow the following entries:
Documentation/devicetree/bindings/phy/rockchip-usb-phy.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/phy/sun4i-usb-phy.txt:- reset-names :
Documentation/devicetree/bindings/phy/sun4i-usb-phy.txt:		reset-names = "usb0_reset", "usb1_reset", "usb2_reset";
Documentation/devicetree/bindings/phy/sun9i-usb-phy.txt:- reset-names : depending on the "phy_type" property,
Documentation/devicetree/bindings/phy/sun9i-usb-phy.txt:		reset-names = "hsic", "phy";
Documentation/devicetree/bindings/pinctrl/cortina,gemini-pinctrl.txt:Subnodes of the pin controller contain pin control multiplexing set-up
Documentation/devicetree/bindings/pinctrl/nvidia,tegra124-xusb-padctl.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/pinctrl/nvidia,tegra124-xusb-padctl.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/pinctrl/nvidia,tegra124-xusb-padctl.txt:		reset-names = "padctl";
Documentation/devicetree/bindings/pinctrl/ste,nomadik.txt:  set-up.
Documentation/devicetree/bindings/power/reset/keystone-reset.txt:rstctrl: reset-controller {
Documentation/devicetree/bindings/power/reset/keystone-reset.txt:rstctrl: reset-controller {
Documentation/devicetree/bindings/power/supply/qcom,coincell-charger.txt:- qcom,rset-ohms:
Documentation/devicetree/bindings/power/supply/qcom,coincell-charger.txt:- qcom,vset-millivolts:
Documentation/devicetree/bindings/power/supply/qcom,coincell-charger.txt:			qcom,rset-ohms = <2100>;
Documentation/devicetree/bindings/power/supply/qcom,coincell-charger.txt:			qcom,vset-millivolts = <3000>;
Documentation/devicetree/bindings/powerpc/4xx/reboot.txt:			reset-type = <2>;	/* Use chip-reset */
Documentation/devicetree/bindings/pwm/nvidia,tegra20-pwm.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/pwm/nvidia,tegra20-pwm.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/pwm/nvidia,tegra20-pwm.txt:		reset-names = "pwm";
Documentation/devicetree/bindings/regulator/regulator.txt:- regulator-allow-set-load: allow the regulator performance level to be configured
Documentation/devicetree/bindings/regulator/ti-abb-regulator.txt:- ti,ldovbb-vset-mask	- Required if ldo-address is set, mask for LDO override
Documentation/devicetree/bindings/regulator/ti-abb-regulator.txt:		efuse the value to set in 'ti,ldovbb-vset-mask' at ldo-address.
Documentation/devicetree/bindings/regulator/ti-abb-regulator.txt:	ti,ldovbb-vset-mask = <0x1F>;
Documentation/devicetree/bindings/remoteproc/qcom,q6v5.txt:	Definition: reference to the reset-controller for the modem sub-system
Documentation/devicetree/bindings/remoteproc/qcom,q6v5.txt:- reset-names:
Documentation/devicetree/bindings/remoteproc/qcom,q6v5.txt:		reset-names = "mss_restart";
Documentation/devicetree/bindings/remoteproc/st-rproc.txt:- reset-names		Must be "sw_reset" and "pwr_reset"
Documentation/devicetree/bindings/remoteproc/st-rproc.txt:		reset-names	= "sw_reset";
Documentation/devicetree/bindings/reset/allwinner,sunxi-clock-reset.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/allwinner,sunxi-clock-reset.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/reset/amlogic,meson-reset.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/amlogic,meson-reset.txt:reset: reset-controller {
Documentation/devicetree/bindings/reset/amlogic,meson-reset.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/reset/ath79-reset.txt:- #reset-cells : Specifies the number of cells needed to encode reset
Documentation/devicetree/bindings/reset/ath79-reset.txt:	reset-controller@1806001c {
Documentation/devicetree/bindings/reset/ath79-reset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/berlin,reset.txt:- #reset-cells: must be set to 2
Documentation/devicetree/bindings/reset/berlin,reset.txt:	#reset-cells = <2>;
Documentation/devicetree/bindings/reset/brcm,bcm63138-pmb.txt:- #reset-cells: must be 2 first cell is the address within the bus instance designated
Documentation/devicetree/bindings/reset/brcm,bcm63138-pmb.txt:	pmb0: reset-controller@4800c0 {
Documentation/devicetree/bindings/reset/brcm,bcm63138-pmb.txt:		#reset-cells = <2>;
Documentation/devicetree/bindings/reset/fsl,imx-src.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/fsl,imx-src.txt:        #reset-cells = <1>;
Documentation/devicetree/bindings/reset/fsl,imx7-src.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/fsl,imx7-src.txt:src: reset-controller@30390000 {
Documentation/devicetree/bindings/reset/fsl,imx7-src.txt:     #reset-cells = <1>;
Documentation/devicetree/bindings/reset/fsl,imx7-src.txt:		reset-names = "pciephy", "apps";
Documentation/devicetree/bindings/reset/hisilicon,hi3660-reset.txt:- #reset-cells : Specifies the number of cells needed to encode a
Documentation/devicetree/bindings/reset/hisilicon,hi3660-reset.txt:		#reset-cells = <2>;
Documentation/devicetree/bindings/reset/hisilicon,hi6220-reset.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/hisilicon,hi6220-reset.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/reset/img,pistachio-reset.txt:- #reset-cells: Contains 1
Documentation/devicetree/bindings/reset/img,pistachio-reset.txt:		pistachio_reset: reset-controller {
Documentation/devicetree/bindings/reset/img,pistachio-reset.txt:			#reset-cells = <1>;
Documentation/devicetree/bindings/reset/img,pistachio-reset.txt:		reset-names = "rst";
Documentation/devicetree/bindings/reset/lantiq,reset.txt:This binding describes a reset-controller found on the RCU module on Lantiq
Documentation/devicetree/bindings/reset/lantiq,reset.txt:- #reset-cells		: Specifies the number of cells needed to encode the
Documentation/devicetree/bindings/reset/lantiq,reset.txt:Example for the reset-controllers on the xRX200 SoCs:
Documentation/devicetree/bindings/reset/lantiq,reset.txt:	reset0: reset-controller@10 {
Documentation/devicetree/bindings/reset/lantiq,reset.txt:		#reset-cells = <2>;
Documentation/devicetree/bindings/reset/nxp,lpc1850-rgu.txt:- #reset-cells: should be 1
Documentation/devicetree/bindings/reset/nxp,lpc1850-rgu.txt:rgu: reset-controller@40053000 {
Documentation/devicetree/bindings/reset/nxp,lpc1850-rgu.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/reset/nxp,lpc1850-rgu.txt:	reset-names = "stmmaceth";
Documentation/devicetree/bindings/reset/oxnas,reset.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/oxnas,reset.txt:	reset: reset-controller {
Documentation/devicetree/bindings/reset/oxnas,reset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/renesas,rst.txt:		  - "renesas,<soctype>-reset-wdt" for R-Car Gen1,
Documentation/devicetree/bindings/reset/renesas,rst.txt:		  - "renesas,r8a7778-reset-wdt" (R-Car M1A)
Documentation/devicetree/bindings/reset/renesas,rst.txt:		  - "renesas,r8a7779-reset-wdt" (R-Car H1)
Documentation/devicetree/bindings/reset/renesas,rst.txt:	rst: reset-controller@e6160000 {
Documentation/devicetree/bindings/reset/reset.txt:#reset-cells:	Number of cells in a reset specifier; Typically 0 for nodes
Documentation/devicetree/bindings/reset/reset.txt:	rst: reset-controller {
Documentation/devicetree/bindings/reset/reset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/reset.txt:		#reset-cells, then only the phandle portion of the pair will
Documentation/devicetree/bindings/reset/reset.txt:reset-names:	List of reset signal name strings sorted in the same order as
Documentation/devicetree/bindings/reset/reset.txt:		the resets property. Consumers drivers will use reset-names to
Documentation/devicetree/bindings/reset/reset.txt:		reset-names = "reset";
Documentation/devicetree/bindings/reset/reset.txt:		reset-names = "i2s1", "i2s2", "dma", "mixer";
Documentation/devicetree/bindings/reset/sirf,rstc.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/sirf,rstc.txt:rstc: reset-controller@88010000 {
Documentation/devicetree/bindings/reset/sirf,rstc.txt:	#reset-cells = <1>;
Documentation/devicetree/bindings/reset/snps,axs10x-reset.txt:- #reset-cells: from common reset binding; Should always be set to 1.
Documentation/devicetree/bindings/reset/snps,axs10x-reset.txt:	reset: reset-controller@11220 {
Documentation/devicetree/bindings/reset/snps,axs10x-reset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/snps,hsdk-reset.txt:- #reset-cells: from common reset binding; Should always be set to 1.
Documentation/devicetree/bindings/reset/snps,hsdk-reset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/socfpga-reset.txt:- #reset-cells: 1
Documentation/devicetree/bindings/reset/socfpga-reset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/st,sti-picophyreset.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/st,sti-picophyreset.txt:	picophyreset: picophyreset-controller {
Documentation/devicetree/bindings/reset/st,sti-picophyreset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/st,sti-powerdown.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/st,sti-powerdown.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/st,sti-softreset.txt:- #reset-cells: 1, see below
Documentation/devicetree/bindings/reset/st,sti-softreset.txt:	softreset: softreset-controller {
Documentation/devicetree/bindings/reset/st,sti-softreset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/ti,sci-reset.txt: - #reset-cells	: Should be 2. Please see the reset consumer node below for
Documentation/devicetree/bindings/reset/ti,sci-reset.txt:	k2g_reset: reset-controller {
Documentation/devicetree/bindings/reset/ti,sci-reset.txt:		#reset-cells = <2>;
Documentation/devicetree/bindings/reset/ti-syscon-reset.txt: - #reset-cells		: Should be 1. Please see the reset consumer node below
Documentation/devicetree/bindings/reset/ti-syscon-reset.txt: - ti,reset-bits	: Contains the reset control register information
Documentation/devicetree/bindings/reset/ti-syscon-reset.txt:			pscrst: reset-controller {
Documentation/devicetree/bindings/reset/ti-syscon-reset.txt:				#reset-cells = <1>;
Documentation/devicetree/bindings/reset/ti-syscon-reset.txt:				ti,reset-bits = <
Documentation/devicetree/bindings/reset/uniphier-reset.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/reset/uniphier-reset.txt:			#reset-cells = <1>;
Documentation/devicetree/bindings/reset/uniphier-reset.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/reset/uniphier-reset.txt:			#reset-cells = <1>;
Documentation/devicetree/bindings/reset/uniphier-reset.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/reset/uniphier-reset.txt:			#reset-cells = <1>;
Documentation/devicetree/bindings/reset/uniphier-reset.txt:- #reset-cells: should be 1.
Documentation/devicetree/bindings/reset/uniphier-reset.txt:			#reset-cells = <1>;
Documentation/devicetree/bindings/reset/zte,zx2967-reset.txt:- #reset-cells: must be 1.
Documentation/devicetree/bindings/reset/zte,zx2967-reset.txt:	reset: reset-controller@1461060 {
Documentation/devicetree/bindings/reset/zte,zx2967-reset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/reset/zynq-reset.txt:- #reset-cells: Must be 1
Documentation/devicetree/bindings/reset/zynq-reset.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/rtc/ingenic,jz4740-rtc.txt:- reset-pin-assert-time-ms: Reset pin low-level assertion
Documentation/devicetree/bindings/rtc/ingenic,jz4740-rtc.txt:	reset-pin-assert-time-ms = <60>;
Documentation/devicetree/bindings/scsi/hisilicon-sas.txt:  - ctrl-reset-reg : offset to controller reset register in ctrl reg
Documentation/devicetree/bindings/scsi/hisilicon-sas.txt:  - ctrl-reset-sts-reg : offset to controller reset status register in ctrl reg
Documentation/devicetree/bindings/scsi/hisilicon-sas.txt:		ctrl-reset-reg = <0xa60>;
Documentation/devicetree/bindings/scsi/hisilicon-sas.txt:		ctrl-reset-sts-reg = <0x5a30>;
Documentation/devicetree/bindings/serial/nvidia,tegra20-hsuart.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/serial/nvidia,tegra20-hsuart.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/serial/nvidia,tegra20-hsuart.txt:	reset-names = "serial";
Documentation/devicetree/bindings/soc/dove/pmu.txt: - #reset-cells: must be 1.
Documentation/devicetree/bindings/soc/dove/pmu.txt:		#reset-cells = <1>;
Documentation/devicetree/bindings/soc/mediatek/pwrap.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/soc/mediatek/pwrap.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/soc/mediatek/pwrap.txt:		reset-names = "pwrap", "pwrap-bridge";
Documentation/devicetree/bindings/sound/adi,adau1701.txt: - reset-gpio: 		A GPIO spec to define which pin is connected to the
Documentation/devicetree/bindings/sound/adi,adau1701.txt:			reset-gpio = <&gpio 23 0>;
Documentation/devicetree/bindings/sound/ak4104.txt:  - reset-gpio : a GPIO spec for the reset pin. If specified, it will be
Documentation/devicetree/bindings/sound/ak4458.txt:- reset-gpios: A GPIO specifier for the power down & reset pin
Documentation/devicetree/bindings/sound/ak4458.txt:		reset-gpios = <&gpio1 10 GPIO_ACTIVE_LOW>
Documentation/devicetree/bindings/sound/ak5386.txt:  - reset-gpio : a GPIO spec for the reset/power down pin.
Documentation/devicetree/bindings/sound/ak5386.txt:	reset-gpio = <&gpio0 23>;
Documentation/devicetree/bindings/sound/ak5558.txt:- reset-gpios: A GPIO specifier for the power down & reset pin.
Documentation/devicetree/bindings/sound/ak5558.txt:		reset-gpios = <&gpio1 10 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/sound/cs35l32.txt:  - reset-gpios : a GPIO spec for the reset pin. If specified, it will be
Documentation/devicetree/bindings/sound/cs35l32.txt:	reset-gpios = <&gpio 10 0>;
Documentation/devicetree/bindings/sound/cs35l33.txt:  - reset-gpios : gpio used to reset the amplifier
Documentation/devicetree/bindings/sound/cs35l33.txt:	reset-gpios = <&cs47l91 34 0>;
Documentation/devicetree/bindings/sound/cs35l34.txt:  - reset-gpios: GPIO used to reset the amplifier.
Documentation/devicetree/bindings/sound/cs35l34.txt:	reset-gpios = <&gpio 10 0>;
Documentation/devicetree/bindings/sound/cs35l35.txt:  - reset-gpios : gpio used to reset the amplifier
Documentation/devicetree/bindings/sound/cs35l35.txt:	reset-gpios = <&axi_gpio 54 0>;
Documentation/devicetree/bindings/sound/cs4265.txt:  - reset-gpios : a GPIO spec for the reset pin. If specified, it will be
Documentation/devicetree/bindings/sound/cs4270.txt:  - reset-gpio : a GPIO spec for the reset pin. If specified, it will be
Documentation/devicetree/bindings/sound/cs4271.txt: - reset-gpio: 	a GPIO spec to define which pin is connected to the chip's
Documentation/devicetree/bindings/sound/cs4271.txt:		reset-gpio = <&gpio 23 0>;
Documentation/devicetree/bindings/sound/cs4271.txt:		reset-gpio = <&gpio 23 0>;
Documentation/devicetree/bindings/sound/cs42l42.txt:  - reset-gpios : a GPIO spec for the reset pin. If specified, it will be
Documentation/devicetree/bindings/sound/cs42l42.txt:	reset-gpios = <&axi_gpio_0 1 0>;
Documentation/devicetree/bindings/sound/cs42l52.txt:  - cirrus,reset-gpio : GPIO controller's phandle and the number
Documentation/devicetree/bindings/sound/cs42l52.txt:	reset-gpio = <&gpio 10 0>;
Documentation/devicetree/bindings/sound/cs43130.txt:  - reset-gpios : Active low GPIO used to reset the device
Documentation/devicetree/bindings/sound/cs43130.txt:   reset-gpios = <&axi_gpio 54 0>;
Documentation/devicetree/bindings/sound/cs4349.txt:  - reset-gpios : a GPIO spec for the reset pin.
Documentation/devicetree/bindings/sound/cs4349.txt:        reset-gpios = <&gpio 54 0>;
Documentation/devicetree/bindings/sound/cs53l30.txt:  - reset-gpios : a GPIO spec for the reset pin.
Documentation/devicetree/bindings/sound/cs53l30.txt:	reset-gpios = <&gpio 54 0>;
Documentation/devicetree/bindings/sound/img,i2s-in.txt:  - reset-names: Contains the reset signal name "rst"
Documentation/devicetree/bindings/sound/img,i2s-out.txt:  - reset-names: Contains the reset signal name "rst"
Documentation/devicetree/bindings/sound/img,i2s-out.txt:	reset-names = "rst";
Documentation/devicetree/bindings/sound/img,parallel-out.txt:  - reset-names: Contains the reset signal name "rst"
Documentation/devicetree/bindings/sound/img,parallel-out.txt:	reset-names = "rst";
Documentation/devicetree/bindings/sound/img,spdif-in.txt:  - reset-names: Should contain the reset signal name "rst", if a
Documentation/devicetree/bindings/sound/img,spdif-out.txt:  - reset-names: Contains the reset signal name "rst"
Documentation/devicetree/bindings/sound/img,spdif-out.txt:	reset-names = "rst";
Documentation/devicetree/bindings/sound/nvidia,tegra20-ac97.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/sound/nvidia,tegra20-ac97.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/sound/nvidia,tegra20-ac97.txt:- nvidia,codec-reset-gpio : The Tegra GPIO controller's phandle and the number
Documentation/devicetree/bindings/sound/nvidia,tegra20-ac97.txt:	nvidia,codec-reset-gpio = <&gpio 170 0>;
Documentation/devicetree/bindings/sound/nvidia,tegra20-ac97.txt:	reset-names = "ac97";
Documentation/devicetree/bindings/sound/nvidia,tegra20-i2s.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/sound/nvidia,tegra20-i2s.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/sound/nvidia,tegra20-i2s.txt:	reset-names = "i2s";
Documentation/devicetree/bindings/sound/nvidia,tegra30-ahub.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/sound/nvidia,tegra30-ahub.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/sound/nvidia,tegra30-ahub.txt:	reset-names = "d_audio", "apbif", "i2s0", "i2s1", "i2s2",
Documentation/devicetree/bindings/sound/nvidia,tegra30-hda.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/sound/nvidia,tegra30-hda.txt:- reset-names : Must include the following entries: hda, hda2hdmi, hda2codec_2x
Documentation/devicetree/bindings/sound/nvidia,tegra30-hda.txt:	reset-names = "hda", "hda2hdmi", "hda2codec_2x";
Documentation/devicetree/bindings/sound/nvidia,tegra30-i2s.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/sound/nvidia,tegra30-i2s.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/sound/nvidia,tegra30-i2s.txt:	reset-names = "i2s";
Documentation/devicetree/bindings/sound/pcm1789.txt: - reset-gpios: GPIO to control the RESET pin
Documentation/devicetree/bindings/sound/pcm1789.txt:		reset-gpios = <&gpio2 14 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/sound/renesas,rsnd.txt:- reset-names			: List of valid reset names.
Documentation/devicetree/bindings/sound/rockchip-max98090.txt:- rockchip,headset-codec: The phandle of Ext chip for jack detection
Documentation/devicetree/bindings/sound/rockchip-max98090.txt:	rockchip,headset-codec = <&headsetcodec>;
Documentation/devicetree/bindings/sound/rohm,bd28623.txt:- reset-gpios     : GPIO specifier for the active low reset line
Documentation/devicetree/bindings/sound/rohm,bd28623.txt:		reset-gpios = <&gpio 0 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/sound/rt5659.txt:- realtek,reset-gpios : The GPIO that controls the CODEC's RESET pin.
Documentation/devicetree/bindings/sound/rt5677.txt:- realtek,reset-gpio : The GPIO that controls the CODEC's RESET pin. Active low.
Documentation/devicetree/bindings/sound/rt5677.txt:	realtek,reset-gpio = <&gpio TEGRA_GPIO(BB, 3) GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/sound/st,sta32x.txt:  - reset-gpios: a GPIO spec for the reset pin. If specified, it will be
Documentation/devicetree/bindings/sound/st,sta32x.txt:	reset-gpios = <&gpio1 19 0>;
Documentation/devicetree/bindings/sound/st,sta350.txt:  - reset-gpios: a GPIO spec for the reset pin. If specified, it will be
Documentation/devicetree/bindings/sound/st,sta350.txt:	reset-gpios = <&gpio1 19 0>;
Documentation/devicetree/bindings/sound/tas571x.txt:- reset-gpios: GPIO specifier for the TAS571x's active low reset line
Documentation/devicetree/bindings/sound/tas571x.txt:		reset-gpios = <&gpio5 1 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/sound/ti,tas5086.txt: - reset-gpio: 		A GPIO spec to define which pin is connected to the
Documentation/devicetree/bindings/sound/ti,tas5086.txt:			reset-gpio = <&gpio 23 0>;
Documentation/devicetree/bindings/sound/tlv320aic31xx.txt:- reset-gpios - GPIO specification for the active low RESET input.
Documentation/devicetree/bindings/sound/tlv320aic31xx.txt:	reset-gpios = <&gpio1 17 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/sound/tlv320aic32x4.txt: - reset-gpios: Reset-GPIO phandle with args as described in gpio/gpio.txt
Documentation/devicetree/bindings/sound/tlv320aic3x.txt:- reset-gpios - GPIO specification for the active low RESET input.
Documentation/devicetree/bindings/sound/tlv320aic3x.txt:	reset-gpios = <&gpio1 17 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/sound/uniphier,aio.txt:- reset-names     : should include following entries:
Documentation/devicetree/bindings/sound/uniphier,aio.txt:                    entry in reset-names.
Documentation/devicetree/bindings/sound/uniphier,aio.txt:		reset-names = "aio";
Documentation/devicetree/bindings/sound/uniphier,evea.txt:- reset-names     : should include following entries:
Documentation/devicetree/bindings/sound/uniphier,evea.txt:                    reset-names.
Documentation/devicetree/bindings/sound/uniphier,evea.txt:		reset-names = "evea", "exiv", "adamv";
Documentation/devicetree/bindings/sound/wm8804.txt:  - wlf,reset-gpio: A GPIO specifier for the GPIO controlling the reset pin
Documentation/devicetree/bindings/spi/nvidia,tegra114-spi.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/spi/nvidia,tegra114-spi.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/spi/nvidia,tegra114-spi.txt:	reset-names = "spi";
Documentation/devicetree/bindings/spi/nvidia,tegra20-sflash.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/spi/nvidia,tegra20-sflash.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/spi/nvidia,tegra20-sflash.txt:	reset-names = "spi";
Documentation/devicetree/bindings/spi/nvidia,tegra20-slink.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/spi/nvidia,tegra20-slink.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/spi/nvidia,tegra20-slink.txt:	reset-names = "spi";
Documentation/devicetree/bindings/thermal/mediatek-thermal.txt:		reset-names = "therm";
Documentation/devicetree/bindings/thermal/nvidia,tegra124-soctherm.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/thermal/nvidia,tegra124-soctherm.txt:- reset-names : Must include the following entries:
Documentation/devicetree/bindings/thermal/nvidia,tegra124-soctherm.txt:		reset-names = "soctherm";
Documentation/devicetree/bindings/thermal/rockchip-thermal.txt:- resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/thermal/rockchip-thermal.txt:- reset-names : Must include the name "tsadc-apb".
Documentation/devicetree/bindings/thermal/rockchip-thermal.txt:	reset-names = "tsadc-apb";
Documentation/devicetree/bindings/usb/amlogic,dwc3.txt:- reset-names:	must be "usb_otg"
Documentation/devicetree/bindings/usb/amlogic,dwc3.txt:			reset-names = "usb_otg";
Documentation/devicetree/bindings/usb/dwc3-st.txt: - reset-names	: list of reset signal names. Names should be "powerdown" and "softreset"
Documentation/devicetree/bindings/usb/dwc3-st.txt:	reset-names	= "powerdown", "softreset";
Documentation/devicetree/bindings/usb/ehci-st.txt: - reset-names		: should be "power" and "softreset"
Documentation/devicetree/bindings/usb/ehci-st.txt:		reset-names = "power", "softreset";
Documentation/devicetree/bindings/usb/hisilicon,histb-xhci.txt:	reset-names property.
Documentation/devicetree/bindings/usb/hisilicon,histb-xhci.txt: - reset-names: must contain
Documentation/devicetree/bindings/usb/hisilicon,histb-xhci.txt:	reset-names = "soft";
Documentation/devicetree/bindings/usb/msm-hsusb.txt:- resets:       A list of phandle + reset-specifier pairs for the
Documentation/devicetree/bindings/usb/msm-hsusb.txt:                resets listed in reset-names
Documentation/devicetree/bindings/usb/msm-hsusb.txt:- reset-names:  Should contain the following:
Documentation/devicetree/bindings/usb/msm-hsusb.txt:        reset-names = "phy", "link";
Documentation/devicetree/bindings/usb/nvidia,tegra124-xusb.txt:- resets: Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/usb/nvidia,tegra124-xusb.txt:- reset-names: Must include the following entries:
Documentation/devicetree/bindings/usb/nvidia,tegra124-xusb.txt:		reset-names = "xusb_host", "xusb_ss", "xusb_src";
Documentation/devicetree/bindings/usb/nvidia,tegra20-ehci.txt: - resets : Must contain an entry for each entry in reset-names.
Documentation/devicetree/bindings/usb/nvidia,tegra20-ehci.txt: - reset-names : Must include the following entries:
Documentation/devicetree/bindings/usb/ohci-st.txt: - reset-names		: should be "power" and "softreset".
Documentation/devicetree/bindings/usb/ohci-st.txt:		reset-names = "power", "softreset";
Documentation/devicetree/bindings/usb/qcom,dwc3.txt:			reset-names = "core_reset";
Documentation/devicetree/bindings/usb/usb-ehci.txt: - needs-reset-on-resume : boolean, set this to force EHCI reset after resume
Documentation/devicetree/bindings/usb/usb-nop-xceiv.txt:- reset-gpios: Should specify the GPIO for reset.
Documentation/devicetree/bindings/usb/usb-nop-xceiv.txt:		reset-gpios = <&gpio1 7 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/usb/usb251xb.txt: - reset-gpios : Should specify the gpio for hub reset
Documentation/devicetree/bindings/usb/usb251xb.txt:		reset-gpios = <&gpio1 4 GPIO_ACTIVE_LOW>;
Documentation/devicetree/bindings/usb/usb3503.txt:- reset-gpios: Should specify GPIO for reset.
Documentation/devicetree/bindings/usb/usb3503.txt:		reset-gpios = <&gpx3 5 1>;
Documentation/devicetree/bindings/usb/usb4604.txt:- reset-gpios: Should specify GPIO for reset.
Documentation/devicetree/bindings/usb/usb4604.txt:		reset-gpios = <&gpx3 5 1>;
Documentation/devicetree/bindings/watchdog/alphascale-asm9260.txt:- reset-names : should be set to "wdt_rst".
Documentation/devicetree/bindings/watchdog/alphascale-asm9260.txt:	reset-names = "wdt_rst";
Documentation/devicetree/bindings/watchdog/aspeed-wdt.txt: - aspeed,reset-type = "cpu|soc|system|none"
Documentation/devicetree/bindings/watchdog/aspeed-wdt.txt:   If 'aspeed,reset-type=' is not specfied the default is to enable system
Documentation/devicetree/bindings/watchdog/aspeed-wdt.txt:		aspeed,reset-type = "system";
Documentation/devicetree/bindings/watchdog/atmel-wdt.txt:- atmel,reset-type : Should be "proc" or "all".
Documentation/devicetree/bindings/watchdog/atmel-wdt.txt:		atmel,reset-type = "all";
Documentation/devicetree/bindings/watchdog/cadence-wdt.txt:- reset-on-timeout	: If this property exists, then a reset is done
Documentation/devicetree/bindings/watchdog/cadence-wdt.txt:		reset-on-timeout;
Documentation/devicetree/bindings/watchdog/fsl-imx-wdt.txt:- fsl,ext-reset-output: If present the watchdog device is configured to
Documentation/devicetree/bindings/watchdog/ziirave-wdt.txt:- reset-duration-ms: Duration of the pulse generated when the watchdog times
Documentation/devicetree/bindings/watchdog/ziirave-wdt.txt:		reset-duration-ms = <30>;
Documentation/devicetree/bindings/watchdog/zte,zx2967-wdt.txt:- zte,wdt-reset-sysctrl : Directs how to reset system by the watchdog.
Documentation/devicetree/bindings/watchdog/zte,zx2967-wdt.txt:	zte,wdt-reset-sysctrl = <&aon_sysctrl 0xb0 1 0x115>;
Documentation/driver-api/gpio/driver.rst:To help out in handling the set-up and management of GPIO irqchips and the
Documentation/driver-api/usb/power-management.rst:   child device can suspend (autosuspend-delay) and resume (reset-resume
Documentation/fb/fbcon.txt:always be available. However, using a chipset-specific driver will give you
Documentation/filesystems/hfs.txt: o You can't modify the set-uid, set-gid, sticky or executable bits or the uid
Documentation/isdn/README.gigaset:     configuration files and chat scripts in the gigaset-VERSION/ppp directory
Documentation/kbuild/makefiles.txt:		KBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)
Documentation/kbuild/makefiles.txt:	In the above example, -Wno-unused-but-set-variable will be added to
Documentation/kobject.txt:samples/kobject/kset-example.c file in the kernel tree.
Documentation/kobject.txt:example programs samples/kobject/{kobject-example.c,kset-example.c},
Documentation/media/uapi/dvb/audio_function_calls.rst:    audio-set-mute
Documentation/media/uapi/dvb/audio_function_calls.rst:    audio-set-av-sync
Documentation/media/uapi/dvb/audio_function_calls.rst:    audio-set-bypass-mode
Documentation/media/uapi/dvb/audio_function_calls.rst:    audio-set-id
Documentation/media/uapi/dvb/audio_function_calls.rst:    audio-set-mixer
Documentation/media/uapi/dvb/audio_function_calls.rst:    audio-set-streamtype
Documentation/media/uapi/dvb/audio_function_calls.rst:    audio-set-ext-id
Documentation/media/uapi/dvb/audio_function_calls.rst:    audio-set-attributes
Documentation/media/uapi/dvb/audio_function_calls.rst:    audio-set-karaoke
Documentation/media/uapi/dvb/ca_function_calls.rst:    ca-set-descr
Documentation/media/uapi/dvb/dmx-set-filter.rst::ref:`DMX_START` ioctl call). If a filter was previously set-up, this
Documentation/media/uapi/dvb/dmx_fcalls.rst:    dmx-set-filter
Documentation/media/uapi/dvb/dmx_fcalls.rst:    dmx-set-pes-filter
Documentation/media/uapi/dvb/dmx_fcalls.rst:    dmx-set-buffer-size
Documentation/media/uapi/dvb/frontend_fcalls.rst:    fe-diseqc-reset-overload
Documentation/media/uapi/dvb/frontend_fcalls.rst:    fe-set-tone
Documentation/media/uapi/dvb/frontend_fcalls.rst:    fe-set-voltage
Documentation/media/uapi/dvb/frontend_fcalls.rst:    fe-set-frontend-tune-mode
Documentation/media/uapi/dvb/frontend_legacy_api.rst:    fe-set-frontend
Documentation/media/uapi/dvb/intro.rst:A Digital TV card or set-top-box (STB) usually consists of the
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-blank
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-display-format
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-id
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-streamtype
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-format
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-system
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-highlight
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-spu
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-spu-palette
Documentation/media/uapi/dvb/video_function_calls.rst:    video-set-attributes
Documentation/media/uapi/rc/lirc-func.rst:    lirc-set-send-duty-cycle
Documentation/media/uapi/rc/lirc-func.rst:    lirc-set-rec-timeout
Documentation/media/uapi/rc/lirc-func.rst:    lirc-set-rec-carrier
Documentation/media/uapi/rc/lirc-func.rst:    lirc-set-rec-carrier-range
Documentation/media/uapi/rc/lirc-func.rst:    lirc-set-send-carrier
Documentation/media/uapi/rc/lirc-func.rst:    lirc-set-transmitter-mask
Documentation/media/uapi/rc/lirc-func.rst:    lirc-set-rec-timeout-reports
Documentation/media/uapi/rc/lirc-func.rst:    lirc-set-measure-carrier-mode
Documentation/media/uapi/rc/lirc-func.rst:    lirc-set-wideband-receiver
Documentation/media/uapi/v4l/extended-controls.rst:.. _v4l2-auto-n-preset-white-balance:
Documentation/media/uapi/v4l/hist-v4l2.rst:4. All the different get- and set-format commands were swept into one
Documentation/media/v4l-drivers/si470x.rst:	v4l2-ctl -d /dev/radio0 --set-ctrl=volume=10,mute=0 --set-freq=95.21 --all
Documentation/media/v4l-drivers/si4713.rst:	# v4l2-ctl -d /dev/radio0 --set-ctrl=rds_ps_name="Dummy"
Documentation/media/v4l-drivers/vivid.rst:	$ sudo v4l2-ctl -d2 --set-fbuf fb=1
Documentation/media/v4l-drivers/vivid.rst:	$ v4l2-ctl -d1 --set-fbuf fb=1
Documentation/media/v4l-drivers/vivid.rst:	$ v4l2-ctl -d0 --set-fmt-video=pixelformat='AR15'
Documentation/media/v4l-drivers/vivid.rst:	$ v4l2-ctl -d1 --set-fmt-video-out=pixelformat='AR15'
Documentation/media/v4l-drivers/vivid.rst:	$ v4l2-ctl -d2 --set-fmt-video=pixelformat='AR15'
Documentation/networking/scaling.txt:commands (--show-rxfh-indir and --set-rxfh-indir). Modifying the
Documentation/networking/tproxy.txt:# iptables -t mangle -A DIVERT -j MARK --set-mark 1
Documentation/powerpc/eeh-pci-error-recovery.txt:                kset->uevent_ops->uevent()   // which is really just
Documentation/process/coding-style.rst:                  (c-set-style "linux-tabs-only")))))
Documentation/process/maintainer-pgp-guide.rst:    $ gpg --quick-set-expire [fpr] 1y
Documentation/process/maintainer-pgp-guide.rst:    $ gpg --quick-set-expire [fpr] 2020-07-01
Documentation/s390/Debugging390.txt:This is a pointer to the global-offset-table in ELF
Documentation/scsi/ChangeLog.ncr53c8xx:	- Remove nvram layouts and driver set-up structures from the C source,
Documentation/scsi/ChangeLog.ncr53c8xx:	- Print out the whole driver set-up. Some options were missing and 
Documentation/scsi/ChangeLog.sym53c8xx:	- Move some data structures (nvram layouts and driver set-up) to 
Documentation/scsi/ChangeLog.sym53c8xx:	- Add 'recovery' option to driver set-up.
Documentation/scsi/bnx2fc.txt:lldptool set-lldp -i <interface_name> adminStatus=disabled
Documentation/security/keys/core.rst:     execve, even when the latter executes a set-UID or set-GID binary. A
Documentation/sound/designs/procfile.rst:- set-up of PCM, shown in hw_parms, sw_params, and status in the PCM
Documentation/sound/hd-audio/models.rst:headset-mic
Documentation/sound/hd-audio/models.rst:headset-mode
Documentation/sound/hd-audio/models.rst:headset-mode-no-hp-mic
Documentation/sound/hd-audio/models.rst:dell-headset-multi
Documentation/sound/hd-audio/models.rst:dell-headset-dock
Documentation/sound/hd-audio/models.rst:aspire-headset-mic
Documentation/sound/hd-audio/models.rst:alc662-headset-multi
Documentation/sound/hd-audio/models.rst:dell-headset-multi
Documentation/sound/hd-audio/models.rst:alc891-headset-multi
Documentation/sound/hd-audio/models.rst:headset-jack
Documentation/sound/kernel-api/writing-an-alsa-driver.rst:<#set-the-pci-driver-data-and-return-zero>`__).
Documentation/sound/kernel-api/writing-an-alsa-driver.rst:If these two callbacks are defined, copy and set-silence operations
Documentation/sound/kernel-api/writing-an-alsa-driver.rst:silent-data is 0), and the implementation using a memset-like function
Documentation/svga.txt:case your chipset has been detected, some chipset-specific modes are shown as
Documentation/translations/zh_CN/coding-style.rst:                  (c-set-style "linux-tabs-only")))))
Documentation/usb/gadget_multi.txt:This is also true for two configuration set-up with RNDIS
Documentation/usb/wusb-cbaf: set-chid DEVICE HOST-CHID HOST-BANDGROUP HOST-NAME
Documentation/usb/wusb-cbaf:   'set-chid'. We might not know about it.
Documentation/usb/wusb-cbaf: set-cc DEVICE
Documentation/usb/wusb-cbaf:  $ $progname set-chid '' '' '' "My host name"
Documentation/usb/wusb-cbaf:  $ $progname set-chid '' '' '' "My host name"
Documentation/usb/wusb-cbaf:  $ $progname set-cc ''
Documentation/usb/wusb-cbaf:    set-chid)
Documentation/usb/wusb-cbaf:    set-cc)
MAINTAINERS:F:	drivers/reset/reset-a10sr.c
MAINTAINERS:F:	drivers/reset/reset-uniphier.c
MAINTAINERS:F:	include/linux/reset-controller.h
MAINTAINERS:F:	drivers/reset/reset-axs10x.c
MAINTAINERS:F:	drivers/reset/reset-hsdk.c
MAINTAINERS:F:	drivers/reset/reset-ti-sci.c
Makefile:KBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)
arch/alpha/include/uapi/asm/auxvec.h:      bit 0-3:	  Cache set-associativity; 0 means fully associative.
arch/alpha/kernel/signal.c:	err |= setup_sigcontext(&frame->sc, regs, set->sig[0], oldsp);
arch/alpha/kernel/signal.c:	err |= __put_user(set->sig[0], &frame->uc.uc_osf_sigmask);
arch/alpha/kernel/signal.c:				set->sig[0], oldsp);
arch/arc/boot/dts/axs10x_mb.dtsi:		creg_rst: reset-controller@11220 {
arch/arc/boot/dts/axs10x_mb.dtsi:			#reset-cells = <1>;
arch/arc/boot/dts/axs10x_mb.dtsi:			reset-names = "stmmaceth";
arch/arc/boot/dts/hsdk.dts:		cgu_rst: reset-controller@8a0 {
arch/arc/boot/dts/hsdk.dts:			#reset-cells = <1>;
arch/arc/boot/dts/hsdk.dts:			reset-names = "stmmaceth";
arch/arc/lib/Makefile:lib-$(CONFIG_ISA_ARCV2)		+= memcpy-archs.o memset-archs.o strcmp-archs.o
arch/arc/mm/tlb.c: * ARC700 MMU-v1 had a Joint-TLB for Code and Data and is 2 way set-assoc.
arch/arm/boot/dts/am335x-baltos.dtsi:	ti,no-reset-on-init;
arch/arm/boot/dts/am335x-baltos.dtsi:	ti,no-reset-on-init;
arch/arm/boot/dts/am335x-evmsk.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/am335x-icev2.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/am335x-icev2.dts:	reset-gpios = <&gpio2 5 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/am335x-icev2.dts:	reset-delay-us = <2>;   /* PHY datasheet states 1uS min */
arch/arm/boot/dts/am335x-moxa-uc-8100-me-t.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/am335x-pepper.dts:	reset-gpios = <&gpio1 16 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/am335x-sl50.dts:		reset-gpios = <&gpio1 20 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/am33xx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/am33xx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/am437x-gp-evm.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/am437x-sk-evm.dts:		reset-gpios = <&gpio1 28 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/am43xx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/am43xx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/am57xx-beagle-x15-common.dtsi:	ti,no-reset-on-init;
arch/arm/boot/dts/am57xx-cl-som-am57x.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/am57xx-cl-som-am57x.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/armada-370-dlink-dns327l.dts:		reset-button {
arch/arm/boot/dts/armada-370-dlink-dns327l.dts:	reset_button_pin: reset-button-pin {
arch/arm/boot/dts/armada-370-netgear-rn102.dts:		reset-button {
arch/arm/boot/dts/armada-370-netgear-rn102.dts:	reset_button_pin: reset-button-pin {
arch/arm/boot/dts/armada-370-netgear-rn104.dts:		reset-button {
arch/arm/boot/dts/armada-370-netgear-rn104.dts:	reset_button_pin: reset-button-pin {
arch/arm/boot/dts/armada-388-clearfog-base.dts:		 * register, rather than preserving reset-loaded setting.
arch/arm/boot/dts/armada-388-clearfog.dts:				reset-gpios = <&expander0 2 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/armada-388-clearfog.dtsi:				reset-gpios = <&expander0 1 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/armada-38x-solidrun-microsom.dtsi:		 * register, rather than preserving reset-loaded setting.
arch/arm/boot/dts/armada-xp-lenovo-ix4-300d.dts:		reset-button {
arch/arm/boot/dts/armada-xp-lenovo-ix4-300d.dts:	reset_button_pin: reset-button-pin {
arch/arm/boot/dts/armada-xp-netgear-rn2120.dts:		reset-button {
arch/arm/boot/dts/armada-xp-netgear-rn2120.dts:	reset_button_pin: reset-button-pin {
arch/arm/boot/dts/aspeed-bmc-opp-witherspoon.dts:	aspeed,reset-type = "none";
arch/arm/boot/dts/aspeed-g4.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/aspeed-g4.dtsi:					lpc_reset: reset-controller@18 {
arch/arm/boot/dts/aspeed-g4.dtsi:						#reset-cells = <1>;
arch/arm/boot/dts/aspeed-g5.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/aspeed-g5.dtsi:					lpc_reset: reset-controller@18 {
arch/arm/boot/dts/aspeed-g5.dtsi:						#reset-cells = <1>;
arch/arm/boot/dts/at91-vinco.dts:					reset-gpios = <&pioE 8 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/at91-vinco.dts:					reset-gpios = <&pioE 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/at91sam9260.dtsi:				atmel,reset-type = "all";
arch/arm/boot/dts/at91sam9263.dtsi:				atmel,reset-type = "all";
arch/arm/boot/dts/at91sam9g45.dtsi:				atmel,reset-type = "all";
arch/arm/boot/dts/at91sam9m10g45ek.dts:					pinctrl_sensor_reset: sensor_reset-0 {
arch/arm/boot/dts/at91sam9n12.dtsi:				atmel,reset-type = "all";
arch/arm/boot/dts/at91sam9x5.dtsi:				atmel,reset-type = "all";
arch/arm/boot/dts/at91sam9x5ek.dtsi:					pinctrl_sensor_reset: sensor_reset-0 {
arch/arm/boot/dts/atlas6.dtsi:			rstc: reset-controller@88010000 {
arch/arm/boot/dts/atlas6.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/atlas7.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/bcm23550.dtsi:		resetmgr: reset-controller@1001f00 {
arch/arm/boot/dts/bcm2835-rpi-zero-w.dts:		reset-gpios = <&gpio 41 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/bcm2837-rpi-3-b-plus.dts:		reset-gpios = <&expgpio 1 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/bcm2837-rpi-3-b.dts:		reset-gpios = <&expgpio 1 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/bcm63138.dtsi:		pmb0: reset-controller@4800c0 {
arch/arm/boot/dts/bcm63138.dtsi:			#reset-cells = <2>;
arch/arm/boot/dts/bcm63138.dtsi:		pmb1: reset-controller@4800e0 {
arch/arm/boot/dts/bcm63138.dtsi:			#reset-cells = <2>;
arch/arm/boot/dts/berlin2.dtsi:				#reset-cells = <2>;
arch/arm/boot/dts/berlin2cd.dtsi:				#reset-cells = <2>;
arch/arm/boot/dts/berlin2q.dtsi:				#reset-cells = <2>;
arch/arm/boot/dts/da850-lego-ev3.dts:		reset-gpios = <&gpio 80 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/dove-cm-a510.dtsi:	reset-gpio = <&gpio2 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/dove-d3plug.dts:		reset-gpios = <&gpio0 26 1>;
arch/arm/boot/dts/dove-d3plug.dts:		reset-delay-us = <20000>;
arch/arm/boot/dts/dove-d3plug.dts:		reset-gpios = <&gpio0 25 1>;
arch/arm/boot/dts/dove-sbc-a510.dts:	reset-gpios = <&gpio_ext 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/dove.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/dra7-evm.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/dra7.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
arch/arm/boot/dts/dra7.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
arch/arm/boot/dts/dra7.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
arch/arm/boot/dts/dra7.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
arch/arm/boot/dts/exynos3250-rinato.dts:		reset-gpios = <&gpe0 1 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/exynos4210-trats.dts:		reset-gpios = <&gpy4 5 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/exynos4210-trats.dts:		reset-delay = <100>;
arch/arm/boot/dts/exynos4210-universal_c210.dts:			reset-gpios = <&gpy4 5 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/exynos4210-universal_c210.dts:			reset-delay = <10>;
arch/arm/boot/dts/exynos4412-galaxy-s3.dtsi:		reset-gpios = <&gpf2 1 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/exynos4412-galaxy-s3.dtsi:		reset-delay = <100>;
arch/arm/boot/dts/exynos4412-itop-scp-core.dtsi:		reset-gpios = <&gpm2 4 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/exynos4412-midas.dtsi:			reset-gpios = <&gpf3 4 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/exynos4412-midas.dtsi:		reset-gpios = <&gpj0 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/exynos4412-odroid-common.dtsi:		reset-gpios = <&gpk1 2 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/exynos4412-odroid-common.dtsi:		reset-gpios = <&gpx3 5 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/exynos5250-arndale.dts:		reset-gpios = <&gpx3 5 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/exynos5250-snow-common.dtsi:		reset-gpios = <&gpx0 2 GPIO_ACTIVE_LOW>, /* WIFI_RSTn */
arch/arm/boot/dts/exynos5250-snow-common.dtsi:		reset-gpios = <&gpx1 5 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/exynos5250-spring.dts:		reset-gpios = <&gpe1 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/exynos5410-odroidxu.dts:		reset-gpios = <&gpd1 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/exynos5410-odroidxu.dts:		reset-gpios = <&gpx1 4 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/exynos5420-peach-pit.dts:		reset-gpios = <&gpx0 0 GPIO_ACTIVE_LOW>; /* WIFI_EN */
arch/arm/boot/dts/exynos5420-peach-pit.dts:		reset-gpios = <&gpy7 7 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/exynos5422-odroidxu3-common.dtsi:		reset-gpios = <&gpd1 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/exynos5800-peach-pi.dts:		reset-gpios = <&gpx0 0 GPIO_ACTIVE_LOW>; /* WIFI_EN */
arch/arm/boot/dts/gemini.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/gemini.dtsi:			reset-names = "sata0", "sata1";
arch/arm/boot/dts/hi3519.dtsi:	crg: clock-reset-controller@12010000 {
arch/arm/boot/dts/hi3519.dtsi:		#reset-cells = <2>;
arch/arm/boot/dts/imx25-karo-tx25.dts:	phy-reset-gpios = <&gpio3 7 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx25-pdk.dts:	phy-reset-gpios = <&gpio4 8 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx27-phytec-phycore-som.dtsi:	phy-reset-gpios = <&gpio3 30 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-apf28.dts:			phy-reset-gpios = <&gpio4 13 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-apf28dev.dts:			phy-reset-gpios = <&gpio1 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-cfa10036.dts:					reset-gpios = <&gpio2 7 0>;
arch/arm/boot/dts/imx28-cfa10037.dts:			phy-reset-gpios = <&gpio2 21 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-cfa10037.dts:			phy-reset-duration = <100>;
arch/arm/boot/dts/imx28-cfa10049.dts:			phy-reset-gpios = <&gpio2 21 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-cfa10049.dts:			phy-reset-duration = <100>;
arch/arm/boot/dts/imx28-cfa10057.dts:			phy-reset-gpios = <&gpio2 21 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-cfa10057.dts:			phy-reset-duration = <100>;
arch/arm/boot/dts/imx28-cfa10058.dts:			phy-reset-gpios = <&gpio2 21 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-cfa10058.dts:			phy-reset-duration = <100>;
arch/arm/boot/dts/imx28-duckbill-2-485.dts:			phy-reset-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-duckbill-2-485.dts:			phy-reset-duration = <25>;
arch/arm/boot/dts/imx28-duckbill-2-enocean.dts:			phy-reset-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-duckbill-2-enocean.dts:			phy-reset-duration = <25>;
arch/arm/boot/dts/imx28-duckbill-2-spi.dts:			phy-reset-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-duckbill-2-spi.dts:			phy-reset-duration = <25>;
arch/arm/boot/dts/imx28-duckbill-2.dts:			phy-reset-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-duckbill-2.dts:			phy-reset-duration = <25>;
arch/arm/boot/dts/imx28-duckbill.dts:			phy-reset-gpios = <&gpio2 7 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-duckbill.dts:			phy-reset-duration = <25>;
arch/arm/boot/dts/imx28-eukrea-mbmx283lc.dts:	phy-reset-gpios = <&gpio4 13 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-eukrea-mbmx287lc.dts:	phy-reset-gpios = <&gpio3 27 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-evk.dts:			phy-reset-gpios = <&gpio4 13 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-evk.dts:			phy-reset-duration = <100>;
arch/arm/boot/dts/imx28-m28cu3.dts:			phy-reset-gpios = <&gpio4 13 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx28-m28cu3.dts:			phy-reset-duration = <100>;
arch/arm/boot/dts/imx28-tx28.dts:		reset-gpios = <&gpio2 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx50-evk.dts:	phy-reset-gpios = <&gpio4 12 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx50.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/imx51-apf51.dts:	phy-reset-gpios = <&gpio3 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx51-apf51.dts:	phy-reset-duration = <1>;
arch/arm/boot/dts/imx51-babbage.dts:			reset-gpios = <&gpio2 5 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx51-babbage.dts:	phy-reset-gpios = <&gpio2 14 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx51-babbage.dts:	phy-reset-duration = <1>;
arch/arm/boot/dts/imx51-eukrea-mbimxsd51-baseboard.dts:	reset-gpios = <&gpio2 28 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx51-ts4800.dts:	phy-reset-gpios = <&gpio2 14 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx51-ts4800.dts:	phy-reset-duration = <1>;
arch/arm/boot/dts/imx51-zii-rdu1.dts:		reset-gpios = <&gpio4 8 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx51-zii-rdu1.dts:		reset-gpios = <&gpio4 7 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx51-zii-rdu1.dts:	phy-reset-gpios = <&gpio2 14 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx51.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/imx53-cx9020.dts:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-mba53.dts:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-ppd.dts:		reset-gpios = <&gpio4 4 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-ppd.dts:		reset-gpios = <&gpio2 19 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-ppd.dts:	phy-reset-gpios = <&gpio2 16 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-ppd.dts:		reset-gpios = <&gpio2 18 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-ppd.dts:		reset-gpio = <&gpio5 19 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/imx53-qsb-common.dtsi:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-smd.dts:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-tx53-x03x.dts:		reset-gpios = <&gpio2 22 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-tx53.dtsi:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53-voipac-dmm-668.dtsi:	phy-reset-gpios = <&gpio4 2 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx53.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/imx6dl-riotboard.dts:	phy-reset-gpios = <&gpio3 31 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-apalis-eval.dts:	reset-gpio = <&gpio1 28 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/imx6q-apalis-eval.dts:	reset-gpio-active-high;
arch/arm/boot/dts/imx6q-apalis-ixora-v1.1.dts:	reset-gpio = <&gpio1 28 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/imx6q-apalis-ixora-v1.1.dts:	reset-gpio-active-high;
arch/arm/boot/dts/imx6q-apalis-ixora.dts:	reset-gpio = <&gpio1 28 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/imx6q-apalis-ixora.dts:	reset-gpio-active-high;
arch/arm/boot/dts/imx6q-ba16.dtsi:	reset-gpio = <&gpio7 12 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-ba16.dtsi:	reset-gpios = <&gpio7 11 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/imx6q-ba16.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6q-cm-fx6.dts:		reset-gpios = <&gpio6 16 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/imx6q-cm-fx6.dts:	reset-gpio = <&gpio1 26 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-dhcom-pdk2.dts:	reset-gpio = <&gpio6 14 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-dhcom-som.dtsi:			reset-gpios = <&gpio5 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-dhcom-som.dtsi:			reset-delay-us = <1000>;
arch/arm/boot/dts/imx6q-dhcom-som.dtsi:			reset-post-delay-us = <1000>;
arch/arm/boot/dts/imx6q-dmo-edmqmx6.dts:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-dmo-edmqmx6.dts:	reset-gpio = <&gpio4 8 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-evi.dts:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-gw5400-a.dts:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-gw5400-a.dts:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-h100.dts:		reset-gpios = <&gpio6 15 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-kp.dtsi:		reset-gpios = <&gpio5 2 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/imx6q-marsboard.dts:	phy-reset-gpios = <&gpio3 31 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-mccmon6.dts:	phy-reset-gpios = <&gpio1 27 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-novena.dts:	phy-reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-novena.dts:	reset-gpio = <&gpio3 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-tbs2910.dts:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-tbs2910.dts:	reset-gpio = <&gpio7 12 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6q-var-dt6customboard.dts:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-apalis.dtsi:	phy-reset-duration = <10>;
arch/arm/boot/dts/imx6qdl-apalis.dtsi:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-apf6.dtsi:	phy-reset-duration = <10>;
arch/arm/boot/dts/imx6qdl-apf6.dtsi:	phy-reset-gpios = <&gpio1 24 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-apf6dev.dtsi:	reset-gpio = <&gpio6 2 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-aristainetos.dtsi:	phy-reset-gpios = <&gpio3 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-aristainetos2.dtsi:	phy-reset-gpios = <&gpio7 18 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-aristainetos2.dtsi:	reset-gpio = <&gpio2 16 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw51xx.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw51xx.dtsi:	reset-gpio = <&gpio1 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw51xx.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-gw52xx.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw52xx.dtsi:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw52xx.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-gw53xx.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw53xx.dtsi:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw53xx.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-gw54xx.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw54xx.dtsi:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw54xx.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-gw551x.dtsi:	reset-gpio = <&gpio1 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw551x.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-gw552x.dtsi:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw552x.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-gw553x.dtsi:	reset-gpio = <&gpio1 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw553x.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-gw560x.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw560x.dtsi:	reset-gpio = <&gpio4 31 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw560x.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-gw5903.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-gw5904.dtsi:	reset-gpio = <&gpio1 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-gw5904.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-hummingboard.dtsi:	reset-gpio = <&gpio3 4 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-hummingboard2.dtsi:	reset-gpio = <&gpio2 11 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-icore-rqs.dtsi:		reset-gpios = <&gpio1 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-icore-rqs.dtsi:	reset-gpio = <&gpio3 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-icore.dtsi:	phy-reset-gpios = <&gpio7 12 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-nit6xlite.dtsi:	phy-reset-gpios = <&gpio1 27 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-nitrogen6_max.dtsi:	phy-reset-gpios = <&gpio1 27 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-nitrogen6_max.dtsi:	reset-gpio = <&gpio6 31 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-nitrogen6_som2.dtsi:	reset-gpio = <&gpio3 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-nitrogen6x.dtsi:	phy-reset-gpios = <&gpio1 27 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-phytec-mira.dtsi:	reset-gpio = <&gpio2 25 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-phytec-pfla02.dtsi:	phy-reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-phytec-pfla02.dtsi:	reset-gpio = <&gpio4 17 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-phytec-phycore-som.dtsi:	phy-reset-gpios = <&gpio1 14 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-rex.dtsi:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sabreauto.dtsi:				reset-gpios = <&gpio1 15 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sabrelite.dtsi:	phy-reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sabrelite.dtsi:		reset-gpios = <&gpio2 5 GPIO_ACTIVE_LOW>; /* NANDF_D5 */
arch/arm/boot/dts/imx6qdl-sabrelite.dtsi:		reset-gpios = <&gpio1 8 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sabresd.dtsi:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sabresd.dtsi:		reset-gpios = <&gpio1 17 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sabresd.dtsi:		reset-gpios = <&gpio1 20 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sabresd.dtsi:	reset-gpio = <&gpio7 12 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sabresd.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6qdl-savageboard.dtsi:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sr-som-brcm.dtsi:		reset-gpios = <&gpio5 26 GPIO_ACTIVE_LOW>,
arch/arm/boot/dts/imx6qdl-sr-som-ti.dtsi:		reset-gpios = <&gpio5 26 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-sr-som.dtsi:	phy-reset-duration = <2>;
arch/arm/boot/dts/imx6qdl-sr-som.dtsi:	phy-reset-gpios = <&gpio4 15 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-tx6.dtsi:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-tx6.dtsi:	phy-reset-post-delay = <10>;
arch/arm/boot/dts/imx6qdl-tx6.dtsi:		reset-gpios = <&gpio2 22 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-var-dart.dtsi:	reset-gpio = <&gpio4 11 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-wandboard.dtsi:	phy-reset-gpios = <&gpio3 29 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-zii-rdu2.dtsi:	reset-gpio = <&gpio7 12 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-zii-rdu2.dtsi:	phy-reset-gpios = <&gpio1 23 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6qdl-zii-rdu2.dtsi:	phy-reset-duration = <100>;
arch/arm/boot/dts/imx6qdl.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/imx6sl-warp.dts:		reset-gpios = <&gpio4 5 GPIO_ACTIVE_LOW>, 	/* WL_REG_ON */
arch/arm/boot/dts/imx6sl.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/imx6sx-nitrogen6sx.dts:	reset-gpio = <&gpio4 10 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6sx-nitrogen6sx.dts:	reset-gpios = <&gpio4 26 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6sx-sabreauto.dts:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6sx-sdb.dtsi:	reset-gpio = <&gpio2 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6sx-sdb.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6sx-softing-vining-2000.dts:	phy-reset-gpios = <&gpio5 9 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6sx-softing-vining-2000.dts:	phy-reset-duration = <5>;
arch/arm/boot/dts/imx6sx-softing-vining-2000.dts:	phy-reset-gpios = <&gpio5 21 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6sx-softing-vining-2000.dts:	phy-reset-duration = <5>;
arch/arm/boot/dts/imx6sx-softing-vining-2000.dts:		reset-gpios = <&gpio2 10 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/imx6sx-udoo-neo.dtsi:	phy-reset-duration = <10>;
arch/arm/boot/dts/imx6sx-udoo-neo.dtsi:	phy-reset-gpios = <&gpio2 1 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6sx.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/imx6ul-14x14-evk.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6ul-opos6ul.dtsi:		reset-gpios = <&gpio2 9 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6ul-opos6ul.dtsi:	phy-reset-duration = <1>;
arch/arm/boot/dts/imx6ul-opos6ul.dtsi:	phy-reset-gpios = <&gpio4 2 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6ul-pico-hobbit.dts:	phy-reset-gpios = <&gpio1 28 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6ul-pico-hobbit.dts:	phy-reset-duration = <1>;
arch/arm/boot/dts/imx6ul-pico-hobbit.dts:	fsl,ext-reset-output;
arch/arm/boot/dts/imx6ul-tx6ul-mainboard.dts:	phy-reset-gpios = <&gpio4 28 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6ul-tx6ul.dtsi:	phy-reset-gpios = <&gpio5 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6ul-tx6ul.dtsi:	phy-reset-gpios = <&gpio4 28 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6ul-tx6ul.dtsi:		reset-gpios = <&gpio5 3 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx6ul.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/imx6ull-colibri-wifi.dtsi:		reset-gpios = <&gpio5 11 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx7d-pico.dtsi:	fsl,ext-reset-output;
arch/arm/boot/dts/imx7d-sdb.dts:	phy-reset-gpios = <&extended_io 5 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx7d-sdb.dts:	reset-gpio = <&extended_io 1 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/imx7d-sdb.dts:	fsl,ext-reset-output;
arch/arm/boot/dts/imx7d.dtsi:		reset-names = "pciephy", "apps";
arch/arm/boot/dts/imx7s-warp.dts:	fsl,ext-reset-output;
arch/arm/boot/dts/imx7s.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/keystone-k2e.dtsi:			pscrst: reset-controller {
arch/arm/boot/dts/keystone-k2e.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/keystone-k2e.dtsi:				ti,reset-bits = <
arch/arm/boot/dts/keystone-k2g.dtsi:			k2g_reset: reset-controller {
arch/arm/boot/dts/keystone-k2g.dtsi:				#reset-cells = <2>;
arch/arm/boot/dts/keystone-k2hk.dtsi:			pscrst: reset-controller {
arch/arm/boot/dts/keystone-k2hk.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/keystone-k2hk.dtsi:				ti,reset-bits = <
arch/arm/boot/dts/keystone-k2l.dtsi:			pscrst: reset-controller {
arch/arm/boot/dts/keystone-k2l.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/keystone-k2l.dtsi:				ti,reset-bits = <
arch/arm/boot/dts/keystone.dtsi:			rstctrl: reset-controller@328 {
arch/arm/boot/dts/kirkwood-netgear_readynas_duo_v2.dts:		reset-button {
arch/arm/boot/dts/kirkwood-netgear_readynas_nv+_v2.dts:		reset-button {
arch/arm/boot/dts/kirkwood-ts219-6281.dts:			pmx_reset_button: pmx-reset-button {
arch/arm/boot/dts/kirkwood-ts219-6282.dts:			pmx_reset_button: pmx-reset-button {
arch/arm/boot/dts/kirkwood-ts419.dtsi:			pmx_reset_button: pmx-reset-button {
arch/arm/boot/dts/logicpd-som-lv.dtsi:		reset-gpios = <&gpio1 4 GPIO_ACTIVE_LOW>; /* gpio_4 */
arch/arm/boot/dts/lpc18xx.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/lpc18xx.dtsi:		rgu: reset-controller@40053000 {
arch/arm/boot/dts/lpc18xx.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/lpc3250-ea3250.dts:		reset-gpio = <&gpio 3 2 0>;
arch/arm/boot/dts/lpc3250-phy3250.dts:		reset-gpio = <&gpio 3 2 0>;
arch/arm/boot/dts/meson8.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/meson8.dtsi:	reset: reset-controller@4404 {
arch/arm/boot/dts/meson8.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/meson8b-odroidc1.dts:	snps,reset-gpio = <&gpio GPIOH_4 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/meson8b-odroidc1.dts:	snps,reset-active-low;
arch/arm/boot/dts/meson8b-odroidc1.dts:	snps,reset-delays-us = <0 10000 30000>;
arch/arm/boot/dts/meson8b.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/meson8b.dtsi:	reset: reset-controller@4404 {
arch/arm/boot/dts/meson8b.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/meson8b.dtsi:	reset-names = "stmmaceth";
arch/arm/boot/dts/meson8m2-mxiii-plus.dts:	snps,reset-gpio = <&gpio GPIOH_4 0>;
arch/arm/boot/dts/meson8m2-mxiii-plus.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/meson8m2-mxiii-plus.dts:	snps,reset-active-low;
arch/arm/boot/dts/meson8m2.dtsi:	reset-names = "stmmaceth";
arch/arm/boot/dts/mmp2.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/mt2701.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/mt2701.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/mt2701.dtsi:		reset-names = "therm";
arch/arm/boot/dts/mt2701.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/mt2701.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/mt2701.dtsi:		reset-names = "fe", "gmac", "ppe";
arch/arm/boot/dts/mt7623.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/mt7623.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/mt7623.dtsi:		reset-names = "pwrap";
arch/arm/boot/dts/mt7623.dtsi:		reset-names = "therm";
arch/arm/boot/dts/mt7623.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/mt7623.dtsi:		reset-names = "pcie-rst0", "pcie-rst1", "pcie-rst2";
arch/arm/boot/dts/mt7623.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/mt7623.dtsi:		reset-names = "fe", "gmac", "ppe";
arch/arm/boot/dts/mt7623a-rfb-emmc.dts:			reset-names = "mcm";
arch/arm/boot/dts/mt7623a-rfb-nand.dts:			reset-names = "mcm";
arch/arm/boot/dts/mt7623n-bananapi-bpi-r2.dts:			reset-gpios = <&pio 33 0>;
arch/arm/boot/dts/mt7623n-rfb-emmc.dts:			reset-gpios = <&pio 33 0>;
arch/arm/boot/dts/mt8135.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/mt8135.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/mt8135.dtsi:			reset-names = "pwrap", "pwrap-bridge";
arch/arm/boot/dts/omap3-beagle-xm.dts:		reset-gpios = <&gpio5 19 GPIO_ACTIVE_LOW>; /* gpio_147 */
arch/arm/boot/dts/omap3-beagle.dts:		reset-gpios = <&gpio5 19 GPIO_ACTIVE_LOW>;	/* gpio_147 */
arch/arm/boot/dts/omap3-cm-t3517.dts:	reset-gpios = <&gpio5 18 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/omap3-cm-t3517.dts:	reset-gpios = <&gpio5 19 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/omap3-cm-t3x30.dtsi:	reset-gpios = <&twl_gpio 6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/omap3-cm-t3x30.dtsi:	reset-gpios = <&twl_gpio 7 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/omap3-evm-common.dtsi:		reset-gpios = <&gpio1 21 GPIO_ACTIVE_LOW>; /* gpio_21 */
arch/arm/boot/dts/omap3-evm-common.dtsi:	reset-gpios = <&gpio5 27 GPIO_ACTIVE_HIGH>;	/* gpio155, lcd RESB */
arch/arm/boot/dts/omap3-gta04.dtsi:		reset-gpios = <&gpio6 14 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/omap3-gta04.dtsi:		reset-gpios = <&tca6507 0 GPIO_ACTIVE_LOW>;	/* W2CBW003 reset through tca6507 */
arch/arm/boot/dts/omap3-igep0020-common.dtsi:		reset-gpios = <&gpio1 24 GPIO_ACTIVE_LOW>; /* gpio_24 */
arch/arm/boot/dts/omap3-igep0020.dts:		reset-gpios = <&gpio5 11 GPIO_ACTIVE_LOW>,	/* gpio_139 - RESET_N_W */
arch/arm/boot/dts/omap3-igep0030-common.dtsi:		reset-gpios = <&gpio2 22 GPIO_ACTIVE_LOW>;		/* gpio_54 */
arch/arm/boot/dts/omap3-igep0030.dts:		reset-gpios = <&gpio5 11 GPIO_ACTIVE_LOW>,	/* gpio_139 - RESET_N_W */
arch/arm/boot/dts/omap3-ldp.dts:	reset-gpios = <&gpio2 23 GPIO_ACTIVE_HIGH>;	/* gpio55, lcd RESB */
arch/arm/boot/dts/omap3-n900.dts:		reset-gpios = <&gpio2 28 GPIO_ACTIVE_LOW>; /* 60 */
arch/arm/boot/dts/omap3-n900.dts:		reset-gpios = <&gpio2 28 GPIO_ACTIVE_LOW>; /* 60 */
arch/arm/boot/dts/omap3-n900.dts:                reset-gpios = <&gpio6 3 GPIO_ACTIVE_HIGH>; /* 163 */
arch/arm/boot/dts/omap3-n900.dts:		reset-gpio = <&gpio4 6 GPIO_ACTIVE_HIGH>; /* 102 */
arch/arm/boot/dts/omap3-n900.dts:		reset-gpios = <&gpio6 4 GPIO_ACTIVE_HIGH>;	/* gpio164 */
arch/arm/boot/dts/omap3-n900.dts:		reset-gpios = <&gpio4 8 GPIO_ACTIVE_HIGH>; /* 104 */
arch/arm/boot/dts/omap3-n900.dts:		reset-gpios = <&gpio3 26 GPIO_ACTIVE_HIGH>; /* 90 */
arch/arm/boot/dts/omap3-n900.dts:		reset-gpios = <&gpio3 27 GPIO_ACTIVE_LOW>; /* 91 */
arch/arm/boot/dts/omap3-n950-n9.dtsi:		reset-gpios = <&gpio1 26 GPIO_ACTIVE_LOW>; /* 26 */
arch/arm/boot/dts/omap3-n950.dts:		reset-gpios = <&gpio3 23 GPIO_ACTIVE_HIGH>;	/* 87 */
arch/arm/boot/dts/omap3-overo-base.dtsi:		reset-gpios = <&gpio6 23 GPIO_ACTIVE_LOW>;	/* gpio_183 */
arch/arm/boot/dts/omap3-pandora-common.dtsi:		reset-gpios = <&gpio1 16 GPIO_ACTIVE_LOW>; /* GPIO_16 */
arch/arm/boot/dts/omap3-pandora-common.dtsi:		reset-gpios = <&gpio5 29 GPIO_ACTIVE_LOW>;	/* GPIO_157 */
arch/arm/boot/dts/omap3-sniper.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/omap3-sniper.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/omap3-sniper.dts:	ti,no-reset-on-init;
arch/arm/boot/dts/omap3-tao3530.dtsi:		reset-gpios = <&gpio6 2 GPIO_ACTIVE_LOW>;	/* gpio_162 */
arch/arm/boot/dts/omap3430es1-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/omap34xx-omap36xx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/omap36xx-am35xx-omap3430es2plus-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/omap36xx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-rate-parent;
arch/arm/boot/dts/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
arch/arm/boot/dts/omap4-droid4-xt894.dts:		reset-gpios = <&gpio2 17 GPIO_ACTIVE_HIGH>;	/* gpio_49 */
arch/arm/boot/dts/omap4-droid4-xt894.dts:		reset-gpios = <&gpio4 5 GPIO_ACTIVE_HIGH>;	/* gpio101 */
arch/arm/boot/dts/omap4-droid4-xt894.dts:		reset-gpios = <&gpio6 13 GPIO_ACTIVE_HIGH>; /* gpio173 */
arch/arm/boot/dts/omap4-duovero.dtsi:		reset-gpios = <&gpio2 30 GPIO_ACTIVE_LOW>;	/* gpio_62 */
arch/arm/boot/dts/omap4-panda-common.dtsi:		reset-gpios = <&gpio2 30 GPIO_ACTIVE_LOW>;   /* gpio_62 */
arch/arm/boot/dts/omap4-panda-es.dts:	 ti,no-reset-on-init;
arch/arm/boot/dts/omap4-sdp.dts:		reset-gpios = <&gpio4 6 GPIO_ACTIVE_HIGH>;	/* 102 */
arch/arm/boot/dts/omap4-sdp.dts:		reset-gpios = <&gpio4 8 GPIO_ACTIVE_HIGH>;	/* 104 */
arch/arm/boot/dts/omap4-var-som-om44.dtsi:		reset-gpios = <&gpio6 17 GPIO_ACTIVE_LOW>; /* gpio 177 */
arch/arm/boot/dts/omap5-board-common.dtsi:		reset-gpios = <&gpio3 16 GPIO_ACTIVE_LOW>; /* gpio3_80 HUB_NRESET */
arch/arm/boot/dts/omap5-board-common.dtsi:		reset-gpios = <&gpio3 15 GPIO_ACTIVE_LOW>; /* gpio3_79 ETH_NRESET */
arch/arm/boot/dts/omap5-cm-t54.dts:		reset-gpios = <&gpio3 12 GPIO_ACTIVE_LOW>; /* gpio3_76 HUB_RESET */
arch/arm/boot/dts/omap5-cm-t54.dts:		reset-gpios = <&gpio3 19 GPIO_ACTIVE_LOW>; /* gpio3_83 ETH_RESET */
arch/arm/boot/dts/omap5.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
arch/arm/boot/dts/omap5.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
arch/arm/boot/dts/orion5x-netgear-wnr854t.dts:	pmx_reset_button: pmx-reset-button {
arch/arm/boot/dts/orion5x-rd88f5182-nas.dts:	pmx_reset_switch: pmx-reset-switch {
arch/arm/boot/dts/ox810se.dtsi:				reset: reset-controller {
arch/arm/boot/dts/ox810se.dtsi:					#reset-cells = <1>;
arch/arm/boot/dts/ox820.dtsi:				reset: reset-controller {
arch/arm/boot/dts/ox820.dtsi:					#reset-cells = <1>;
arch/arm/boot/dts/picoxcell-pc3x2.dtsi:					regoffset-dat = <0x50>;
arch/arm/boot/dts/picoxcell-pc3x2.dtsi:					regoffset-set = <0x00>;
arch/arm/boot/dts/picoxcell-pc3x2.dtsi:					regoffset-dirout = <0x04>;
arch/arm/boot/dts/picoxcell-pc3x2.dtsi:					regoffset-dat = <0x54>;
arch/arm/boot/dts/picoxcell-pc3x2.dtsi:					regoffset-set = <0x0c>;
arch/arm/boot/dts/picoxcell-pc3x2.dtsi:					regoffset-dirout = <0x10>;
arch/arm/boot/dts/picoxcell-pc3x3.dtsi:					regoffset-dat = <0x50>;
arch/arm/boot/dts/picoxcell-pc3x3.dtsi:					regoffset-set = <0x00>;
arch/arm/boot/dts/picoxcell-pc3x3.dtsi:					regoffset-dirout = <0x04>;
arch/arm/boot/dts/picoxcell-pc3x3.dtsi:					regoffset-dat = <0x54>;
arch/arm/boot/dts/picoxcell-pc3x3.dtsi:					regoffset-set = <0x0c>;
arch/arm/boot/dts/picoxcell-pc3x3.dtsi:					regoffset-dirout = <0x10>;
arch/arm/boot/dts/picoxcell-pc3x3.dtsi:					regoffset-dat = <0x5c>;
arch/arm/boot/dts/picoxcell-pc3x3.dtsi:					regoffset-set = <0x24>;
arch/arm/boot/dts/picoxcell-pc3x3.dtsi:					regoffset-dirout = <0x28>;
arch/arm/boot/dts/prima2.dtsi:			rstc: reset-controller@88010000 {
arch/arm/boot/dts/prima2.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/pxa168.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/pxa910.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-apq8060-dragonboard.dts:		aset-gpios = <&pm8058_gpio 35 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/qcom-apq8060-dragonboard.dts:		capella,aset-resistance-ohms = <100000>;
arch/arm/boot/dts/qcom-apq8060-dragonboard.dts:					reset-gpios = <&tlmm 86 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/qcom-apq8060-dragonboard.dts:				reset-gpios = <&tlmm 30 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/qcom-apq8064-asus-nexus7-flo.dts:				reset-gpios = <&tlmm_pinmux 54 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/qcom-apq8064-cm-qs600.dts:			reset-gpios = <&pm8921_gpio 43 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/qcom-apq8064-ifc6410.dts:			reset-gpios = <&pm8921_gpio 43 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/qcom-apq8064.dtsi:					allow-set-time;
arch/arm/boot/dts/qcom-apq8064.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-apq8064.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-apq8064.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-apq8064.dtsi:			reset-names = "core";
arch/arm/boot/dts/qcom-apq8064.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-apq8064.dtsi:					reset-names = "por";
arch/arm/boot/dts/qcom-apq8064.dtsi:			reset-names = "core";
arch/arm/boot/dts/qcom-apq8064.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-apq8064.dtsi:					reset-names = "por";
arch/arm/boot/dts/qcom-apq8064.dtsi:			reset-names = "core";
arch/arm/boot/dts/qcom-apq8064.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-apq8064.dtsi:					reset-names = "por";
arch/arm/boot/dts/qcom-apq8064.dtsi:			reset-names = "axi", "ahb", "por", "pci", "phy";
arch/arm/boot/dts/qcom-apq8074-dragonboard.dts:						regulator-allow-set-load;
arch/arm/boot/dts/qcom-apq8084.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-ipq4019.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-ipq4019.dtsi:			reset-names = "axi_m",
arch/arm/boot/dts/qcom-ipq4019.dtsi:			reset-names = "wifi_cpu_init", "wifi_radio_srif",
arch/arm/boot/dts/qcom-ipq4019.dtsi:			reset-names = "wifi_cpu_init", "wifi_radio_srif",
arch/arm/boot/dts/qcom-ipq8064.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-ipq8064.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-mdm9615.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-mdm9615.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-mdm9615.dtsi:					allow-set-time;
arch/arm/boot/dts/qcom-msm8660.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-msm8660.dtsi:					allow-set-time;
arch/arm/boot/dts/qcom-msm8960-cdp.dts:					reset-gpios = <&msmgpio 89 0>;
arch/arm/boot/dts/qcom-msm8960.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-msm8960.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-msm8960.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-msm8960.dtsi:					allow-set-time;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-amami.dts:						regulator-allow-set-load;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-amami.dts:			qcom,rset-ohms = <2100>;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-amami.dts:			qcom,vset-millivolts = <3000>;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-castor.dts:						regulator-allow-set-load;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-castor.dts:						regulator-allow-set-load;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-castor.dts:			qcom,rset-ohms = <2100>;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-castor.dts:			qcom,vset-millivolts = <3000>;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-honami.dts:						regulator-allow-set-load;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-honami.dts:			qcom,rset-ohms = <2100>;
arch/arm/boot/dts/qcom-msm8974-sony-xperia-honami.dts:			qcom,vset-millivolts = <3000>;
arch/arm/boot/dts/qcom-msm8974.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-msm8974.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-msm8974.dtsi:			reset-names = "core";
arch/arm/boot/dts/qcom-msm8974.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/qcom-msm8974.dtsi:					reset-names = "phy", "por";
arch/arm/boot/dts/qcom-msm8974.dtsi:					reset-names = "phy", "por";
arch/arm/boot/dts/r7s72100-gr-peach.dts:		reset-gpios = <&port4 2 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/r7s72100-gr-peach.dts:		reset-delay-us = <5>;
arch/arm/boot/dts/r8a7743.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/r8a7743.dtsi:		rst: reset-controller@e6160000 {
arch/arm/boot/dts/r8a7743.dtsi:			reset-names = "ssi-all",
arch/arm/boot/dts/r8a7745.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/r8a7745.dtsi:		rst: reset-controller@e6160000 {
arch/arm/boot/dts/r8a7745.dtsi:			reset-names = "ssi-all",
arch/arm/boot/dts/r8a77470.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/r8a77470.dtsi:		rst: reset-controller@e6160000 {
arch/arm/boot/dts/r8a7778.dtsi:	rst: reset-controller@ffcc0000 {
arch/arm/boot/dts/r8a7778.dtsi:		compatible = "renesas,r8a7778-reset-wdt";
arch/arm/boot/dts/r8a7779.dtsi:	rst: reset-controller@ffcc0000 {
arch/arm/boot/dts/r8a7779.dtsi:		compatible = "renesas,r8a7779-reset-wdt";
arch/arm/boot/dts/r8a7790.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/r8a7790.dtsi:		rst: reset-controller@e6160000 {
arch/arm/boot/dts/r8a7790.dtsi:			reset-names = "ssi-all",
arch/arm/boot/dts/r8a7791.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/r8a7791.dtsi:		rst: reset-controller@e6160000 {
arch/arm/boot/dts/r8a7791.dtsi:			reset-names = "ssi-all",
arch/arm/boot/dts/r8a7792.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/r8a7792.dtsi:		rst: reset-controller@e6160000 {
arch/arm/boot/dts/r8a7793.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/r8a7793.dtsi:		rst: reset-controller@e6160000 {
arch/arm/boot/dts/r8a7793.dtsi:			reset-names = "ssi-all",
arch/arm/boot/dts/r8a7794.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/r8a7794.dtsi:		rst: reset-controller@e6160000 {
arch/arm/boot/dts/r8a7794.dtsi:			reset-names = "ssi-all",
arch/arm/boot/dts/rk3036-evb.dts:	phy-reset-gpios = <&gpio2 RK_PC6 GPIO_ACTIVE_LOW>; /* PHY_RST */
arch/arm/boot/dts/rk3036-evb.dts:	phy-reset-duration = <10>; /* millisecond */
arch/arm/boot/dts/rk3036-kylin.dts:		reset-gpios = <&gpio0 RK_PD2 GPIO_ACTIVE_LOW>, /* WL_REG_ON */
arch/arm/boot/dts/rk3036-kylin.dts:	phy-reset-gpios = <&gpio2 RK_PC6 GPIO_ACTIVE_LOW>; /* PHY_RST */
arch/arm/boot/dts/rk3036-kylin.dts:	phy-reset-duration = <10>; /* millisecond */
arch/arm/boot/dts/rk3036.dtsi:		reset-names = "axi", "ahb", "dclk";
arch/arm/boot/dts/rk3036.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3036.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3036.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3036.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/rk3066a-rayeager.dts:		reset-gpios = <&gpio1 RK_PD6 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3066a.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/rk3066a.dtsi:		reset-names = "saradc-apb";
arch/arm/boot/dts/rk3188.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/rk3229-evb.dts:	snps,reset-gpio = <&gpio2 RK_PD0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3229-evb.dts:	snps,reset-active-low;
arch/arm/boot/dts/rk3229-evb.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk322x.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/rk322x.dtsi:		reset-names = "tsadc-apb";
arch/arm/boot/dts/rk322x.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk322x.dtsi:		reset-names = "stmmaceth";
arch/arm/boot/dts/rk3288-evb.dtsi:	snps,reset-gpio = <&gpio4 RK_PA7 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/rk3288-evb.dtsi:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-evb.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-fennec.dts:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-fennec.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-fennec.dts:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-firefly-reload-core.dtsi:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-firefly-reload-core.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-firefly-reload-core.dtsi:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-firefly-reload.dts:		reset-gpios = <&gpio4 RK_PD4 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-firefly.dtsi:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-firefly.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-firefly.dtsi:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-miqi.dts:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-miqi.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-miqi.dts:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-phycore-som.dtsi:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-phycore-som.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-phycore-som.dtsi:	snps,reset-gpio = <&gpio4 8 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/rk3288-popmetal.dts:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/rk3288-popmetal.dts:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-popmetal.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-r89.dts:	snps,reset-gpio = <&gpio4 RK_PA7 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/rk3288-r89.dts:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-r89.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-rock2-som.dtsi:		reset-gpios = <&gpio3 RK_PB1 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-rock2-som.dtsi:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-rock2-som.dtsi:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-rock2-som.dtsi:	snps,reset-delays-us = <0 10000 30000>;
arch/arm/boot/dts/rk3288-rock2-square.dts:		reset-gpios = <&gpio4 RK_PD4 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-tinker.dts:	snps,reset-gpio = <&gpio4 7 0>;
arch/arm/boot/dts/rk3288-tinker.dts:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-tinker.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-veyron-analog-audio.dtsi:		rockchip,headset-codec = <&headsetcodec>;
arch/arm/boot/dts/rk3288-veyron-minnie.dts:		reset-gpios = <&gpio2 RK_PB7 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-veyron.dtsi:		reset-gpios = <&gpio2 RK_PB1 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/rk3288-veyron.dtsi:		reset-gpios = <&gpio4 RK_PD4 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288-veyron.dtsi:	needs-reset-on-resume;
arch/arm/boot/dts/rk3288-veyron.dtsi:		ap_warm_reset_h: ap-warm-reset-h {
arch/arm/boot/dts/rk3288-vyasa.dts:	snps,reset-active-low;
arch/arm/boot/dts/rk3288-vyasa.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/rk3288-vyasa.dts:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "saradc-apb";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "tsadc-apb";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "stmmaceth";
arch/arm/boot/dts/rk3288.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "crypto-rst";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "core", "axi", "ahb";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "axi", "ahb", "dclk";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "axi", "ahb", "dclk";
arch/arm/boot/dts/rk3288.dtsi:		reset-names = "dp";
arch/arm/boot/dts/rk3xxx.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3xxx.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3xxx.dtsi:		reset-names = "reset";
arch/arm/boot/dts/rk3xxx.dtsi:		reset-names = "saradc-apb";
arch/arm/boot/dts/rv1108.dtsi:		reset-names = "tsadc-apb";
arch/arm/boot/dts/rv1108.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/s5pv210-goni.dts:		nreset-gpios = <&gpb 2 0>;
arch/arm/boot/dts/sama5d3.dtsi:				atmel,reset-type = "all";
arch/arm/boot/dts/sama5d3xmb.dtsi:					pinctrl_sensor_reset: sensor_reset-0 {
arch/arm/boot/dts/sama5d3xmb_cmp.dtsi:					pinctrl_sensor_reset: sensor_reset-0 {
arch/arm/boot/dts/socfpga.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/socfpga.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/socfpga.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/socfpga.dtsi:			reset-names = "dwc2";
arch/arm/boot/dts/socfpga.dtsi:			reset-names = "dwc2";
arch/arm/boot/dts/socfpga_arria10.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/socfpga_arria10.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/socfpga_arria10.dtsi:			reset-names = "fpgamgr";
arch/arm/boot/dts/socfpga_arria10.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/socfpga_arria10.dtsi:			reset-names = "dwc2";
arch/arm/boot/dts/socfpga_arria10.dtsi:			reset-names = "dwc2";
arch/arm/boot/dts/socfpga_arria10_socdk.dtsi:		a10sr_rst: reset-controller {
arch/arm/boot/dts/socfpga_arria10_socdk.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/socfpga_cyclone5_vining_fpga.dts:	snps,reset-gpio = <&porta 0 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/socfpga_cyclone5_vining_fpga.dts:	snps,reset-active-low;
arch/arm/boot/dts/socfpga_cyclone5_vining_fpga.dts:	snps,reset-delays-us = <10000 10000 10000>;
arch/arm/boot/dts/ste-hrefprev60-stuib.dts:				reset-gpio = <&tc3589x_gpio 13 0x4>;
arch/arm/boot/dts/ste-hrefprev60-stuib.dts:				reset-gpio = <&tc3589x_gpio 13 0x4>;
arch/arm/boot/dts/ste-hrefv60plus-stuib.dts:				reset-gpio = <&gpio4 17 0x4>;
arch/arm/boot/dts/ste-hrefv60plus-stuib.dts:				reset-gpio = <&gpio4 17 0x4>;
arch/arm/boot/dts/ste-nomadik-nhk15.dts:			reset-gpios = <&stmpe_gpio44 10 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/ste-nomadik-nhk15.dts:			reset-gpios = <&gpio2 13 GPIO_ACTIVE_LOW>; // GPIO77
arch/arm/boot/dts/ste-nomadik-nhk15.dts:			reset-gpios = <&gpio2 15 GPIO_ACTIVE_LOW>; // GPIO79
arch/arm/boot/dts/stih407-family.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/stih407-family.dtsi:		softreset: softreset-controller@0 {
arch/arm/boot/dts/stih407-family.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/stih407-family.dtsi:		picophyreset: picophyreset-controller@0 {
arch/arm/boot/dts/stih407-family.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/stih407-family.dtsi:			reset-names = "global", "port";
arch/arm/boot/dts/stih407-family.dtsi:				reset-names = "miphy-sw-rst";
arch/arm/boot/dts/stih407-family.dtsi:				reset-names = "miphy-sw-rst";
arch/arm/boot/dts/stih407-family.dtsi:				reset-names = "miphy-sw-rst";
arch/arm/boot/dts/stih407-family.dtsi:			reset-names = "pwr-dwn", "sw-rst", "pwr-rst";
arch/arm/boot/dts/stih407-family.dtsi:			reset-names = "pwr-dwn",
arch/arm/boot/dts/stih407-family.dtsi:			reset-names	= "powerdown", "softreset";
arch/arm/boot/dts/stih407-family.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/stih407-family.dtsi:			reset-names	= "sw_reset";
arch/arm/boot/dts/stih407-family.dtsi:			reset-names	= "sw_reset";
arch/arm/boot/dts/stih407.dtsi:				reset-names = "compo-main", "compo-aux";
arch/arm/boot/dts/stih407.dtsi:				reset-names = "tvout";
arch/arm/boot/dts/stih407.dtsi:				reset-names = "hdmi";
arch/arm/boot/dts/stih410-b2260.dts:			snps,reset-gpio = <&pio0 7 0>;
arch/arm/boot/dts/stih410-b2260.dts:			snps,reset-active-low;
arch/arm/boot/dts/stih410-b2260.dts:			snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/stih410.dtsi:			reset-names = "global", "port";
arch/arm/boot/dts/stih410.dtsi:			reset-names = "global", "port";
arch/arm/boot/dts/stih410.dtsi:			reset-names = "power", "softreset";
arch/arm/boot/dts/stih410.dtsi:			reset-names = "power", "softreset";
arch/arm/boot/dts/stih410.dtsi:			reset-names = "power", "softreset";
arch/arm/boot/dts/stih410.dtsi:			reset-names = "power", "softreset";
arch/arm/boot/dts/stih410.dtsi:				reset-names = "compo-main", "compo-aux";
arch/arm/boot/dts/stih410.dtsi:				reset-names = "tvout";
arch/arm/boot/dts/stih410.dtsi:				reset-names = "hdmi";
arch/arm/boot/dts/stih410.dtsi:				reset-names = "hqvdp";
arch/arm/boot/dts/stih418.dtsi:			reset-names = "global", "port";
arch/arm/boot/dts/stih418.dtsi:			reset-names = "global", "port";
arch/arm/boot/dts/stih418.dtsi:			reset-names = "power", "softreset";
arch/arm/boot/dts/stih418.dtsi:			reset-names = "power", "softreset";
arch/arm/boot/dts/stih418.dtsi:			reset-names = "power", "softreset";
arch/arm/boot/dts/stih418.dtsi:			reset-names = "power", "softreset";
arch/arm/boot/dts/stihxxx-b2120.dtsi:				reset-gpios	= <&pio15 4 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/stm32f429.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/stm32f469-disco.dts:		reset-gpios = <&gpioh 7 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/stm32f469.dtsi:			reset-names = "apb";
arch/arm/boot/dts/stm32f746.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/stm32h743.dtsi:		rcc: reset-clock-controller@58024400 {
arch/arm/boot/dts/stm32h743.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/stm32mp157c.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/stm32mp157c.dtsi:			reset-names = "apb";
arch/arm/boot/dts/sun4i-a10-dserve-dsrv9703c.dts:		reset-gpios = <&pio 1 13 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/sun4i-a10.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun4i-a10.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun4i-a10.dtsi:			reset-names = "usb0_reset", "usb1_reset", "usb2_reset";
arch/arm/boot/dts/sun4i-a10.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun5i-gr8-chip-pro.dts:		reset-gpios = <&pio 1 10 GPIO_ACTIVE_LOW>; /* PB10 */
arch/arm/boot/dts/sun5i-r8-chip.dts:		reset-gpios = <&pio 2 19 GPIO_ACTIVE_LOW>; /* PC19 */
arch/arm/boot/dts/sun5i.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun5i.dtsi:			reset-names = "usb0_reset", "usb1_reset";
arch/arm/boot/dts/sun5i.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun6i-a31-hummingbird.dts:		reset-gpios = <&pio 6 10 GPIO_ACTIVE_LOW>; /* PG10 */
arch/arm/boot/dts/sun6i-a31-hummingbird.dts:	snps,reset-gpio = <&pio 0 21 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/sun6i-a31-hummingbird.dts:	snps,reset-active-low;
arch/arm/boot/dts/sun6i-a31-hummingbird.dts:	snps,reset-delays-us = <0 10000 30000>;
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "usb0_reset",
arch/arm/boot/dts/sun6i-a31.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/sun6i-a31.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun6i-a31.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/sun6i-a31s-sinovoip-bpi-m2.dts:		reset-gpios = <&r_pio 0 8 GPIO_ACTIVE_LOW>; /* PL8 WIFI_EN */
arch/arm/boot/dts/sun6i-a31s-sinovoip-bpi-m2.dts:	snps,reset-gpio = <&pio 0 21 GPIO_ACTIVE_HIGH>; /* PA21 */
arch/arm/boot/dts/sun6i-a31s-sinovoip-bpi-m2.dts:	snps,reset-active-low;
arch/arm/boot/dts/sun6i-a31s-sinovoip-bpi-m2.dts:	snps,reset-delays-us = <0 10000 30000>;
arch/arm/boot/dts/sun7i-a20-bananapi-m1-plus.dts:		reset-gpios = <&pio 7 22 GPIO_ACTIVE_LOW>; /* PH22 WL-PMU-EN */
arch/arm/boot/dts/sun7i-a20-bananapro.dts:		reset-gpios = <&pio 7 22 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/sun7i-a20-cubietruck.dts:		reset-gpios = <&pio 7 9 GPIO_ACTIVE_LOW>; /* PH9 WIFI_EN */
arch/arm/boot/dts/sun7i-a20-hummingbird.dts:	snps,reset-gpio = <&pio 0 17 GPIO_ACTIVE_HIGH>; /* PA17 */
arch/arm/boot/dts/sun7i-a20-hummingbird.dts:	snps,reset-active-low;
arch/arm/boot/dts/sun7i-a20-hummingbird.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/sun7i-a20-olimex-som-evb-emmc.dts:		reset-gpios = <&pio 2 18 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/sun7i-a20-olimex-som204-evb-emmc.dts:		reset-gpios = <&pio 2 16 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/sun7i-a20-olimex-som204-evb.dts:		reset-gpios = <&pio 6 9 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/sun7i-a20-olimex-som204-evb.dts:	snps,reset-gpio = <&pio 0 17 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/sun7i-a20-olimex-som204-evb.dts:	snps,reset-active-low;
arch/arm/boot/dts/sun7i-a20-olimex-som204-evb.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm/boot/dts/sun7i-a20-olinuxino-lime2-emmc.dts:		reset-gpios = <&pio 2 16 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/sun7i-a20-olinuxino-micro-emmc.dts:		reset-gpios = <&pio 2 16 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/sun7i-a20-wexler-tab7200.dts:		reset-gpios = <&pio 1 13 GPIO_ACTIVE_HIGH>; /* RST (PB13) */
arch/arm/boot/dts/sun7i-a20-wits-pro-a20-dkt.dts:		reset-gpios = <&pio 7 9 GPIO_ACTIVE_LOW>; /* PH9 WIFI_EN */
arch/arm/boot/dts/sun7i-a20.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun7i-a20.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun7i-a20.dtsi:			reset-names = "usb0_reset", "usb1_reset", "usb2_reset";
arch/arm/boot/dts/sun7i-a20.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun8i-a23-a33.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-a23-a33.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-a23-a33.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-a23-a33.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-a23-a33.dtsi:			reset-names = "usb0_reset",
arch/arm/boot/dts/sun8i-a23-a33.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun8i-a23-a33.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/sun8i-a23-polaroid-mid2407pxe03.dts:		reset-gpios = <&r_pio 0 6 GPIO_ACTIVE_LOW>; /* PL6 */
arch/arm/boot/dts/sun8i-a23-polaroid-mid2809pxe04.dts:		reset-gpios = <&r_pio 0 6 GPIO_ACTIVE_LOW>; /* PL6 */
arch/arm/boot/dts/sun8i-a33.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun8i-a33.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-a33.dtsi:			reset-names = "be", "sat";
arch/arm/boot/dts/sun8i-a83t-bananapi-m3.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
arch/arm/boot/dts/sun8i-a83t-cubietruck-plus.dts:		reset-gpios = <&pio 4 16 GPIO_ACTIVE_HIGH>; /* PE16 */
arch/arm/boot/dts/sun8i-a83t-cubietruck-plus.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
arch/arm/boot/dts/sun8i-a83t-tbs-a711.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
arch/arm/boot/dts/sun8i-a83t.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun8i-a83t.dtsi:			reset-names = "lcd", "lvds";
arch/arm/boot/dts/sun8i-a83t.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun8i-a83t.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-a83t.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-a83t.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-a83t.dtsi:			reset-names = "usb0_reset",
arch/arm/boot/dts/sun8i-a83t.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun8i-a83t.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/sun8i-a83t.dtsi:			reset-names = "ctrl";
arch/arm/boot/dts/sun8i-a83t.dtsi:			reset-names = "phy";
arch/arm/boot/dts/sun8i-a83t.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun8i-h2-plus-bananapi-m2-zero.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
arch/arm/boot/dts/sun8i-h2-plus-orangepi-zero.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/sun8i-h3-bananapi-m2-plus.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
arch/arm/boot/dts/sun8i-h3-beelink-x2.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
arch/arm/boot/dts/sun8i-h3-nanopi-m1-plus.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
arch/arm/boot/dts/sun8i-h3-nanopi-neo-air.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
arch/arm/boot/dts/sun8i-h3-orangepi-2.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 WIFI_EN */
arch/arm/boot/dts/sun8i-q8-common.dtsi:		 * pinctrl, instead of listing them as active-low reset-gpios.
arch/arm/boot/dts/sun8i-r16-bananapi-m2m.dts:		reset-gpios = <&r_pio 0 6 GPIO_ACTIVE_LOW>; /* PL06 */
arch/arm/boot/dts/sun8i-r16-parrot.dts:		reset-gpios = <&r_pio 0 6 GPIO_ACTIVE_LOW>; /* PL06 */
arch/arm/boot/dts/sun8i-r40-bananapi-m2-ultra.dts:		reset-gpios = <&pio 6 10 GPIO_ACTIVE_LOW>; /* PG10 WIFI_EN */
arch/arm/boot/dts/sun8i-r40.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-r40.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-r40.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-r40.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-r40.dtsi:			reset-names = "usb0_reset",
arch/arm/boot/dts/sun8i-r40.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun8i-r40.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/sun8i-v3s.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun8i-v3s.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sun8i-v3s.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-v3s.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-v3s.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun8i-v3s.dtsi:			reset-names = "usb0_reset";
arch/arm/boot/dts/sun8i-v3s.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun8i-v40-bananapi-m2-berry.dts:		reset-gpios = <&pio 6 10 GPIO_ACTIVE_LOW>; /* PG10 WIFI_EN */
arch/arm/boot/dts/sun9i-a80-cubieboard4.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
arch/arm/boot/dts/sun9i-a80-optimus.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "phy";
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "hsic",
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "hsic",
arch/arm/boot/dts/sun9i-a80.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sun9i-a80.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun9i-a80.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "lcd", "edp";
arch/arm/boot/dts/sun9i-a80.dtsi:			reset-names = "lcd", "edp";
arch/arm/boot/dts/sun9i-a80.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sun9i-a80.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			reset-names = "lcd";
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			reset-names = "ahb";
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			reset-names = "usb0_reset",
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			reset-names = "stmmaceth";
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			reset-names = "ctrl";
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			reset-names = "phy";
arch/arm/boot/dts/sunxi-h3-h5.dtsi:			#reset-cells = <1>;
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "host1x";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "2d";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "3d";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "dc";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "dc";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "hdmi";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "dsi";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "dsi";
arch/arm/boot/dts/tegra114.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "dma";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "pwm";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "kbc";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "fuse";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "d_audio", "apbif", "i2s0", "i2s1", "i2s2",
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra114.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra114.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra124-nyan.dtsi:		reset-gpios = <&gpio TEGRA_GPIO(X, 7) GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "pex", "afi", "pcie_x";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "host1x";
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "dc";
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "dc";
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "hdmi";
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "sor";
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "dpaux";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "gpu";
arch/arm/boot/dts/tegra124.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "actmon";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "dma";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "pwm";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "fuse";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "sata", "sata-oob", "sata-cold";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "hda", "hda2hdmi", "hda2codec_2x";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "xusb_host", "xusb_ss", "xusb_src";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "padctl";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "soctherm";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "dvco";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "d_audio", "apbif", "i2s0", "i2s1", "i2s2",
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra124.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra124.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra20-colibri-512.dtsi:		nvidia,codec-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
arch/arm/boot/dts/tegra20-colibri-512.dtsi:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
arch/arm/boot/dts/tegra20-colibri-512.dtsi:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
arch/arm/boot/dts/tegra20-harmony.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
arch/arm/boot/dts/tegra20-harmony.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
arch/arm/boot/dts/tegra20-paz00.dts:		reset-names = "i2c";
arch/arm/boot/dts/tegra20-paz00.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
arch/arm/boot/dts/tegra20-paz00.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
arch/arm/boot/dts/tegra20-seaboard.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
arch/arm/boot/dts/tegra20-seaboard.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
arch/arm/boot/dts/tegra20-trimslice.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
arch/arm/boot/dts/tegra20-trimslice.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
arch/arm/boot/dts/tegra20-ventana.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
arch/arm/boot/dts/tegra20-ventana.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "host1x";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "mpe";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "vi";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "epp";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "isp";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "2d";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "3d";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "dc";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "dc";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "hdmi";
arch/arm/boot/dts/tegra20.dtsi:			reset-names = "dsi";
arch/arm/boot/dts/tegra20.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "dma";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "ac97";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "i2s";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "i2s";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "gmi";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "pwm";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "kbc";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "fuse";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "pex", "afi", "pcie_x";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra20.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "pex", "afi", "pcie_x";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "host1x";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "mpe";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "vi";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "epp";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "isp";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "2d";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "3d", "3d2";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "dc";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "dc";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "hdmi";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "dsi";
arch/arm/boot/dts/tegra30.dtsi:		#reset-cells = <1>;
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "dma";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "serial";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "gmi";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "pwm";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "i2c";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "spi";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "kbc";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "fuse";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "hda", "hda2hdmi", "hda2codec_2x";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "d_audio", "apbif", "i2s0", "i2s1", "i2s2",
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra30.dtsi:			reset-names = "i2s";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "sdhci";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "usb";
arch/arm/boot/dts/tegra30.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm/boot/dts/uniphier-ld4.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-ld4.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-ld4.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pro4.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pro4.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pro4.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pro4.dtsi:			reset-names = "gio", "ether";
arch/arm/boot/dts/uniphier-pro5.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pro5.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pro5.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pxs2.dtsi:			reset-names = "aio";
arch/arm/boot/dts/uniphier-pxs2.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pxs2.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pxs2.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-pxs2.dtsi:			reset-names = "ether";
arch/arm/boot/dts/uniphier-sld8.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-sld8.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/uniphier-sld8.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/vf610-zii-dev-rev-b.dts:		reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/vf610-zii-dev-rev-c.dts:		reset-gpio = <&gpio6 10 GPIO_ACTIVE_HIGH>;
arch/arm/boot/dts/vf610-zii-dev-rev-c.dts:		reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
arch/arm/boot/dts/zynq-7000.dtsi:				#reset-cells = <1>;
arch/arm/boot/dts/zynq-zybo-z7.dts:		reset-gpios = <&gpio0 46 1>;
arch/arm/boot/dts/zynq-zybo.dts:		reset-gpios = <&gpio0 46 1>;
arch/arm/include/asm/v7m.h:#define	V7M_SCB_DCISW		0x260	/* D-cache invalidate by set-way */
arch/arm/include/asm/v7m.h:#define	V7M_SCB_DCCSW		0x26c	/* D-cache clean by set-way */
arch/arm/include/asm/v7m.h:#define	V7M_SCB_DCCISW		0x274	/* D-cache clean and invalidate by set-way */
arch/arm/include/asm/v7m.h:#define	V7M_SCB_BPIALL		0x278	/* D-cache clean and invalidate by set-way */
arch/arm/kernel/signal.c:	__put_user_error(set->sig[0], &sf->uc.uc_mcontext.oldmask, err);
arch/arm/mach-bcm/Kconfig:	  This enables support for Broadcom ARM-based set-top box chipsets,
arch/arm/mach-bcm/bcm63xx_pmb.c:	ret = of_parse_phandle_with_args(dn, "resets", "#reset-cells",
arch/arm/mach-bcm/bcm63xx_pmb.c:		pr_err("reset-controller does not conform to reset-cells\n");
arch/arm/mach-imx/src.c:#include <linux/reset-controller.h>
arch/arm/mach-omap2/clkt2xxx_dpllcore.c:		high = curr_prcm_set->dpll_speed * 2;
arch/arm/mach-omap2/clkt2xxx_dpllcore.c:		low = curr_prcm_set->dpll_speed;
arch/arm/mach-omap2/clkt2xxx_dpllcore.c:		high = curr_prcm_set->dpll_speed;
arch/arm/mach-omap2/clkt2xxx_dpllcore.c:		low = curr_prcm_set->dpll_speed / 2;
arch/arm/mach-omap2/clkt2xxx_dpllcore.c:			low = curr_prcm_set->dpll_speed;
arch/arm/mach-omap2/clkt2xxx_dpllcore.c:			low = curr_prcm_set->dpll_speed / 2;
arch/arm/mach-omap2/clkt2xxx_dpllcore.c:		div = ((curr_prcm_set->xtal_speed / 1000000) - 1);
arch/arm/mach-omap2/clkt2xxx_dpllcore.c:		if (rate == curr_prcm_set->xtal_speed)	/* If asking for 1-1 */
arch/arm/mach-omap2/clkt2xxx_virt_prcm_set.c:	return curr_prcm_set->mpu_speed;
arch/arm/mach-omap2/omap_hwmod.c:		if (of_find_property(np, "ti,no-reset-on-init", NULL))
arch/arm/mach-prima2/rstc.c:#include <linux/reset-controller.h>
arch/arm/mach-s3c24xx/mach-anubis.c:	slot = set->nr_map[slot] & 3;
arch/arm/mach-s3c24xx/mach-anubis.c:		 slot, set, set->nr_map);
arch/arm/mach-s3c24xx/mach-bast.c:	slot = set->nr_map[slot] & 3;
arch/arm/mach-s3c24xx/mach-bast.c:		 slot, set, set->nr_map);
arch/arm/mach-s3c24xx/mach-osiris.c:	slot = set->nr_map[slot] & 3;
arch/arm/mach-s3c24xx/mach-osiris.c:		 slot, set, set->nr_map);
arch/arm/mach-sa1100/neponset.c:	neponset_init_gpio(&d->gpio[0], &dev->dev, "neponset-ncr",
arch/arm/mach-sa1100/neponset.c:	neponset_init_gpio(&d->gpio[1], &dev->dev, "neponset-mdm-ctl0",
arch/arm/mach-sa1100/neponset.c:	neponset_init_gpio(&d->gpio[2], &dev->dev, "neponset-mdm-ctl1",
arch/arm/mach-sa1100/neponset.c:	neponset_init_gpio(&d->gpio[3], &dev->dev, "neponset-aud-ctl",
arch/arm/mach-sti/Kconfig:	  Electronics family StiH415 parts, primarily targeted at set-top-box
arch/arm/mach-sti/Kconfig:	  Electronics family StiH416 parts, primarily targeted at set-top-box
arch/arm/mach-sti/Kconfig:	  Electronics family StiH407 parts, targetted at set-top-box
arch/arm/mach-tegra/Makefile:obj-y					+= reset-handler.o
arch/arm/mach-zx/Kconfig:	  set-top-box processor is supported. More will be
arch/arm/mm/alignment.c:		poffset->un = (tinst2 & 0xff) << 2;
arch/arm/plat-samsung/devs.c:	size = sizeof(struct mtd_partition) * set->nr_partitions;
arch/arm/plat-samsung/devs.c:		ptr = kmemdup(set->partitions, size, GFP_KERNEL);
arch/arm/plat-samsung/devs.c:		set->partitions = ptr;
arch/arm/plat-samsung/devs.c:	if (set->nr_map && set->nr_chips) {
arch/arm/plat-samsung/devs.c:		size = sizeof(int) * set->nr_chips;
arch/arm/plat-samsung/devs.c:		ptr = kmemdup(set->nr_map, size, GFP_KERNEL);
arch/arm/plat-samsung/devs.c:		set->nr_map = ptr;
arch/arm/plat-samsung/platformdata.c:	set->cd_type = pd->cd_type;
arch/arm/plat-samsung/platformdata.c:	set->ext_cd_init = pd->ext_cd_init;
arch/arm/plat-samsung/platformdata.c:	set->ext_cd_cleanup = pd->ext_cd_cleanup;
arch/arm/plat-samsung/platformdata.c:	set->ext_cd_gpio = pd->ext_cd_gpio;
arch/arm/plat-samsung/platformdata.c:	set->ext_cd_gpio_invert = pd->ext_cd_gpio_invert;
arch/arm/plat-samsung/platformdata.c:		set->max_width = pd->max_width;
arch/arm/plat-samsung/platformdata.c:		set->cfg_gpio = pd->cfg_gpio;
arch/arm/plat-samsung/platformdata.c:		set->host_caps |= pd->host_caps;
arch/arm/plat-samsung/platformdata.c:		set->host_caps2 |= pd->host_caps2;
arch/arm/plat-samsung/platformdata.c:		set->pm_caps |= pd->pm_caps;
arch/arm64/boot/dts/allwinner/sun50i-a64-bananapi-m64.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 */
arch/arm64/boot/dts/allwinner/sun50i-a64-olinuxino.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 */
arch/arm64/boot/dts/allwinner/sun50i-a64-teres-i.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 */
arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi:			reset-names = "ahb";
arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi:			reset-names = "ahb";
arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi:			reset-names = "ahb";
arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi:			reset-names = "usb0_reset",
arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi:			reset-names = "stmmaceth";
arch/arm64/boot/dts/allwinner/sun50i-a64.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/allwinner/sun50i-h5-nanopi-neo-plus2.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
arch/arm64/boot/dts/allwinner/sun50i-h5-orangepi-prime.dts:		reset-gpios = <&pio 2 14 GPIO_ACTIVE_LOW>; /* PC14 */
arch/arm64/boot/dts/allwinner/sun50i-h5-orangepi-zero-plus2.dts:		reset-gpios = <&pio 0 9 GPIO_ACTIVE_LOW>; /* PA9 */
arch/arm64/boot/dts/allwinner/sun50i-h6.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/allwinner/sun50i-h6.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/altera/socfpga_stratix10.dtsi:			reset-names = "stmmaceth";
arch/arm64/boot/dts/altera/socfpga_stratix10.dtsi:			reset-names = "stmmaceth";
arch/arm64/boot/dts/altera/socfpga_stratix10.dtsi:			reset-names = "stmmaceth";
arch/arm64/boot/dts/altera/socfpga_stratix10.dtsi:			reset-names = "reset";
arch/arm64/boot/dts/altera/socfpga_stratix10.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/altera/socfpga_stratix10.dtsi:			reset-names = "dwc2", "dwc2-ecc";
arch/arm64/boot/dts/altera/socfpga_stratix10.dtsi:			reset-names = "dwc2", "dwc2-ecc";
arch/arm64/boot/dts/amlogic/meson-axg-s400.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-axg-s400.dts:		reset-gpios = <&gpio GPIOX_7 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-axg.dtsi:			reset: reset-controller@1004 {
arch/arm64/boot/dts/amlogic/meson-axg.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/amlogic/meson-axg.dtsi:					#reset-cells = <1>;
arch/arm64/boot/dts/amlogic/meson-gx-p23x-q20x.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gx-p23x-q20x.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gx.dtsi:			reset: reset-controller@4404 {
arch/arm64/boot/dts/amlogic/meson-gx.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/amlogic/meson-gx.dtsi:					#reset-cells = <1>;
arch/arm64/boot/dts/amlogic/meson-gxbb-nanopi-k2.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-nanopi-k2.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-nanopi-k2.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxbb-nanopi-k2.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxbb-nanopi-k2.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxbb-nexbox-a95x.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-nexbox-a95x.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-nexbox-a95x.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxbb-nexbox-a95x.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxbb-nexbox-a95x.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxbb-odroidc2.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-odroidc2.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxbb-odroidc2.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxbb-odroidc2.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxbb-p200.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxbb-p200.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxbb-p200.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxbb-p201.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxbb-p201.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxbb-p201.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxbb-p20x.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-p20x.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-vega-s95.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-vega-s95.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>,
arch/arm64/boot/dts/amlogic/meson-gxbb-vega-s95.dtsi:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxbb-vega-s95.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxbb-vega-s95.dtsi:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxbb-wetek.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-wetek.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxbb-wetek.dtsi:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxbb-wetek.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxbb-wetek.dtsi:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxbb.dtsi:	reset-names = "hdmitx_apb", "hdmitx", "hdmitx_phy";
arch/arm64/boot/dts/amlogic/meson-gxl-s905d-p230.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxl-s905d-p230.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxl-s905d-p230.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxl-s905x-hwacom-amazetv.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxl-s905x-hwacom-amazetv.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxl-s905x-libretech-cc.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxl-s905x-nexbox-a95x.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxl-s905x-nexbox-a95x.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxl-s905x-p212.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxl-s905x-p212.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxl.dtsi:			reset-names = "usb_otg";
arch/arm64/boot/dts/amlogic/meson-gxl.dtsi:		reset-names = "phy";
arch/arm64/boot/dts/amlogic/meson-gxl.dtsi:		reset-names = "phy";
arch/arm64/boot/dts/amlogic/meson-gxl.dtsi:		reset-names = "phy", "peripheral";
arch/arm64/boot/dts/amlogic/meson-gxl.dtsi:	reset-names = "hdmitx_apb", "hdmitx", "hdmitx_phy";
arch/arm64/boot/dts/amlogic/meson-gxm-khadas-vim2.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxm-khadas-vim2.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxm-khadas-vim2.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxm-khadas-vim2.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxm-khadas-vim2.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxm-nexbox-a1.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxm-nexbox-a1.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxm-nexbox-a1.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxm-nexbox-a1.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxm-q200.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxm-q200.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxm-q200.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxm-rbox-pro.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxm-rbox-pro.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/amlogic/meson-gxm-rbox-pro.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
arch/arm64/boot/dts/amlogic/meson-gxm-rbox-pro.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/amlogic/meson-gxm-rbox-pro.dts:	snps,reset-active-low;
arch/arm64/boot/dts/amlogic/meson-gxm.dtsi:		reset-names = "phy";
arch/arm64/boot/dts/exynos/exynos5433-tm2-common.dtsi:		reset-gpios = <&gpv7 0 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/exynos/exynos5433-tm2.dts:		reset-gpios = <&gpg0 0 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/exynos/exynos5433-tm2e.dts:		reset-gpios = <&gpg0 0 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/hisilicon/hi3660.dtsi:			#reset-cells = <2>;
arch/arm64/boot/dts/hisilicon/hi3660.dtsi:			#reset-cells = <2>;
arch/arm64/boot/dts/hisilicon/hi3660.dtsi:			reset-gpios = <&gpio11 1 0 >;
arch/arm64/boot/dts/hisilicon/hi3660.dtsi:			reset-names = "reset";
arch/arm64/boot/dts/hisilicon/hi3660.dtsi:			reset-names = "reset";
arch/arm64/boot/dts/hisilicon/hi3798cv200-poplar.dts:	hisilicon,phy-reset-delays-us = <10000 10000 30000>;
arch/arm64/boot/dts/hisilicon/hi3798cv200-poplar.dts:	reset-gpios = <&gpio4 4 GPIO_ACTIVE_HIGH>;
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:		crg: clock-reset-controller@8a22000 {
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			#reset-cells = <2>;
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			gmacphyrst: reset-controller {
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:				ti,reset-bits =
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			#reset-cells = <2>;
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			reset-names = "reset";
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			reset-names = "reset";
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			reset-names = "mac_core", "mac_ifc", "phy";
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			reset-names = "mac_core", "mac_ifc", "phy";
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			reset-names = "soft", "sys", "bus";
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			reset-names = "bus";
arch/arm64/boot/dts/hisilicon/hi3798cv200.dtsi:			reset-names = "bus", "phy", "utmi";
arch/arm64/boot/dts/hisilicon/hi6220-hikey.dts:		reset-gpios = <&gpio0 5 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/hisilicon/hi6220.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/hisilicon/hi6220.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/hisilicon/hi6220.dtsi:			reset-names = "reset";
arch/arm64/boot/dts/hisilicon/hi6220.dtsi:			reset-names = "reset";
arch/arm64/boot/dts/hisilicon/hi6220.dtsi:			reset-names = "reset";
arch/arm64/boot/dts/hisilicon/hip06.dtsi:			reset-field-offset = <0>;
arch/arm64/boot/dts/hisilicon/hip06.dtsi:			ctrl-reset-reg = <0xa60>;
arch/arm64/boot/dts/hisilicon/hip06.dtsi:			ctrl-reset-sts-reg = <0x5a30>;
arch/arm64/boot/dts/hisilicon/hip06.dtsi:			ctrl-reset-reg = <0xa18>;
arch/arm64/boot/dts/hisilicon/hip06.dtsi:			ctrl-reset-sts-reg = <0x5a0c>;
arch/arm64/boot/dts/hisilicon/hip06.dtsi:			ctrl-reset-reg = <0xae0>;
arch/arm64/boot/dts/hisilicon/hip06.dtsi:			ctrl-reset-sts-reg = <0x5a70>;
arch/arm64/boot/dts/hisilicon/hip07.dtsi:			reset-field-offset = <0>;
arch/arm64/boot/dts/hisilicon/hip07.dtsi:			ctrl-reset-reg = <0xa60>;
arch/arm64/boot/dts/hisilicon/hip07.dtsi:			ctrl-reset-sts-reg = <0x5a30>;
arch/arm64/boot/dts/hisilicon/hip07.dtsi:			ctrl-reset-reg = <0xa18>;
arch/arm64/boot/dts/hisilicon/hip07.dtsi:			ctrl-reset-sts-reg = <0x5a0c>;
arch/arm64/boot/dts/hisilicon/hip07.dtsi:			ctrl-reset-reg = <0xae0>;
arch/arm64/boot/dts/hisilicon/hip07.dtsi:			ctrl-reset-sts-reg = <0x5a70>;
arch/arm64/boot/dts/marvell/armada-8040-mcbin.dts:	reset-gpio = <&cp0_gpio1 20 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/mediatek/mt7622.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/mediatek/mt7622.dtsi:		reset-names = "pwrap";
arch/arm64/boot/dts/mediatek/mt7622.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/mediatek/mt7622.dtsi:		reset-names = "therm";
arch/arm64/boot/dts/mediatek/mt7622.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/mediatek/mt7622.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/mediatek/mt7622.dtsi:		reset-names = "axi", "sw", "reg";
arch/arm64/boot/dts/mediatek/mt7622.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/mediatek/mt8173.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/mediatek/mt8173.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/mediatek/mt8173.dtsi:			reset-names = "pwrap";
arch/arm64/boot/dts/nvidia/tegra132-norrin.dts:		nvidia,reset-gpio = <&gpio TEGRA_GPIO(I, 5) GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "pex", "afi", "pcie_x";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "host1x";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "dc";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "dc";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "hdmi";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "sor";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "dpaux";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "gpu";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "actmon";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "dma";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "pwm";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "fuse";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "sata", "sata-oob", "sata-cold";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "hda", "hda2hdmi", "hda2codec_2x";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "padctl";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "soctherm";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "d_audio", "apbif", "i2s0", "i2s1", "i2s2",
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "i2s";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "i2s";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "i2s";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "i2s";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:			reset-names = "i2s";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "usb";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "usb";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "usb";
arch/arm64/boot/dts/nvidia/tegra132.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm64/boot/dts/nvidia/tegra186-p3310.dtsi:		phy-reset-gpios = <&gpio TEGRA_MAIN_GPIO(M, 4) GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "eqos";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "afi", "pex", "pcie_x";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "host1x";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "dpaux";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "misc", "wgrp0", "wgrp1", "wgrp2",
arch/arm64/boot/dts/nvidia/tegra186.dtsi:				reset-names = "dc";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:				reset-names = "dc";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:				reset-names = "dc";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "dsi";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "vic";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "dsi";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "sor";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "sor";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "dpaux";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "dsi";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "dsi";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:			reset-names = "dsi";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		reset-names = "gpu";
arch/arm64/boot/dts/nvidia/tegra186.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:			reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra194.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/nvidia/tegra210-smaug.dts:			realtek,reset-gpio = <&gpio TEGRA_GPIO(BB, 3) GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "pex", "afi", "pcie_x";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "host1x";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:			reset-names = "dpaux";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:			reset-names = "dc";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:			reset-names = "dc";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:			reset-names = "dsi";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:			reset-names = "vic";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:			reset-names = "dsi";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:			reset-names = "sor";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:			reset-names = "sor";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:			reset-names = "dpaux";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "gpu";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "dma";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "serial";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "pwm";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "i2c";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "spi";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:				reset-names = "vic";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "fuse";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "sata", "sata-oob", "sata-cold";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "hda", "hda2hdmi", "hda2codec_2x";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "xusb_host", "xusb_ss", "xusb_src";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "padctl";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:				reset-names = "phy";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:				reset-names = "phy";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "sdhci";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "qspi";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "usb";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "usb";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "usb", "utmi-pads";
arch/arm64/boot/dts/nvidia/tegra210.dtsi:		reset-names = "soctherm";
arch/arm64/boot/dts/qcom/apq8016-sbc.dtsi:		reset-gpios = <&pm8916_gpios 3 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/qcom/apq8096-db820c.dtsi:					regulator-allow-set-load;
arch/arm64/boot/dts/qcom/apq8096-db820c.dtsi:					regulator-allow-set-load;
arch/arm64/boot/dts/qcom/apq8096-db820c.dtsi:					regulator-allow-set-load;
arch/arm64/boot/dts/qcom/ipq8074.dtsi:			#reset-cells = <0x1>;
arch/arm64/boot/dts/qcom/ipq8074.dtsi:			reset-names = "phy",
arch/arm64/boot/dts/qcom/ipq8074.dtsi:			reset-names = "pipe",
arch/arm64/boot/dts/qcom/ipq8074.dtsi:			reset-names = "phy",
arch/arm64/boot/dts/qcom/ipq8074.dtsi:			reset-names = "pipe",
arch/arm64/boot/dts/qcom/msm8916.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/qcom/msm8916.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/qcom/msm8916.dtsi:			reset-names = "core";
arch/arm64/boot/dts/qcom/msm8916.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/qcom/msm8916.dtsi:					reset-names = "phy", "por";
arch/arm64/boot/dts/qcom/msm8916.dtsi:			reset-names = "mss_restart";
arch/arm64/boot/dts/qcom/msm8992.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/qcom/msm8994-smd-rpm.dtsi:					regulator-allow-set-load;
arch/arm64/boot/dts/qcom/msm8994-smd-rpm.dtsi:					regulator-allow-set-load;
arch/arm64/boot/dts/qcom/msm8994.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/qcom/msm8996.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/qcom/msm8996.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/qcom/msm8996.dtsi:			reset-names = "phy", "common", "cfg";
arch/arm64/boot/dts/qcom/msm8996.dtsi:				reset-names = "lane0";
arch/arm64/boot/dts/qcom/msm8996.dtsi:				reset-names = "lane1";
arch/arm64/boot/dts/qcom/msm8996.dtsi:				reset-names = "lane2";
arch/arm64/boot/dts/qcom/msm8996.dtsi:			reset-names = "phy", "common";
arch/arm64/boot/dts/qcom/sdm845.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/renesas/r8a7795.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/renesas/r8a7795.dtsi:		rst: reset-controller@e6160000 {
arch/arm64/boot/dts/renesas/r8a7795.dtsi:			reset-names = "ssi-all",
arch/arm64/boot/dts/renesas/r8a7796.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/renesas/r8a7796.dtsi:		rst: reset-controller@e6160000 {
arch/arm64/boot/dts/renesas/r8a7796.dtsi:			reset-names = "ssi-all",
arch/arm64/boot/dts/renesas/r8a77965.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/renesas/r8a77965.dtsi:		rst: reset-controller@e6160000 {
arch/arm64/boot/dts/renesas/r8a77970.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/renesas/r8a77970.dtsi:		rst: reset-controller@e6160000 {
arch/arm64/boot/dts/renesas/r8a77980.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/renesas/r8a77980.dtsi:		rst: reset-controller@e6160000 {
arch/arm64/boot/dts/renesas/r8a77990-ebisu.dts:		reset-gpios = <&gpio1 20 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/renesas/r8a77990.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/renesas/r8a77990.dtsi:		rst: reset-controller@e6160000 {
arch/arm64/boot/dts/renesas/r8a77995.dtsi:			#reset-cells = <1>;
arch/arm64/boot/dts/renesas/r8a77995.dtsi:		rst: reset-controller@e6160000 {
arch/arm64/boot/dts/renesas/salvator-common.dtsi:		reset-gpios = <&gpio2 10 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/renesas/ulcb-kf.dtsi:		reset-gpios = <&gpio5 3 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/renesas/ulcb-kf.dtsi:		reset-gpios= <&gpio3 15 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/renesas/ulcb.dtsi:		reset-gpios = <&gpio2 10 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/rockchip/rk3328-evb.dts:		reset-gpios = <&gpio1 18 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/rockchip/rk3328-roc-cc.dts:	snps,reset-gpio = <&gpio1 RK_PC2 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/rockchip/rk3328-roc-cc.dts:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3328-roc-cc.dts:	snps,reset-delays-us = <0 10000 50000>;
arch/arm64/boot/dts/rockchip/rk3328-rock64.dts:	snps,reset-gpio = <&gpio1 RK_PC2 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/rockchip/rk3328-rock64.dts:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3328-rock64.dts:	snps,reset-delays-us = <0 10000 50000>;
arch/arm64/boot/dts/rockchip/rk3328.dtsi:		reset-names = "tsadc-apb";
arch/arm64/boot/dts/rockchip/rk3328.dtsi:		reset-names = "saradc-apb";
arch/arm64/boot/dts/rockchip/rk3328.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/rockchip/rk3328.dtsi:		reset-names = "stmmaceth";
arch/arm64/boot/dts/rockchip/rk3328.dtsi:		reset-names = "stmmaceth", "mac-phy";
arch/arm64/boot/dts/rockchip/rk3368-evb.dtsi:		reset-gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_HIGH>;
arch/arm64/boot/dts/rockchip/rk3368-evb.dtsi:	snps,reset-gpio = <&gpio3 RK_PB4 GPIO_ACTIVE_HIGH>;
arch/arm64/boot/dts/rockchip/rk3368-evb.dtsi:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3368-evb.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/rockchip/rk3368-lion.dtsi:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3368-lion.dtsi:	snps,reset-delays-us = <0 10000 50000>;
arch/arm64/boot/dts/rockchip/rk3368-lion.dtsi:	snps,reset-gpio = <&gpio3 RK_PB3 GPIO_ACTIVE_HIGH>;
arch/arm64/boot/dts/rockchip/rk3368-orion-r68-meta.dts:		reset-gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_HIGH>;
arch/arm64/boot/dts/rockchip/rk3368-orion-r68-meta.dts:	snps,reset-gpio = <&gpio3 RK_PB4 GPIO_ACTIVE_HIGH>;
arch/arm64/boot/dts/rockchip/rk3368-orion-r68-meta.dts:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3368-orion-r68-meta.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/rockchip/rk3368-r88.dts:		reset-gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_HIGH>;
arch/arm64/boot/dts/rockchip/rk3368-r88.dts:		reset-gpios =
arch/arm64/boot/dts/rockchip/rk3368-r88.dts:	snps,reset-gpio = <&gpio3 RK_PB4 GPIO_ACTIVE_HIGH>;
arch/arm64/boot/dts/rockchip/rk3368-r88.dts:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3368-r88.dts:	snps,reset-delays-us = <0 10000 1000000>;
arch/arm64/boot/dts/rockchip/rk3368.dtsi:		reset-names = "reset";
arch/arm64/boot/dts/rockchip/rk3368.dtsi:		reset-names = "reset";
arch/arm64/boot/dts/rockchip/rk3368.dtsi:		reset-names = "reset";
arch/arm64/boot/dts/rockchip/rk3368.dtsi:		reset-names = "saradc-apb";
arch/arm64/boot/dts/rockchip/rk3368.dtsi:		reset-names = "tsadc-apb";
arch/arm64/boot/dts/rockchip/rk3368.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/rockchip/rk3399-evb.dts:	snps,reset-gpio = <&gpio3 RK_PB7 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/rockchip/rk3399-evb.dts:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3399-evb.dts:	snps,reset-delays-us = <0 10000 50000>;
arch/arm64/boot/dts/rockchip/rk3399-firefly.dts:		reset-gpios = <&gpio0 RK_PB2 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/rockchip/rk3399-firefly.dts:	snps,reset-gpio = <&gpio3 RK_PB7 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/rockchip/rk3399-firefly.dts:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3399-firefly.dts:	snps,reset-delays-us = <0 10000 50000>;
arch/arm64/boot/dts/rockchip/rk3399-gru.dtsi:		headset_int_l: headset-int-l {
arch/arm64/boot/dts/rockchip/rk3399-gru.dtsi:		touch_reset_l: touch-reset-l {
arch/arm64/boot/dts/rockchip/rk3399-gru.dtsi:		wlan_module_reset_l: wlan-module-reset-l {
arch/arm64/boot/dts/rockchip/rk3399-puma.dtsi:	snps,reset-gpio = <&gpio3 RK_PC0 GPIO_ACTIVE_HIGH>;
arch/arm64/boot/dts/rockchip/rk3399-puma.dtsi:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3399-puma.dtsi:	snps,reset-delays-us = <0 10000 50000>;
arch/arm64/boot/dts/rockchip/rk3399-sapphire-excavator.dts:		reset-gpios = <&gpio0 RK_PB2 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/rockchip/rk3399-sapphire.dtsi:	snps,reset-gpio = <&gpio3 RK_PB7 GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/rockchip/rk3399-sapphire.dtsi:	snps,reset-active-low;
arch/arm64/boot/dts/rockchip/rk3399-sapphire.dtsi:	snps,reset-delays-us = <0 10000 50000>;
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "core", "mgmt", "mgmt-sticky", "pipe",
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "stmmaceth";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "reset";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "reset";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "usb3-otg";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "usb3-otg";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "spdif", "dptx", "apb", "core";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "saradc-apb";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "tsadc-apb";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "core", "axi", "ahb";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		#reset-cells = <1>;
arch/arm64/boot/dts/rockchip/rk3399.dtsi:			reset-names = "phy";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "uphy", "uphy-pipe", "uphy-tcphy";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "uphy", "uphy-pipe", "uphy-tcphy";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "axi", "ahb", "dclk";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "axi", "ahb", "dclk";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "apb";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "apb";
arch/arm64/boot/dts/rockchip/rk3399.dtsi:		reset-names = "dp";
arch/arm64/boot/dts/socionext/uniphier-ld11-global.dts:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(23, 4) GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/socionext/uniphier-ld11.dtsi:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(3, 2) GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/socionext/uniphier-ld11.dtsi:			reset-names = "aio";
arch/arm64/boot/dts/socionext/uniphier-ld11.dtsi:			reset-names = "evea", "exiv", "adamv";
arch/arm64/boot/dts/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-ld11.dtsi:			reset-names = "ether";
arch/arm64/boot/dts/socionext/uniphier-ld20-global.dts:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(0, 0) GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/socionext/uniphier-ld20.dtsi:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(3, 2) GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/socionext/uniphier-ld20.dtsi:			reset-names = "aio";
arch/arm64/boot/dts/socionext/uniphier-ld20.dtsi:			reset-names = "evea", "exiv", "adamv";
arch/arm64/boot/dts/socionext/uniphier-ld20.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-ld20.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-ld20.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-ld20.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-ld20.dtsi:			reset-names = "ether";
arch/arm64/boot/dts/socionext/uniphier-pxs3.dtsi:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(5, 7) GPIO_ACTIVE_LOW>;
arch/arm64/boot/dts/socionext/uniphier-pxs3.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-pxs3.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-pxs3.dtsi:				#reset-cells = <1>;
arch/arm64/boot/dts/socionext/uniphier-pxs3.dtsi:			reset-names = "ether";
arch/arm64/boot/dts/socionext/uniphier-pxs3.dtsi:			reset-names = "ether";
arch/arm64/boot/dts/xilinx/zynqmp-zcu100-revC.dts:		reset-gpios = <&gpio 7 GPIO_ACTIVE_LOW>; /* WIFI_EN */
arch/arm64/kernel/acpi_parking_protocol.c:	 * Check if firmware has set-up the mailbox entry properly
arch/arm64/kernel/ptrace.c:	unsigned int note_type = regset->core_note_type;
arch/arm64/kernel/ptrace.c:	limit = regset->n * regset->size;
arch/arm64/kernel/ptrace.c:	unsigned int note_type = regset->core_note_type;
arch/arm64/kernel/ptrace.c:	limit = regset->n * regset->size;
arch/arm64/kernel/ptrace.c:	num_regs = count / regset->size;
arch/arm64/kernel/ptrace.c:	start = pos / regset->size;
arch/arm64/kernel/ptrace.c:	if (start + num_regs > regset->n)
arch/arm64/kernel/ptrace.c:	num_regs = count / regset->size;
arch/arm64/kernel/ptrace.c:	start = pos / regset->size;
arch/arm64/kernel/ptrace.c:	if (start + num_regs > regset->n)
arch/arm64/kernel/signal32.c:	cset.sig[0] = set->sig[0] & 0xffffffffull;
arch/arm64/kernel/signal32.c:	cset.sig[1] = set->sig[0] >> 32;
arch/arm64/kernel/signal32.c:	set->sig[0] = s32.sig[0] | (((long)s32.sig[1]) << 32);
arch/arm64/kernel/signal32.c:	__put_user_error(set->sig[0], &sf->uc.uc_mcontext.oldmask, err);
arch/arm64/kernel/smp.c:	 * If the cpu set-up fails, invalidate the cpu_logical_map entry.
arch/arm64/kvm/debug.c: * presumably been set-up by some knowledgeable bootcode.
arch/c6x/boot/dts/tms320c6455.dtsi:			ti,c64x+pll-reset-delay = <15360>;
arch/c6x/boot/dts/tms320c6457.dtsi:			ti,c64x+pll-reset-delay = <24000>;
arch/c6x/boot/dts/tms320c6472.dtsi:			ti,c64x+pll-reset-delay = <12000>;
arch/c6x/boot/dts/tms320c6474.dtsi:			ti,c64x+pll-reset-delay = <30000>;
arch/c6x/boot/dts/tms320c6678.dtsi:			ti,c64x+pll-reset-delay = <12000>;
arch/c6x/kernel/signal.c:	err |= setup_sigcontext(&frame->uc.uc_mcontext,	regs, set->sig[0]);
arch/c6x/platforms/plldata.c:	err = of_property_read_u32(node, "ti,c64x+pll-reset-delay", &val);
arch/h8300/kernel/signal.c:	err |= setup_sigcontext(&frame->uc.uc_mcontext, regs, set->sig[0]);
arch/m68k/ifpsp060/TEST.DOC:Example test package set-up:
arch/m68k/include/asm/signal.h:	return 1 & (set->sig[sig / _NSIG_BPW] >> (sig % _NSIG_BPW));
arch/m68k/kernel/signal.c:		err |= copy_to_user(frame->extramask, &set->sig[1],
arch/m68k/kernel/signal.c:	setup_sigcontext(&context, regs, set->sig[0]);
arch/microblaze/boot/dts/system.dts:	hard-reset-gpios = <&LEDs_8Bit 2 1>;
arch/microblaze/boot/dts/system.dts:			xlnx,reset-msr = <0x0>;
arch/microblaze/kernel/reset.c:				   "hard-reset-gpios", 0);
arch/microblaze/kernel/signal.c:			regs, set->sig[0]);
arch/mips/Kconfig:	  BCM33xx cable modem chips, BCM63xx DSL chips, and BCM7xxx set-top
arch/mips/Makefile:KBUILD_CPPFLAGS += -DDATAOFFSET=$(if $(dataoffset-y),$(dataoffset-y),0)
arch/mips/alchemy/common/usb.c:#define USBHEN_RD	(1 << 4)		/* OHCI reset-done indicator */
arch/mips/boot/compressed/Makefile:			--set-section-flags=.image=contents,alloc,load,readonly,data
arch/mips/boot/dts/img/boston.dts:					phy-reset-gpios = <&eg20t_gpio 6
arch/mips/boot/dts/img/pistachio.dtsi:		reset-names = "rst";
arch/mips/boot/dts/img/pistachio.dtsi:		reset-names = "rst";
arch/mips/boot/dts/img/pistachio.dtsi:		reset-names = "rst";
arch/mips/boot/dts/img/pistachio.dtsi:		pistachio_reset: reset-controller {
arch/mips/boot/dts/img/pistachio.dtsi:			#reset-cells = <1>;
arch/mips/boot/dts/ingenic/ci20.dts:		reset-gpios = <&gpf 12 GPIO_ACTIVE_HIGH>;
arch/mips/boot/dts/qca/ar9132.dtsi:			rst: reset-controller@1806001c {
arch/mips/boot/dts/qca/ar9132.dtsi:				#reset-cells = <1>;
arch/mips/boot/dts/qca/ar9132.dtsi:		reset-names = "usb-phy", "usb-suspend-override";
arch/mips/boot/dts/qca/ar9331.dtsi:			rst: reset-controller@1806001c {
arch/mips/boot/dts/qca/ar9331.dtsi:				#reset-cells = <1>;
arch/mips/boot/dts/qca/ar9331.dtsi:		reset-names = "usb-phy", "usb-suspend-override";
arch/mips/boot/dts/ralink/mt7628a.dtsi:	resetc: reset-controller {
arch/mips/boot/dts/ralink/mt7628a.dtsi:		#reset-cells = <1>;
arch/mips/boot/dts/ralink/mt7628a.dtsi:			reset-names = "intc";
arch/mips/boot/dts/ralink/mt7628a.dtsi:			reset-names = "uart0";
arch/mips/boot/dts/ralink/mt7628a.dtsi:			reset-names = "uart1";
arch/mips/boot/dts/ralink/mt7628a.dtsi:			reset-names = "uart2";
arch/mips/boot/dts/ralink/mt7628a.dtsi:		reset-names = "host", "device";
arch/mips/cavium-octeon/octeon-platform.c:	 * clock-reset-control register.
arch/mips/kernel/elf.c: * https://dmz-portal.mips.com/wiki/MIPS_O32_ABI_-_FR0_and_FR1_Interlinking#10.4.1._Basic_mode_set-up
arch/mips/mm/c-tx39.c:		/* TX39/H2,H3 core (writeback 2way-set-associative cache) */
arch/mips/ralink/reset.c:#include <linux/reset-controller.h>
arch/mips/sgi-ip27/Platform:dataoffset-$(CONFIG_SGI_IP27)	+= 0x01000000
arch/mips/sni/reset.c: * controller to pulse the reset-line low. We try that for a while,
arch/nds32/kernel/signal.c:	__put_user_error(set->sig[0], &sf->uc.uc_mcontext.oldmask, err);
arch/nios2/boot/dts/10m50_devboard.dts:			altr,reset-addr = <0xd4000000>;
arch/nios2/boot/dts/3c120_devboard.dts:			altr,reset-addr = <0xc2800000>;
arch/nios2/kernel/cpuinfo.c:	cpuinfo.reset_addr = fcpu(cpu, "altr,reset-addr");
arch/powerpc/boot/dts/fsp2.dts:		reset-warning-irq {
arch/powerpc/boot/dts/fsp2.dts:			compatible = "ibm,reset-warning-irq";
arch/powerpc/boot/dts/icon.dts:			reset-type = <2>;	/* Use chip-reset */
arch/powerpc/boot/dts/katmai.dts:			reset-type = <2>;	/* Use chip-reset */
arch/powerpc/boot/wrapper:    objflags="-O binary --set-section-flags=.bss=contents,alloc,load,data"
arch/powerpc/boot/wrapper:	--set-section-flags=$3=contents,alloc,load,readonly,data
arch/powerpc/boot/wrapper:    ${CROSS}objcopy -O aixcoff-rs6000 --set-start "$entry" "$ofile"
arch/powerpc/kernel/prom_init.c:		call_prom("call-method", 6, 0, ADDR("set-64-bit-addressing"),
arch/powerpc/kernel/prom_init.c:		 * method is available. Should update this to set-colors */
arch/powerpc/kernel/ptrace.c:	return target->thread.used_vr ? regset->n : 0;
arch/powerpc/kernel/ptrace.c:	return target->thread.used_vsr ? regset->n : 0;
arch/powerpc/kernel/ptrace.c:	return target->thread.used_spe ? regset->n : 0;
arch/powerpc/kernel/ptrace.c:	return regset->n;
arch/powerpc/kernel/ptrace.c:	return regset->n;
arch/powerpc/kernel/ptrace.c:	return regset->n;
arch/powerpc/kernel/ptrace.c:	return target->thread.used_vsr ? regset->n : 0;
arch/powerpc/kernel/ptrace.c:	return regset->n;
arch/powerpc/kernel/ptrace.c:		return regset->n;
arch/powerpc/kernel/ptrace.c:		return regset->n;
arch/powerpc/kernel/ptrace.c:		return regset->n;
arch/powerpc/kernel/ptrace.c:		return regset->n;
arch/powerpc/kernel/ptrace.c:	return regset->n;
arch/powerpc/kernel/ptrace.c:	return regset->n;
arch/powerpc/kernel/rtas-proc.c:	error = rtas_call(rtas_token("set-time-for-power-on"), 7, 1, NULL, 
arch/powerpc/kernel/rtas-proc.c:	error = rtas_call(rtas_token("set-time-of-day"), 7, 1, NULL, 
arch/powerpc/kernel/rtas-proc.c:	error = rtas_call(rtas_token("set-indicator"), 3, 1, NULL,
arch/powerpc/kernel/rtas-proc.c:	error = rtas_call(rtas_token("set-indicator"), 3, 1, NULL,
arch/powerpc/kernel/rtas-rtc.c:	        error = rtas_call(rtas_token("set-time-of-day"), 7, 1, NULL,
arch/powerpc/kernel/rtas.c:		set_indicator = rtas_token("set-indicator");
arch/powerpc/kernel/rtas.c:	int token = rtas_token("set-power-level");
arch/powerpc/kernel/rtas.c:	int token = rtas_token("set-indicator");
arch/powerpc/kernel/rtas.c:	int token = rtas_token("set-indicator");
arch/powerpc/kernel/signal_32.c:	    || __put_user(oldset->sig[0], &sc->oldmask)
arch/powerpc/kernel/signal_32.c:	    || __put_user((oldset->sig[0] >> 32), &sc->_unused[3])
arch/powerpc/kernel/signal_32.c:	    || __put_user(oldset->sig[1], &sc->_unused[3])
arch/powerpc/kernel/signal_64.c:		err |=  __put_user(set->sig[0], &sc->oldmask);
arch/powerpc/kernel/signal_64.c:		err |=  __put_user(set->sig[0], &sc->oldmask);
arch/powerpc/kernel/signal_64.c:		err |=  __get_user(set->sig[0], &sc->oldmask);
arch/powerpc/kernel/vdso32/datapage.S:	addi	r3, r3, __kernel_datapage_offset-data_page_branch
arch/powerpc/kernel/vdso64/datapage.S:	addi	r3, r3, __kernel_datapage_offset-data_page_branch
arch/powerpc/kvm/book3s_rtas.c:	{ .name = "ibm,set-xive", .handler = kvm_rtas_set_xive },
arch/powerpc/platforms/44x/fsp2.c:#define FSP2_RST_WRN	"ibm,reset-warning-irq"
arch/powerpc/platforms/4xx/soc.c: * provided via the "reset-type" property in the cpu node.
arch/powerpc/platforms/4xx/soc.c:		prop = of_get_property(np, "reset-type", NULL);
arch/powerpc/platforms/cell/spufs/sched.c:		ctx->aff_offset = offset--;
arch/powerpc/platforms/cell/spufs/sched.c:				offset--;
arch/powerpc/platforms/powernv/eeh-powernv.c:	if (!dn || !of_get_property(dn, "ibm,reset-by-firmware", NULL))
arch/powerpc/platforms/powernv/opal-dump.c:	rc = sysfs_create_group(&dump_kset->kobj, &initiate_attr_group);
arch/powerpc/platforms/powernv/opal-dump.c:		kobject_put(&dump_kset->kobj);
arch/powerpc/platforms/pseries/eeh_pseries.c:	ibm_set_eeh_option		= rtas_token("ibm,set-eeh-option");
arch/powerpc/platforms/pseries/eeh_pseries.c:	ibm_set_slot_reset		= rtas_token("ibm,set-slot-reset");
arch/powerpc/platforms/pseries/eeh_pseries.c:	ibm_read_slot_reset_state2	= rtas_token("ibm,read-slot-reset-state2");
arch/powerpc/platforms/pseries/eeh_pseries.c:	ibm_read_slot_reset_state	= rtas_token("ibm,read-slot-reset-state");
arch/powerpc/platforms/pseries/eeh_pseries.c:		/* Some older systems (Power4) allow the ibm,set-eeh-option
arch/powerpc/platforms/pseries/firmware.c:	{FW_FEATURE_SET_MODE,		"hcall-set-mode"},
arch/powerpc/sysdev/xics/ics-opal.c:	pr_devel("ics-hal: set-affinity irq %d [hw 0x%x] server: 0x%x/0x%x\n",
arch/powerpc/sysdev/xics/ics-rtas.c:		printk(KERN_ERR "%s: ibm,set-xive irq=%u returns %d\n",
arch/powerpc/sysdev/xics/ics-rtas.c:	ibm_set_xive = rtas_token("ibm,set-xive");
arch/powerpc/sysdev/xics/xics-common.c:	WARN(status < 0, "set-indicator(%d, %d, %u) returned %d\n",
arch/powerpc/xmon/xmon.c:	token = rtas_token("set-indicator");
arch/s390/boot/compressed/Makefile:OBJCOPYFLAGS_info.bin := -O binary --only-section=.vmlinux.info --set-section-flags .vmlinux.info=load
arch/s390/kernel/ipl.c:			rc = sysfs_create_group(&ipl_kset->kobj,
arch/s390/kernel/ipl.c:			rc = sysfs_create_group(&ipl_kset->kobj,
arch/s390/kernel/ipl.c:		rc = sysfs_create_group(&ipl_kset->kobj, &ipl_fcp_attr_group);
arch/s390/kernel/ipl.c:		rc = sysfs_create_group(&ipl_kset->kobj,
arch/s390/kernel/ipl.c:	rc = sysfs_create_group(&reipl_kset->kobj, &reipl_nss_attr_group);
arch/s390/kernel/ipl.c:	rc = sysfs_create_group(&reipl_kset->kobj,
arch/s390/kernel/ipl.c:					     &reipl_kset->kobj);
arch/s390/kernel/ipl.c:	rc = sysfs_create_group(&reipl_fcp_kset->kobj, &reipl_fcp_attr_group);
arch/s390/kernel/ipl.c:	rc = sysfs_create_file(&reipl_kset->kobj, &reipl_type_attr.attr);
arch/s390/kernel/ipl.c:	rc = sysfs_create_group(&dump_kset->kobj, &dump_ccw_attr_group);
arch/s390/kernel/ipl.c:	rc = sysfs_create_group(&dump_kset->kobj, &dump_fcp_attr_group);
arch/s390/kernel/ipl.c:	rc = sysfs_create_file(&dump_kset->kobj, &dump_type_attr.attr);
arch/s390/kernel/ipl.c:	return sysfs_create_group(&vmcmd_kset->kobj, &vmcmd_attr_group);
arch/s390/kernel/ipl.c:	if (sysfs_create_group(&shutdown_actions_kset->kobj,
arch/s390/kernel/signal.c:	memcpy(&sc.oldmask, &set->sig, _SIGMASK_COPY_SIZE);
arch/sh/boards/board-sh7785lcr.c:		GPIO_LOOKUP("pfc-sh7757", 0, "reset-gpios", GPIO_ACTIVE_LOW),
arch/sh/include/uapi/asm/auxvec.h: *    bit 0-3:	  Cache set-associativity; 0 means fully associative.
arch/sh/kernel/ptrace_32.c:	return tsk_used_math(target) ? regset->n : 0;
arch/sh/kernel/ptrace_32.c:	return regs->sr & SR_DSP ? regset->n : 0;
arch/sh/kernel/ptrace_64.c:	return tsk_used_math(target) ? regset->n : 0;
arch/sh/kernel/signal_32.c:	err |= setup_sigcontext(&frame->sc, regs, set->sig[0]);
arch/sh/kernel/signal_32.c:		err |= __copy_to_user(frame->extramask, &set->sig[1],
arch/sh/kernel/signal_32.c:			        regs, set->sig[0]);
arch/sh/kernel/signal_64.c:	err |= setup_sigcontext(&frame->sc, regs, set->sig[0]);
arch/sh/kernel/signal_64.c:		err |= __copy_to_user(frame->extramask, &set->sig[1],
arch/sh/kernel/signal_64.c:			        regs, set->sig[0]);
arch/sh/lib/Makefile:memset-y			:= memset.o
arch/sh/lib/Makefile:memset-$(CONFIG_CPU_SH4)	:= memset-sh4.o
arch/sh/lib/Makefile:lib-y				+= $(memcpy-y) $(memset-y) $(udivsi3-y)
arch/sparc/kernel/head_64.S:	.asciz	"SUNW,set-trap-table"
arch/sparc/kernel/signal32.c:	seta.sig[1] = (oldset->sig[0] >> 32);
arch/sparc/kernel/signal32.c:	seta.sig[0] = oldset->sig[0];
arch/sparc/kernel/signal_32.c:	err |= __put_user(oldset->sig[0], &sf->info.si_mask);
arch/sparc/kernel/signal_32.c:	err |= __copy_to_user(sf->extramask, &oldset->sig[1],
arch/sparc/kernel/signal_32.c:	err |= __copy_to_user(&sf->mask, &oldset->sig[0], sizeof(sigset_t));
arch/unicore32/kernel/signal.c:	err |= __put_user(set->sig[0], &sf->uc.uc_mcontext.oldmask);
arch/x86/ia32/ia32_signal.c:	if (ia32_setup_sigcontext(&frame->sc, fpstate, regs, set->sig[0]))
arch/x86/ia32/ia32_signal.c:		if (__copy_to_user(frame->extramask, &set->sig[1],
arch/x86/ia32/ia32_signal.c:				     regs, set->sig[0]);
arch/x86/include/asm/mshyperv.h:		vpset->bank_contents[vcpu_bank] = 0;
arch/x86/include/asm/mshyperv.h:			  &vpset->bank_contents[vcpu_bank]);
arch/x86/include/asm/mshyperv.h:	vpset->valid_bank_mask = GENMASK_ULL(nr_bank - 1, 0);
arch/x86/include/asm/signal.h:	set->sig[sig / _NSIG_BPW] |= 1 << (sig % _NSIG_BPW);
arch/x86/include/asm/signal.h:	set->sig[sig / _NSIG_BPW] &= ~(1 << (sig % _NSIG_BPW));
arch/x86/include/asm/signal.h:	return 1 & (set->sig[sig / _NSIG_BPW] >> (sig % _NSIG_BPW));
arch/x86/include/uapi/asm/bootparam.h:/* Gleaned from OFW's set-parameters in cpu/x86/pc/linux.fth */
arch/x86/kernel/cpu/microcode/amd.c:		pr_err("Patch-ID 0x%08x: chipset-specific code unsupported.\n",
arch/x86/kernel/fpu/regset.c: * as the "regset->n" for the xstate regset will be updated based on the feature
arch/x86/kernel/fpu/regset.c:	return target_fpu->initialized ? regset->n : 0;
arch/x86/kernel/fpu/regset.c:		return regset->n;
arch/x86/kernel/ftrace.c:/* 0x48 0x8b 0x15 <offset-to-ftrace_trace_op (4 bytes)> */
arch/x86/kernel/ptrace.c:	return target->thread.io_bitmap_max / regset->size;
arch/x86/kernel/signal.c:	if (setup_sigcontext(&frame->sc, fpstate, regs, set->sig[0]))
arch/x86/kernel/signal.c:		if (__copy_to_user(&frame->extramask, &set->sig[1],
arch/x86/kernel/signal.c:				regs, set->sig[0]);
arch/x86/kernel/signal.c:	err |= setup_sigcontext(&frame->uc.uc_mcontext, fp, regs, set->sig[0]);
arch/x86/kernel/signal.c:				regs, set->sig[0]);
arch/x86/kernel/smpboot.c:	 * topology_sibling_cpumask links to be set-up.
arch/x86/um/signal.c:			       set->sig[0]);
arch/x86/um/signal.c:		err |= __put_user(set->sig[0], &frame->uc.uc_sigmask.sig[0]);
arch/x86/um/signal.c:		err |= __put_user(set->sig[1], &frame->uc.uc_sigmask.sig[1]);
arch/xtensa/boot/boot-elf/Makefile:		--set-section-flags image=contents,alloc,load,load,data \
arch/xtensa/boot/boot-redboot/Makefile:		--set-section-flags image=contents,alloc,load,load,data \
arch/xtensa/include/asm/io.h:		return (void*)(offset-XCHAL_KIO_PADDR+XCHAL_KIO_BYPASS_VADDR);
arch/xtensa/include/asm/io.h:		return (void*)(offset-XCHAL_KIO_PADDR+XCHAL_KIO_CACHED_VADDR);
arch/xtensa/include/asm/processor.h: * Note: We set-up ps as if we did a call4 to the new pc.
arch/xtensa/kernel/ptrace.c:	__put_user(regs->pc, &gregset->pc);
arch/xtensa/kernel/ptrace.c:	__put_user(regs->ps & ~(1 << PS_EXCM_BIT), &gregset->ps);
arch/xtensa/kernel/ptrace.c:	__put_user(regs->lbeg, &gregset->lbeg);
arch/xtensa/kernel/ptrace.c:	__put_user(regs->lend, &gregset->lend);
arch/xtensa/kernel/ptrace.c:	__put_user(regs->lcount, &gregset->lcount);
arch/xtensa/kernel/ptrace.c:	__put_user(regs->windowstart, &gregset->windowstart);
arch/xtensa/kernel/ptrace.c:	__put_user(regs->windowbase, &gregset->windowbase);
arch/xtensa/kernel/ptrace.c:	__put_user(regs->threadptr, &gregset->threadptr);
arch/xtensa/kernel/ptrace.c:			   gregset->a + ((wb * 4 + i) % XCHAL_NUM_AREGS));
arch/xtensa/kernel/ptrace.c:	__get_user(regs->pc, &gregset->pc);
arch/xtensa/kernel/ptrace.c:	__get_user(ps, &gregset->ps);
arch/xtensa/kernel/ptrace.c:	__get_user(regs->lbeg, &gregset->lbeg);
arch/xtensa/kernel/ptrace.c:	__get_user(regs->lend, &gregset->lend);
arch/xtensa/kernel/ptrace.c:	__get_user(regs->lcount, &gregset->lcount);
arch/xtensa/kernel/ptrace.c:	__get_user(ws, &gregset->windowstart);
arch/xtensa/kernel/ptrace.c:	__get_user(wb, &gregset->windowbase);
arch/xtensa/kernel/ptrace.c:	__get_user(regs->threadptr, &gregset->threadptr);
arch/xtensa/kernel/ptrace.c:					gregset->a, wb * 16))
arch/xtensa/kernel/ptrace.c:	if (__copy_from_user(regs->areg, gregset->a + wb * 4,
block/blk-mq-rdma.c: * @set->nr_hw_queues, or @dev does not provide an affinity mask for a
block/blk-mq-sched.c:					       set->reserved_tags);
block/blk-mq-sched.c:		q->nr_requests = q->tag_set->queue_depth;
block/blk-mq-sched.c:	q->nr_requests = 2 * min_t(unsigned int, q->tag_set->queue_depth,
block/blk-mq-tag.c:	for (i = 0; i < tagset->nr_hw_queues; i++) {
block/blk-mq-tag.c:		if (tagset->tags && tagset->tags[i])
block/blk-mq-tag.c:			blk_mq_all_tag_busy_iter(tagset->tags[i], fn, priv);
block/blk-mq.h:	return q->queue_hw_ctx[q->tag_set->map[type].mq_map[cpu]];
block/blk-sysfs.c:	if (!q->tag_set || q->tag_set->nr_maps <= HCTX_TYPE_POLL ||
block/blk-sysfs.c:	    !q->tag_set->map[HCTX_TYPE_POLL].nr_queues)
block/bsg-lib.c:	ret = bset->job_fn(blk_mq_rq_to_pdu(req));
block/bsg-lib.c:		blk_mq_free_tag_set(&bset->tag_set);
block/bsg-lib.c:	if (!bset->timeout_fn)
block/bsg-lib.c:	return bset->timeout_fn(rq);
block/bsg-lib.c:	bset->job_fn = job_fn;
block/bsg-lib.c:	bset->timeout_fn = timeout;
block/bsg-lib.c:	set = &bset->tag_set;
block/bsg-lib.c:	set->ops = &bsg_mq_ops,
block/bsg-lib.c:	set->nr_hw_queues = 1;
block/bsg-lib.c:	set->queue_depth = 128;
block/bsg-lib.c:	set->numa_node = NUMA_NO_NODE;
block/bsg-lib.c:	set->cmd_size = sizeof(struct bsg_job) + dd_job_size;
block/bsg-lib.c:	set->flags = BLK_MQ_F_NO_SCHED | BLK_MQ_F_BLOCKING;
block/elevator.c:	if (q->tag_set && (q->tag_set->flags & BLK_MQ_F_NO_SCHED))
block/blk-mq.c:	if (tags->rqs && set->ops->exit_request) {
block/blk-mq.c:			set->ops->exit_request(set, rq, hctx_idx);
block/blk-mq.c:	node = blk_mq_hw_queue_to_node(&set->map[HCTX_TYPE_DEFAULT], hctx_idx);
block/blk-mq.c:		node = set->numa_node;
block/blk-mq.c:				BLK_MQ_FLAG_TO_ALLOC_POLICY(set->flags));
block/blk-mq.c:	if (set->ops->init_request) {
block/blk-mq.c:		ret = set->ops->init_request(set, rq, hctx_idx, node);
block/blk-mq.c:	node = blk_mq_hw_queue_to_node(&set->map[HCTX_TYPE_DEFAULT], hctx_idx);
block/blk-mq.c:		node = set->numa_node;
block/blk-mq.c:	rq_size = round_up(sizeof(struct request) + set->cmd_size,
block/blk-mq.c:	if (set->ops->exit_request)
block/blk-mq.c:		set->ops->exit_request(set, hctx->fq->flush_rq, hctx_idx);
block/blk-mq.c:	if (set->ops->exit_hctx)
block/blk-mq.c:		set->ops->exit_hctx(hctx, hctx_idx);
block/blk-mq.c:	if (tag_set->flags & BLK_MQ_F_BLOCKING)
block/blk-mq.c:	hctx->tags = set->tags[hctx_idx];               //赋值tags
block/blk-mq.c:	if (set->ops->init_hctx &&
block/blk-mq.c:	    set->ops->init_hctx(hctx, set->driver_data, hctx_idx))
block/blk-mq.c:	if (set->ops->exit_hctx)
block/blk-mq.c:		set->ops->exit_hctx(hctx, hctx_idx);
block/blk-mq.c:		node = set->numa_node;
block/blk-mq.c:	hctx->flags = set->flags & ~BLK_MQ_F_TAG_SHARED;
block/blk-mq.c:	hctx->fq = blk_alloc_flush_queue(q, hctx->numa_node, set->cmd_size, //分配flush fq
block/blk-mq.c:		for (j = 0; j < set->nr_maps; j++) {
block/blk-mq.c:	set->tags[hctx_idx] = blk_mq_alloc_rq_map(set, hctx_idx,        //分配一个tags, 并分配好request
block/blk-mq.c:					set->queue_depth, set->reserved_tags);
block/blk-mq.c:	if (!set->tags[hctx_idx])
block/blk-mq.c:	ret = blk_mq_alloc_rqs(set, set->tags[hctx_idx], hctx_idx,      
block/blk-mq.c:				set->queue_depth);
block/blk-mq.c:	blk_mq_free_rq_map(set->tags[hctx_idx]);
block/blk-mq.c:	set->tags[hctx_idx] = NULL;
block/blk-mq.c:	if (set->tags && set->tags[hctx_idx]) {
block/blk-mq.c:		blk_mq_free_rqs(set, set->tags[hctx_idx], hctx_idx);
block/blk-mq.c:		blk_mq_free_rq_map(set->tags[hctx_idx]);
block/blk-mq.c:		set->tags[hctx_idx] = NULL;
block/blk-mq.c:		hctx_idx = set->map[HCTX_TYPE_DEFAULT].mq_map[i];
block/blk-mq.c:		if (!set->tags[hctx_idx] &&
block/blk-mq.c:			set->map[HCTX_TYPE_DEFAULT].mq_map[i] = 0;
block/blk-mq.c:		for (j = 0; j < set->nr_maps; j++) {
block/blk-mq.c:			if (!set->map[j].nr_queues) {           // == 0 ?
block/blk-mq.c:			if (i && set->tags[i])
block/blk-mq.c:		hctx->tags = set->tags[i];
block/blk-mq.c:	lockdep_assert_held(&set->tag_list_lock);
block/blk-mq.c:	list_for_each_entry(q, &set->tag_list, tag_set_list) {
block/blk-mq.c:	mutex_lock(&set->tag_list_lock);
block/blk-mq.c:	if (list_is_singular(&set->tag_list)) {
block/blk-mq.c:		set->flags &= ~BLK_MQ_F_TAG_SHARED;
block/blk-mq.c:	mutex_unlock(&set->tag_list_lock);
block/blk-mq.c:	mutex_lock(&set->tag_list_lock);
block/blk-mq.c:	if (!list_empty(&set->tag_list) &&
block/blk-mq.c:	    !(set->flags & BLK_MQ_F_TAG_SHARED)) {
block/blk-mq.c:		set->flags |= BLK_MQ_F_TAG_SHARED;
block/blk-mq.c:	if (set->flags & BLK_MQ_F_TAG_SHARED)
block/blk-mq.c:	list_add_tail_rcu(&q->tag_set_list, &set->tag_list);        //能共享?
block/blk-mq.c:	mutex_unlock(&set->tag_list_lock);
block/blk-mq.c:	uninit_q = blk_alloc_queue_node(GFP_KERNEL, set->numa_node);
block/blk-mq.c:	set->ops = ops;
block/blk-mq.c:	set->nr_hw_queues = 1;
block/blk-mq.c:	set->nr_maps = 1;
block/blk-mq.c:	set->queue_depth = queue_depth;
block/blk-mq.c:	set->numa_node = NUMA_NO_NODE;
block/blk-mq.c:	set->flags = set_flags;
block/blk-mq.c:	for (i = 0; i < set->nr_hw_queues; i++) {       //硬件队列数
block/blk-mq.c:		node = blk_mq_hw_queue_to_node(&set->map[HCTX_TYPE_DEFAULT], i);
block/blk-mq.c:	if (i != set->nr_hw_queues) {
block/blk-mq.c:		q->nr_hw_queues = set->nr_hw_queues;
block/blk-mq.c:	if (set->nr_maps == 1)
block/blk-mq.c:	return max(set->nr_hw_queues, nr_cpu_ids);
block/blk-mq.c:	q->mq_ops = set->ops;
block/blk-mq.c:						GFP_KERNEL, set->numa_node);
block/blk-mq.c:	blk_queue_rq_timeout(q, set->timeout ? set->timeout : 30 * HZ);
block/blk-mq.c:	if (set->nr_maps > HCTX_TYPE_POLL &&
block/blk-mq.c:	    set->map[HCTX_TYPE_POLL].nr_queues)
block/blk-mq.c:	q->nr_requests = set->queue_depth;
block/blk-mq.c:	blk_mq_init_cpu_queues(q, set->nr_hw_queues);
block/blk-mq.c:	if (!(set->flags & BLK_MQ_F_NO_SCHED)) {
block/blk-mq.c:	blk_mq_exit_hw_queues(q, set, set->nr_hw_queues);
block/blk-mq.c:	for (i = 0; i < set->nr_hw_queues; i++)     //硬件队列
block/blk-mq.c:		blk_mq_free_rq_map(set->tags[i]);
block/blk-mq.c: * may reduce the depth asked for, if memory is tight. set->queue_depth
block/blk-mq.c:	depth = set->queue_depth;
block/blk-mq.c:		set->queue_depth >>= 1;
block/blk-mq.c:		if (set->queue_depth < set->reserved_tags + BLK_MQ_TAG_MIN) {
block/blk-mq.c:	} while (set->queue_depth);
block/blk-mq.c:	if (!set->queue_depth || err) {
block/blk-mq.c:	if (depth != set->queue_depth)
block/blk-mq.c:						depth, set->queue_depth);
block/blk-mq.c:	if (set->ops->map_queues && !is_kdump_kernel()) {
block/blk-mq.c:		 * for (queue = 0; queue < set->nr_hw_queues; queue++) {
block/blk-mq.c:		 * 		set->map[x].mq_map[cpu] = queue;
block/blk-mq.c:		for (i = 0; i < set->nr_maps; i++)
block/blk-mq.c:			blk_mq_clear_mq_map(&set->map[i]);
block/blk-mq.c:		return set->ops->map_queues(set);
block/blk-mq.c:		BUG_ON(set->nr_maps > 1);
block/blk-mq.c:		return blk_mq_map_queues(&set->map[HCTX_TYPE_DEFAULT]);
block/blk-mq.c: * value will be stored in set->queue_depth.
block/blk-mq.c:	if (!set->nr_hw_queues)
block/blk-mq.c:	if (!set->queue_depth)
block/blk-mq.c:	if (set->queue_depth < set->reserved_tags + BLK_MQ_TAG_MIN)
block/blk-mq.c:	if (!set->ops->queue_rq)
block/blk-mq.c:	if (!set->ops->get_budget ^ !set->ops->put_budget)
block/blk-mq.c:	if (set->queue_depth > BLK_MQ_MAX_DEPTH) {
block/blk-mq.c:		set->queue_depth = BLK_MQ_MAX_DEPTH;
block/blk-mq.c:	if (!set->nr_maps)
block/blk-mq.c:		set->nr_maps = 1;
block/blk-mq.c:	else if (set->nr_maps > HCTX_MAX_TYPES)
block/blk-mq.c:		set->nr_hw_queues = 1;
block/blk-mq.c:		set->nr_maps = 1;
block/blk-mq.c:		set->queue_depth = min(64U, set->queue_depth);
block/blk-mq.c:	if (set->nr_maps == 1 && set->nr_hw_queues > nr_cpu_ids)
block/blk-mq.c:		set->nr_hw_queues = nr_cpu_ids;
block/blk-mq.c:	set->tags = kcalloc_node(nr_hw_queues(set), sizeof(struct blk_mq_tags *),
block/blk-mq.c:				 GFP_KERNEL, set->numa_node);           //申请tags
block/blk-mq.c:	if (!set->tags)
block/blk-mq.c:	for (i = 0; i < set->nr_maps; i++) {                    //映射表的个数
block/blk-mq.c:		set->map[i].mq_map = kcalloc_node(nr_cpu_ids,       //cpu个数?
block/blk-mq.c:						  GFP_KERNEL, set->numa_node);
block/blk-mq.c:		if (!set->map[i].mq_map)
block/blk-mq.c:		set->map[i].nr_queues = is_kdump_kernel() ? 1 : set->nr_hw_queues;  //nr_queue == nr_hw_queues
block/blk-mq.c:	mutex_init(&set->tag_list_lock);
block/blk-mq.c:	INIT_LIST_HEAD(&set->tag_list);
block/blk-mq.c:	for (i = 0; i < set->nr_maps; i++) {
block/blk-mq.c:		kfree(set->map[i].mq_map);
block/blk-mq.c:		set->map[i].mq_map = NULL;
block/blk-mq.c:	kfree(set->tags);
block/blk-mq.c:	set->tags = NULL;
block/blk-mq.c:	for (j = 0; j < set->nr_maps; j++) {
block/blk-mq.c:		kfree(set->map[j].mq_map);
block/blk-mq.c:		set->map[j].mq_map = NULL;
block/blk-mq.c:	kfree(set->tags);
block/blk-mq.c:	set->tags = NULL;
block/blk-mq.c:	lockdep_assert_held(&set->tag_list_lock);
block/blk-mq.c:	if (set->nr_maps == 1 && nr_hw_queues > nr_cpu_ids)
block/blk-mq.c:	if (nr_hw_queues < 1 || nr_hw_queues == set->nr_hw_queues)
block/blk-mq.c:	list_for_each_entry(q, &set->tag_list, tag_set_list)
block/blk-mq.c:	list_for_each_entry(q, &set->tag_list, tag_set_list)
block/blk-mq.c:	list_for_each_entry(q, &set->tag_list, tag_set_list) {
block/blk-mq.c:	prev_nr_hw_queues = set->nr_hw_queues;
block/blk-mq.c:	set->nr_hw_queues = nr_hw_queues;
block/blk-mq.c:	list_for_each_entry(q, &set->tag_list, tag_set_list) {
block/blk-mq.c:		if (q->nr_hw_queues != set->nr_hw_queues) {
block/blk-mq.c:			set->nr_hw_queues = prev_nr_hw_queues;
block/blk-mq.c:			blk_mq_map_queues(&set->map[HCTX_TYPE_DEFAULT]);
block/blk-mq.c:	list_for_each_entry(q, &set->tag_list, tag_set_list) {
block/blk-mq.c:	list_for_each_entry(q, &set->tag_list, tag_set_list)
block/blk-mq.c:	list_for_each_entry(q, &set->tag_list, tag_set_list)
block/blk-mq.c:	mutex_lock(&set->tag_list_lock);
block/blk-mq.c:	mutex_unlock(&set->tag_list_lock);
drivers/acpi/apei/hest.c: * non-standard error sources to Linux (for example, chipset-specific
drivers/acpi/arm64/iort.c:	 * all SMMUs set-ups
drivers/acpi/nfit/core.c:	guid_copy(&nd_set->type_guid, (guid_t *) spa->range_guid);
drivers/acpi/nfit/core.c:	nd_set->cookie1 = nd_fletcher64(info, sizeof_nfit_set_info(nr), 0);
drivers/acpi/nfit/core.c:	nd_set->cookie2 = nd_fletcher64(info2, sizeof_nfit_set_info2(nr), 0);
drivers/acpi/nfit/core.c:	nd_set->altcookie = nd_fletcher64(info, sizeof_nfit_set_info(nr), 0);
drivers/ata/libata-core.c:	/* set up set-features taskfile */
drivers/ata/libata-core.c:	/* set up set-features taskfile */
drivers/ata/pata_sis.c:	ppi[0] = chipset->info;
drivers/atm/zatm.c:		    align+offset-1) & ~(unsigned long) (align-1))-offset)-
drivers/base/bus.c:		error = sysfs_create_link(&bus->p->devices_kset->kobj,
drivers/base/bus.c:	sysfs_remove_link(&bus->p->devices_kset->kobj, dev_name(dev));
drivers/base/bus.c:	sysfs_remove_link(&dev->bus->p->devices_kset->kobj,
drivers/base/bus.c:	return subsys_register(subsys, groups, &system_kset->kobj);
drivers/base/bus.c:	system_kset = kset_create_and_add("system", NULL, &devices_kset->kobj);
drivers/base/class.c:	cls->kobj = kobject_create_and_add(name, &class_kset->kobj);
drivers/base/core.c:	if (!kset->uevent_ops || !kset->uevent_ops->uevent)
drivers/base/core.c:	if (kset->uevent_ops && kset->uevent_ops->filter)
drivers/base/core.c:		if (!kset->uevent_ops->filter(kset, &dev->kobj))
drivers/base/core.c:	retval = kset->uevent_ops->uevent(kset, &dev->kobj, env);
drivers/base/core.c:	spin_lock(&devices_kset->list_lock);
drivers/base/core.c:	spin_unlock(&devices_kset->list_lock);
drivers/base/core.c:	spin_lock(&devices_kset->list_lock);
drivers/base/core.c:	spin_unlock(&devices_kset->list_lock);
drivers/base/core.c:	spin_lock(&devices_kset->list_lock);
drivers/base/core.c:	list_move_tail(&dev->kobj.entry, &devices_kset->list);
drivers/base/core.c:	spin_unlock(&devices_kset->list_lock);
drivers/base/core.c:						     &devices_kset->kobj);
drivers/base/core.c:	spin_lock(&devices_kset->list_lock);
drivers/base/core.c:	while (!list_empty(&devices_kset->list)) {
drivers/base/core.c:		dev = list_entry(devices_kset->list.prev, struct device,
drivers/base/core.c:		spin_unlock(&devices_kset->list_lock);
drivers/base/core.c:		spin_lock(&devices_kset->list_lock);
drivers/base/core.c:	spin_unlock(&devices_kset->list_lock);
drivers/base/property.c:	if (!pset || !pset->properties)
drivers/base/property.c:	for (prop = pset->properties; prop->name; prop++)
drivers/base/property.c:	property_entries_free(pset->properties);
drivers/base/property.c:	properties = property_entries_dup(pset->properties);
drivers/base/property.c:		if (pset && dev == pset->dev)
drivers/base/property.c:	if (pset && dev == pset->dev)
drivers/block/aoe/aoeblk.c:	set->ops = &aoeblk_mq_ops;
drivers/block/aoe/aoeblk.c:	set->cmd_size = sizeof(struct aoe_req);
drivers/block/aoe/aoeblk.c:	set->nr_hw_queues = 1;
drivers/block/aoe/aoeblk.c:	set->queue_depth = 128;
drivers/block/aoe/aoeblk.c:	set->numa_node = NUMA_NO_NODE;
drivers/block/aoe/aoeblk.c:	set->flags = BLK_MQ_F_SHOULD_MERGE;
drivers/block/drbd/drbd_actlog.c:	 * purge-all, set-all-idle, set-all-active, ... to-be-defined
drivers/block/drbd/drbd_debugfs.c:	seq_print_rq_state_bit(m, f & EE_MAY_SET_IN_SYNC, &sep, "set-in-sync");
drivers/block/loop.c:	 * Note: Global-for-all-devices, set-only-at-init, read-only module
drivers/block/mtip32xx/mtip32xx.c:	struct driver_data *dd = set->driver_data;
drivers/block/mtip32xx/mtip32xx.c:	struct driver_data *dd = set->driver_data;
drivers/block/nbd.c:	cmd->nbd = set->driver_data;
drivers/block/null_blk_main.c:	set->ops = &null_mq_ops;
drivers/block/null_blk_main.c:	set->nr_hw_queues = nullb ? nullb->dev->submit_queues :
drivers/block/null_blk_main.c:	set->queue_depth = nullb ? nullb->dev->hw_queue_depth :
drivers/block/null_blk_main.c:	set->numa_node = nullb ? nullb->dev->home_node : g_home_node;
drivers/block/null_blk_main.c:	set->cmd_size	= sizeof(struct nullb_cmd);
drivers/block/null_blk_main.c:	set->flags = BLK_MQ_F_SHOULD_MERGE;
drivers/block/null_blk_main.c:		set->flags |= BLK_MQ_F_NO_SCHED;
drivers/block/null_blk_main.c:	set->driver_data = NULL;
drivers/block/null_blk_main.c:		set->flags |= BLK_MQ_F_BLOCKING;
drivers/block/null_blk_main.c:		nullb->tag_set->timeout = 5 * HZ;
drivers/block/skd_main.c:	struct skd_device *skdev = set->driver_data;
drivers/block/skd_main.c:	struct skd_device *skdev = set->driver_data;
drivers/block/virtio_blk.c:	struct virtio_blk *vblk = set->driver_data;
drivers/block/virtio_blk.c:	struct virtio_blk *vblk = set->driver_data;
drivers/block/virtio_blk.c:	return blk_mq_virtio_map_queues(&set->map[0], vblk->vdev, 0);
drivers/bluetooth/hci_intel.c:	{ "reset-gpios", &reset_gpios, 1 },
drivers/bus/ti-sysc.c: * "ti,no-reset-on-init" device tree property.
drivers/bus/ti-sysc.c:	{ .name = "ti,no-reset-on-init",
drivers/clk/bcm/clk-bcm2835.c:	regset->regs = regs;
drivers/clk/bcm/clk-bcm2835.c:	regset->nregs = nregs;
drivers/clk/bcm/clk-bcm2835.c:	regset->base = cprman->regs + base;
drivers/clk/bcm/clk-iproc-pll.c:	val = readl(pll->control_base + reset->offset);
drivers/clk/bcm/clk-iproc-pll.c:		val |= BIT(reset->reset_shift) | BIT(reset->p_reset_shift);
drivers/clk/bcm/clk-iproc-pll.c:		val &= ~(BIT(reset->reset_shift) | BIT(reset->p_reset_shift));
drivers/clk/bcm/clk-iproc-pll.c:	iproc_pll_write(pll, pll->control_base, reset->offset, val);
drivers/clk/bcm/clk-iproc-pll.c:	val = readl(pll->control_base + reset->offset);
drivers/clk/bcm/clk-iproc-pll.c:		val &= ~(BIT(reset->reset_shift) | BIT(reset->p_reset_shift));
drivers/clk/bcm/clk-iproc-pll.c:		val |= BIT(reset->reset_shift) | BIT(reset->p_reset_shift);
drivers/clk/bcm/clk-iproc-pll.c:	iproc_pll_write(pll, pll->control_base, reset->offset, val);
drivers/clk/clk-aspeed.c:#include <linux/reset-controller.h>
drivers/clk/clk-gemini.c:#include <linux/reset-controller.h>
drivers/clk/clk-u300.c:	/* The MMC and MSPRO clocks need some special set-up */
drivers/clk/davinci/pll.c:	regset->regs = davinci_pll_regs;
drivers/clk/davinci/pll.c:	regset->nregs = ARRAY_SIZE(davinci_pll_regs);
drivers/clk/davinci/pll.c:	regset->base = pll->base;
drivers/clk/davinci/psc-da850.c:#include <linux/reset-controller.h>
drivers/clk/davinci/psc.c:#include <linux/reset-controller.h>
drivers/clk/hisilicon/reset.c:#include <linux/reset-controller.h>
drivers/clk/mediatek/reset.c:#include <linux/reset-controller.h>
drivers/clk/meson/axg-aoclk.c:#include <linux/reset-controller.h>
drivers/clk/meson/meson-aoclk.c:#include <linux/reset-controller.h>
drivers/clk/meson/meson-aoclk.h:#include <linux/reset-controller.h>
drivers/clk/meson/meson8b.c:#include <linux/reset-controller.h>
drivers/clk/meson/meson8b.c:	val = readl(meson8b_clk_reset->base + reset->reg);
drivers/clk/meson/meson8b.c:		val |= BIT(reset->bit_idx);
drivers/clk/meson/meson8b.c:		val &= ~BIT(reset->bit_idx);
drivers/clk/meson/meson8b.c:	writel(val, meson8b_clk_reset->base + reset->reg);
drivers/clk/meson/meson8b.c:	/* Generic clocks, PLLs and some of the reset-bits */
drivers/clk/mmp/reset.c:#include <linux/reset-controller.h>
drivers/clk/mmp/reset.h:#include <linux/reset-controller.h>
drivers/clk/qcom/common.c:#include <linux/reset-controller.h>
drivers/clk/qcom/common.c:	reset->rcdev.of_node = dev->of_node;
drivers/clk/qcom/common.c:	reset->rcdev.ops = &qcom_reset_ops;
drivers/clk/qcom/common.c:	reset->rcdev.owner = dev->driver->owner;
drivers/clk/qcom/common.c:	reset->rcdev.nr_resets = desc->num_resets;
drivers/clk/qcom/common.c:	reset->regmap = regmap;
drivers/clk/qcom/common.c:	reset->reset_map = desc->resets;
drivers/clk/qcom/common.c:	ret = devm_reset_controller_register(dev, &reset->rcdev);
drivers/clk/qcom/common.c:		ret = gdsc_register(scd, &reset->rcdev, regmap);
drivers/clk/qcom/gcc-apq8084.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-ipq4019.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-ipq806x.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-mdm9615.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-msm8660.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-msm8916.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-msm8960.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-msm8974.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-msm8996.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-msm8998.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gcc-sdm845.c:#include <linux/reset-controller.h>
drivers/clk/qcom/gdsc.c:#include <linux/reset-controller.h>
drivers/clk/qcom/mmcc-apq8084.c:#include <linux/reset-controller.h>
drivers/clk/qcom/mmcc-msm8960.c:#include <linux/reset-controller.h>
drivers/clk/qcom/mmcc-msm8974.c:#include <linux/reset-controller.h>
drivers/clk/qcom/mmcc-msm8996.c:#include <linux/reset-controller.h>
drivers/clk/qcom/reset.c:#include <linux/reset-controller.h>
drivers/clk/qcom/reset.h:#include <linux/reset-controller.h>
drivers/clk/renesas/renesas-cpg-mssr.c:#include <linux/reset-controller.h>
drivers/clk/rockchip/softrst.c:#include <linux/reset-controller.h>
drivers/clk/sirf/clk-atlas7.c:#include <linux/reset-controller.h>
drivers/clk/sirf/clk-atlas7.c:	spin_lock_irqsave(reset->lock, flags);
drivers/clk/sirf/clk-atlas7.c:	if (clkc_readl(reset->clk_ofs + 8) & (1 << reset->clk_bit)) {
drivers/clk/sirf/clk-atlas7.c:		clkc_writel(1 << reset->rst_bit, reset->rst_ofs + 4);
drivers/clk/sirf/clk-atlas7.c:		clkc_writel(1 << reset->clk_bit, reset->clk_ofs + 4);
drivers/clk/sirf/clk-atlas7.c:		clkc_writel(1 << reset->rst_bit, reset->rst_ofs);
drivers/clk/sirf/clk-atlas7.c:		clkc_writel(1 << reset->clk_bit, reset->clk_ofs);
drivers/clk/sirf/clk-atlas7.c:		clkc_writel(1 << reset->rst_bit, reset->rst_ofs + 4);
drivers/clk/sirf/clk-atlas7.c:		clkc_writel(1 << reset->clk_bit, reset->clk_ofs);
drivers/clk/sirf/clk-atlas7.c:		clkc_writel(1 << reset->clk_bit, reset->clk_ofs + 4);
drivers/clk/sirf/clk-atlas7.c:		clkc_writel(1 << reset->rst_bit, reset->rst_ofs);
drivers/clk/sirf/clk-atlas7.c:	spin_unlock_irqrestore(reset->lock, flags);
drivers/clk/sunxi-ng/ccu_common.c:	reset->rcdev.of_node = node;
drivers/clk/sunxi-ng/ccu_common.c:	reset->rcdev.ops = &ccu_reset_ops;
drivers/clk/sunxi-ng/ccu_common.c:	reset->rcdev.owner = THIS_MODULE;
drivers/clk/sunxi-ng/ccu_common.c:	reset->rcdev.nr_resets = desc->num_resets;
drivers/clk/sunxi-ng/ccu_common.c:	reset->base = reg;
drivers/clk/sunxi-ng/ccu_common.c:	reset->lock = &ccu_lock;
drivers/clk/sunxi-ng/ccu_common.c:	reset->reset_map = desc->resets;
drivers/clk/sunxi-ng/ccu_common.c:	ret = reset_controller_register(&reset->rcdev);
drivers/clk/sunxi-ng/ccu_reset.c:#include <linux/reset-controller.h>
drivers/clk/sunxi-ng/ccu_reset.h:#include <linux/reset-controller.h>
drivers/clk/sunxi/clk-a10-ve.c:#include <linux/reset-controller.h>
drivers/clk/sunxi/clk-sun4i-display.c:#include <linux/reset-controller.h>
drivers/clk/sunxi/clk-sun9i-mmc.c:#include <linux/reset-controller.h>
drivers/clk/sunxi/clk-sunxi.c:#include <linux/reset-controller.h>
drivers/clk/sunxi/clk-usb.c:#include <linux/reset-controller.h>
drivers/clk/tegra/clk.c:#include <linux/reset-controller.h>
drivers/clk/ti/clkt_dpll.c:	 * to the bitshift. Go through each set-bit in the mask and
drivers/clk/ti/divider.c:	if (of_property_read_bool(node, "ti,set-rate-parent"))
drivers/clk/ti/fixed-factor.c:	if (of_property_read_bool(node, "ti,set-rate-parent"))
drivers/clk/ti/gate.c:	if (of_property_read_bool(node, "ti,set-rate-parent"))
drivers/clk/ti/gate.c:	if (of_property_read_bool(node, "ti,set-bit-to-disable"))
drivers/clk/ti/mux.c:	if (of_property_read_bool(node, "ti,set-rate-parent"))
drivers/cpufreq/cpufreq_governor.c:	list_for_each_entry(policy_dbs, &attr_set->policy_list, list) {
drivers/cpufreq/cpufreq_governor_attr_set.c:	mutex_lock(&attr_set->update_lock);
drivers/cpufreq/cpufreq_governor_attr_set.c:	ret = attr_set->usage_count ? gattr->store(attr_set, buf, count) : -EBUSY;
drivers/cpufreq/cpufreq_governor_attr_set.c:	mutex_unlock(&attr_set->update_lock);
drivers/cpufreq/cpufreq_governor_attr_set.c:	INIT_LIST_HEAD(&attr_set->policy_list);
drivers/cpufreq/cpufreq_governor_attr_set.c:	mutex_init(&attr_set->update_lock);
drivers/cpufreq/cpufreq_governor_attr_set.c:	attr_set->usage_count = 1;
drivers/cpufreq/cpufreq_governor_attr_set.c:	list_add(list_node, &attr_set->policy_list);
drivers/cpufreq/cpufreq_governor_attr_set.c:	mutex_lock(&attr_set->update_lock);
drivers/cpufreq/cpufreq_governor_attr_set.c:	attr_set->usage_count++;
drivers/cpufreq/cpufreq_governor_attr_set.c:	list_add(list_node, &attr_set->policy_list);
drivers/cpufreq/cpufreq_governor_attr_set.c:	mutex_unlock(&attr_set->update_lock);
drivers/cpufreq/cpufreq_governor_attr_set.c:	mutex_lock(&attr_set->update_lock);
drivers/cpufreq/cpufreq_governor_attr_set.c:	count = --attr_set->usage_count;
drivers/cpufreq/cpufreq_governor_attr_set.c:	mutex_unlock(&attr_set->update_lock);
drivers/cpufreq/cpufreq_governor_attr_set.c:	kobject_put(&attr_set->kobj);
drivers/cpufreq/cpufreq_governor_attr_set.c:	mutex_destroy(&attr_set->update_lock);
drivers/cpufreq/cpufreq_ondemand.c:	list_for_each_entry(policy_dbs, &attr_set->policy_list, list) {
drivers/cpufreq/cpufreq_ondemand.c:	list_for_each_entry(policy_dbs, &attr_set->policy_list, list)
drivers/cpufreq/pcc-cpufreq.c:	if (!offset || offset->type != ACPI_TYPE_INTEGER) {
drivers/cpufreq/pcc-cpufreq.c:	pcc_cpu_data->input_offset = offset->integer.value;
drivers/cpufreq/pcc-cpufreq.c:	if (!offset || offset->type != ACPI_TYPE_INTEGER) {
drivers/cpufreq/pcc-cpufreq.c:	pcc_cpu_data->output_offset = offset->integer.value;
drivers/cpufreq/pmac64-cpufreq.c:		pfunc_set_vdnap0 = pmf_find_function(root, "set-vdnap0");
drivers/cpufreq/pmac64-cpufreq.c:		pmf_find_function(hwclock, "set-frequency-high");
drivers/cpufreq/pmac64-cpufreq.c:		pmf_find_function(hwclock, "set-frequency-low");
drivers/cpufreq/pmac64-cpufreq.c:		pmf_find_function(hwclock, "set-voltage-high-0");
drivers/cpufreq/pmac64-cpufreq.c:		pmf_find_function(hwclock, "set-voltage-low-0");
drivers/cpufreq/pmac64-cpufreq.c:		pmf_find_function(hwclock, "set-voltage-high-1");
drivers/cpufreq/pmac64-cpufreq.c:		pmf_find_function(hwclock, "set-voltage-low-1");
drivers/cpufreq/pmac64-cpufreq.c:	/* Note: The device tree also contains a "platform-set-values"
drivers/crypto/ccree/cc_debugfs.c:	regset->regs = debug_regs;
drivers/crypto/ccree/cc_debugfs.c:	regset->nregs = ARRAY_SIZE(debug_regs);
drivers/crypto/ccree/cc_debugfs.c:	regset->base = drvdata->cc_base;
drivers/dma/ppc4xx/adma.c:			 * So, for P case set-up mult=1 explicitly.
drivers/dma/qcom/hidma_mgmt.c:				      "channel-reset-timeout-cycles",
drivers/dma/ti/edma.c:	struct edmacc_param *param = &epset->param;
drivers/dma/ti/edma.c:	epset->len = dma_length;
drivers/dma/ti/edma.c:		epset->addr = src_addr;
drivers/dma/ti/edma.c:		epset->addr = dst_addr;
drivers/dma/ti/edma.c:		done = pos - pset->addr;
drivers/dma/ti/edma.c:		if (pos >= pset->addr && pos < pset->addr + pset->len)
drivers/dma/ti/edma.c:			return edesc->residue_stat - (pos - pset->addr);
drivers/dma/ti/edma.c:		edesc->residue_stat -= pset->len;
drivers/edac/e7xxx_edac.c: *	http://www.intel.com/content/www/us/en/chipsets/e7501-chipset-memory-controller-hub-datasheet.html
drivers/firmware/efi/efivars.c:	error = sysfs_create_bin_file(&efivars_kset->kobj, efivars_new_var);
drivers/firmware/efi/efivars.c:	error = sysfs_create_bin_file(&efivars_kset->kobj, efivars_del_var);
drivers/firmware/efi/efivars.c:		sysfs_remove_bin_file(&efivars_kset->kobj, efivars_new_var);
drivers/firmware/efi/efivars.c:		sysfs_remove_bin_file(&efivars_kset->kobj, efivars_new_var);
drivers/firmware/efi/efivars.c:		sysfs_remove_bin_file(&efivars_kset->kobj, efivars_del_var);
drivers/firmware/iscsi_ibft.c:				 &boot_kset->kobj_list, list) {
drivers/firmware/qcom_scm.c:#include <linux/reset-controller.h>
drivers/firmware/qemu_fw_cfg.c:	list_for_each_entry_safe(k, next, &kset->list, entry)
drivers/firmware/qemu_fw_cfg.c:		if (k->ktype == kset->kobj.ktype)
drivers/gpio/gpio-104-idio-16.c:	const unsigned mask = BIT(offset-16);
drivers/gpio/gpio-ich.c:	struct ichx_desc *desc;	/* Pointer to chipset-specific description */
drivers/gpio/gpio-xra1403.c:		dev_warn(&spi->dev, "Could not get reset-gpios\n");
drivers/gpio/gpiolib.c:	 * No set-up of the hardware will happen if IRQ_TYPE_NONE
drivers/gpu/drm/Kconfig:	  You are recommended to use the safe modeset-only drivers instead, and
drivers/gpu/drm/amd/amdgpu/amdgpu_display.c:	if (!set || !set->crtc)
drivers/gpu/drm/amd/amdgpu/amdgpu_display.c:	dev = set->crtc->dev;
drivers/gpu/drm/amd/amdkfd/kfd_events.h: * For the sake of easy memset-ing, this must be a byte pattern.
drivers/gpu/drm/amd/include/atombios.h:  UCHAR                       ucGPIO_PinState;        // Pin state showing how to set-up the pin
drivers/gpu/drm/amd/include/atombios.h:  UCHAR                      ucDefaultMVDDQ_ID; // Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;
drivers/gpu/drm/amd/include/atombios.h:  UCHAR                      ucDefaultMVDDC_ID; // Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;
drivers/gpu/drm/amd/include/atombios.h:  UCHAR                      ucDefaultMVDDQ_ID; // Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;
drivers/gpu/drm/amd/include/atombios.h:  UCHAR                      ucDefaultMVDDC_ID; // Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;
drivers/gpu/drm/amd/include/atomfirmware.h:  uint8_t gpio_pinstate;         // Pin state showing how to set-up the pin
drivers/gpu/drm/bridge/sii902x.c:	/* The datasheet says treset-min = 100us. Make it 150us to be sure. */
drivers/gpu/drm/drm_atomic_helper.c:	struct drm_device *dev = set->crtc->dev;
drivers/gpu/drm/drm_atomic_helper.c:	ret = drm_atomic_add_affected_connectors(state, set->crtc);
drivers/gpu/drm/drm_atomic_helper.c:		if (new_conn_state->crtc == set->crtc) {
drivers/gpu/drm/drm_atomic_helper.c:	/* Then set all connectors from set->connectors on the target crtc */
drivers/gpu/drm/drm_atomic_helper.c:	for (i = 0; i < set->num_connectors; i++) {
drivers/gpu/drm/drm_atomic_helper.c:							    set->connectors[i]);
drivers/gpu/drm/drm_atomic_helper.c:							set->crtc);
drivers/gpu/drm/drm_atomic_helper.c:		if (crtc == set->crtc)
drivers/gpu/drm/drm_atomic_helper.c:	struct drm_crtc *crtc = set->crtc;
drivers/gpu/drm/drm_atomic_helper.c:	struct drm_crtc *crtc = set->crtc;
drivers/gpu/drm/drm_atomic_helper.c:	if (!set->mode) {
drivers/gpu/drm/drm_atomic_helper.c:		WARN_ON(set->fb);
drivers/gpu/drm/drm_atomic_helper.c:		WARN_ON(set->num_connectors);
drivers/gpu/drm/drm_atomic_helper.c:	WARN_ON(!set->fb);
drivers/gpu/drm/drm_atomic_helper.c:	WARN_ON(!set->num_connectors);
drivers/gpu/drm/drm_atomic_helper.c:	ret = drm_atomic_set_mode_for_crtc(crtc_state, set->mode);
drivers/gpu/drm/drm_atomic_helper.c:	drm_mode_get_hv_timing(set->mode, &hdisplay, &vdisplay);
drivers/gpu/drm/drm_atomic_helper.c:	drm_atomic_set_fb_for_plane(primary_state, set->fb);
drivers/gpu/drm/drm_atomic_helper.c:	primary_state->src_x = set->x << 16;
drivers/gpu/drm/drm_atomic_helper.c:	primary_state->src_y = set->y << 16;
drivers/gpu/drm/drm_crtc.c:	struct drm_crtc *crtc = set->crtc;
drivers/gpu/drm/drm_crtc.c:	fb = set->fb;
drivers/gpu/drm/drm_crtc.c:	WARN_ON(drm_drv_uses_atomic_modeset(set->crtc->dev));
drivers/gpu/drm/drm_crtc_helper.c:	BUG_ON(!set->crtc);
drivers/gpu/drm/drm_crtc_helper.c:	BUG_ON(!set->crtc->helper_private);
drivers/gpu/drm/drm_crtc_helper.c:	BUG_ON(!set->mode && set->fb);
drivers/gpu/drm/drm_crtc_helper.c:	BUG_ON(set->fb && set->num_connectors == 0);
drivers/gpu/drm/drm_crtc_helper.c:	crtc_funcs = set->crtc->helper_private;
drivers/gpu/drm/drm_crtc_helper.c:	dev = set->crtc->dev;
drivers/gpu/drm/drm_crtc_helper.c:	if (!set->mode)
drivers/gpu/drm/drm_crtc_helper.c:		set->fb = NULL;
drivers/gpu/drm/drm_crtc_helper.c:	if (set->fb) {
drivers/gpu/drm/drm_crtc_helper.c:			      set->crtc->base.id, set->crtc->name,
drivers/gpu/drm/drm_crtc_helper.c:			      set->fb->base.id,
drivers/gpu/drm/drm_crtc_helper.c:			      (int)set->num_connectors, set->x, set->y);
drivers/gpu/drm/drm_crtc_helper.c:			      set->crtc->base.id, set->crtc->name);
drivers/gpu/drm/drm_crtc_helper.c:		drm_crtc_helper_disable(set->crtc);
drivers/gpu/drm/drm_crtc_helper.c:	save_set.crtc = set->crtc;
drivers/gpu/drm/drm_crtc_helper.c:	save_set.mode = &set->crtc->mode;
drivers/gpu/drm/drm_crtc_helper.c:	save_set.x = set->crtc->x;
drivers/gpu/drm/drm_crtc_helper.c:	save_set.y = set->crtc->y;
drivers/gpu/drm/drm_crtc_helper.c:	save_set.fb = set->crtc->primary->fb;
drivers/gpu/drm/drm_crtc_helper.c:	if (set->crtc->primary->fb != set->fb) {
drivers/gpu/drm/drm_crtc_helper.c:		if (set->crtc->primary->fb == NULL) {
drivers/gpu/drm/drm_crtc_helper.c:		} else if (set->fb->format != set->crtc->primary->fb->format) {
drivers/gpu/drm/drm_crtc_helper.c:	if (set->x != set->crtc->x || set->y != set->crtc->y)
drivers/gpu/drm/drm_crtc_helper.c:	if (!drm_mode_equal(set->mode, &set->crtc->mode)) {
drivers/gpu/drm/drm_crtc_helper.c:		drm_mode_debug_printmodeline(&set->crtc->mode);
drivers/gpu/drm/drm_crtc_helper.c:		drm_mode_debug_printmodeline(set->mode);
drivers/gpu/drm/drm_crtc_helper.c:	for (ro = 0; ro < set->num_connectors; ro++) {
drivers/gpu/drm/drm_crtc_helper.c:		if (set->connectors[ro]->encoder)
drivers/gpu/drm/drm_crtc_helper.c:		drm_connector_get(set->connectors[ro]);
drivers/gpu/drm/drm_crtc_helper.c:		for (ro = 0; ro < set->num_connectors; ro++) {
drivers/gpu/drm/drm_crtc_helper.c:			if (set->connectors[ro] == connector) {
drivers/gpu/drm/drm_crtc_helper.c:		if (connector->encoder->crtc == set->crtc)
drivers/gpu/drm/drm_crtc_helper.c:		for (ro = 0; ro < set->num_connectors; ro++) {
drivers/gpu/drm/drm_crtc_helper.c:			if (set->connectors[ro] == connector)
drivers/gpu/drm/drm_crtc_helper.c:				new_crtc = set->crtc;
drivers/gpu/drm/drm_crtc_helper.c:		if (drm_helper_crtc_in_use(set->crtc)) {
drivers/gpu/drm/drm_crtc_helper.c:			drm_mode_debug_printmodeline(set->mode);
drivers/gpu/drm/drm_crtc_helper.c:			set->crtc->primary->fb = set->fb;
drivers/gpu/drm/drm_crtc_helper.c:			if (!drm_crtc_helper_set_mode(set->crtc, set->mode,
drivers/gpu/drm/drm_crtc_helper.c:						      set->x, set->y,
drivers/gpu/drm/drm_crtc_helper.c:					  set->crtc->base.id, set->crtc->name);
drivers/gpu/drm/drm_crtc_helper.c:				set->crtc->primary->fb = save_set.fb;
drivers/gpu/drm/drm_crtc_helper.c:			for (i = 0; i < set->num_connectors; i++) {
drivers/gpu/drm/drm_crtc_helper.c:				DRM_DEBUG_KMS("\t[CONNECTOR:%d:%s] set DPMS on\n", set->connectors[i]->base.id,
drivers/gpu/drm/drm_crtc_helper.c:					      set->connectors[i]->name);
drivers/gpu/drm/drm_crtc_helper.c:				set->connectors[i]->funcs->dpms(set->connectors[i], DRM_MODE_DPMS_ON);
drivers/gpu/drm/drm_crtc_helper.c:		set->crtc->x = set->x;
drivers/gpu/drm/drm_crtc_helper.c:		set->crtc->y = set->y;
drivers/gpu/drm/drm_crtc_helper.c:		set->crtc->primary->fb = set->fb;
drivers/gpu/drm/drm_crtc_helper.c:		ret = crtc_funcs->mode_set_base(set->crtc,
drivers/gpu/drm/drm_crtc_helper.c:						set->x, set->y, save_set.fb);
drivers/gpu/drm/drm_crtc_helper.c:			set->crtc->x = save_set.x;
drivers/gpu/drm/drm_crtc_helper.c:			set->crtc->y = save_set.y;
drivers/gpu/drm/drm_crtc_helper.c:			set->crtc->primary->fb = save_set.fb;
drivers/gpu/drm/drm_crtc_helper.c:	for (ro = 0; ro < set->num_connectors; ro++) {
drivers/gpu/drm/drm_crtc_helper.c:		if (set->connectors[ro]->encoder)
drivers/gpu/drm/drm_crtc_helper.c:		drm_connector_put(set->connectors[ro]);
drivers/gpu/drm/drm_fb_helper.c:			if (!mode_set->crtc->enabled)
drivers/gpu/drm/drm_fb_helper.c:			funcs =	mode_set->crtc->helper_private;
drivers/gpu/drm/drm_fb_helper.c:			if (drm_drv_uses_atomic_modeset(mode_set->crtc->dev))
drivers/gpu/drm/drm_fb_helper.c:			funcs->mode_set_base_atomic(mode_set->crtc,
drivers/gpu/drm/drm_fb_helper.c:						    mode_set->fb,
drivers/gpu/drm/drm_fb_helper.c:						    mode_set->x,
drivers/gpu/drm/drm_fb_helper.c:						    mode_set->y,
drivers/gpu/drm/drm_fb_helper.c:		crtc = mode_set->crtc;
drivers/gpu/drm/drm_fb_helper.c:		drm_fb_helper_restore_lut_atomic(mode_set->crtc);
drivers/gpu/drm/drm_fb_helper.c:		funcs->mode_set_base_atomic(mode_set->crtc, fb, crtc->x,
drivers/gpu/drm/drm_fb_helper.c:		struct drm_plane *primary = mode_set->crtc->primary;
drivers/gpu/drm/drm_fb_helper.c:			struct drm_crtc *crtc = mode_set->crtc;
drivers/gpu/drm/drm_fb_helper.c:		struct drm_crtc *crtc = mode_set->crtc;
drivers/gpu/drm/drm_fb_helper.c:	for (i = 0; i < modeset->num_connectors; i++) {
drivers/gpu/drm/drm_fb_helper.c:		drm_connector_put(modeset->connectors[i]);
drivers/gpu/drm/drm_fb_helper.c:		modeset->connectors[i] = NULL;
drivers/gpu/drm/drm_fb_helper.c:	modeset->num_connectors = 0;
drivers/gpu/drm/drm_fb_helper.c:	drm_mode_destroy(helper->dev, modeset->mode);
drivers/gpu/drm/drm_fb_helper.c:	modeset->mode = NULL;
drivers/gpu/drm/drm_fb_helper.c:	modeset->fb = NULL;
drivers/gpu/drm/drm_fb_helper.c:		kfree(modeset->connectors);
drivers/gpu/drm/drm_fb_helper.c:		crtc = mode_set->crtc;
drivers/gpu/drm/drm_fb_helper.c:		mode_set->x = x;
drivers/gpu/drm/drm_fb_helper.c:		mode_set->y = y;
drivers/gpu/drm/drm_fb_helper.c:		modeset->x = var->xoffset;
drivers/gpu/drm/drm_fb_helper.c:		modeset->y = var->yoffset;
drivers/gpu/drm/drm_fb_helper.c:		if (modeset->num_connectors) {
drivers/gpu/drm/drm_fb_helper.c:		struct drm_crtc *crtc = mode_set->crtc;
drivers/gpu/drm/drm_fb_helper.c:		for (j = 0; j < mode_set->num_connectors; j++) {
drivers/gpu/drm/drm_fb_helper.c:			struct drm_connector *connector = mode_set->connectors[j];
drivers/gpu/drm/drm_fb_helper.c:				      mode->name, fb_crtc->mode_set.crtc->base.id, offset->x, offset->y);
drivers/gpu/drm/drm_fb_helper.c:			fb_crtc->x = offset->x;
drivers/gpu/drm/drm_fb_helper.c:			fb_crtc->y = offset->y;
drivers/gpu/drm/drm_fb_helper.c:			modeset->mode = drm_mode_duplicate(dev,
drivers/gpu/drm/drm_fb_helper.c:			modeset->connectors[modeset->num_connectors++] = connector;
drivers/gpu/drm/drm_fb_helper.c:			modeset->x = offset->x;
drivers/gpu/drm/drm_fb_helper.c:			modeset->y = offset->y;
drivers/gpu/drm/drm_mm.c: * This functions inserts an already set-up &drm_mm_node into the allocator,
drivers/gpu/drm/drm_mm.c: * preallocated objects which must be set-up before the range allocator can be
drivers/gpu/drm/drm_mm.c: * set-up, e.g. when taking over a firmware framebuffer.
drivers/gpu/drm/drm_vblank.c:	pipe = modeset->crtc;
drivers/gpu/drm/drm_vblank.c:	switch (modeset->cmd) {
drivers/gpu/drm/drm_vma_manager.c: * drm_vma_offset_manager_init - Initialize new offset-manager
drivers/gpu/drm/drm_vma_manager.c: * Initialize a new offset-manager. The offset and area size available for the
drivers/gpu/drm/drm_vma_manager.c: * Add a node to the offset-manager. If the node was already added, this does
drivers/gpu/drm/drm_vma_manager.c: * not added to any offset-manager.
drivers/gpu/drm/gma500/gma_display.c:	struct drm_device *dev = set->crtc->dev;
drivers/gpu/drm/i915/Makefile:subdir-ccflags-y += $(call cc-disable-warning, unused-but-set-variable)
drivers/gpu/drm/i915/i915_active.h: * implicit synchronisation around GEM objects, e.g. set-domain will wait
drivers/gpu/drm/i915/i915_drv.c:	 * Some ports require correctly set-up hpd registers for detection to
drivers/gpu/drm/i915/i915_gem.c:	rcu_read_lock(); /* RCU serialisation for set-wedged protection */
drivers/gpu/drm/i915/i915_gem.c:	 * a call to set-domain may still stall waiting for foreign rendering.
drivers/gpu/drm/i915/i915_gem_execbuffer.c: * write (either via mmaps using set-domain, or via pwrite) must flush all GPU
drivers/gpu/drm/i915/i915_gem_execbuffer.c: * reads before starting, and any read (either using set-domain or pread) must
drivers/gpu/drm/i915/i915_gem_userptr.c: * through the normal set-domain-ioctl. The kernel will enforce that the
drivers/gpu/drm/i915/i915_request.c:	rcu_read_lock(); /* RCU serialisation for set-wedged protection */
drivers/gpu/drm/i915/i915_reset.c:	/* Prevent any other reset-engine attempt. */
drivers/gpu/drm/i915/intel_ringbuffer.c: * set-context and then emitting the batch.
drivers/gpu/drm/i915/intel_sprite.c:	    set->flags & I915_SET_COLORKEY_SOURCE)
drivers/gpu/drm/i915/intel_sprite.c:	    set->flags & I915_SET_COLORKEY_DESTINATION)
drivers/gpu/drm/i915/intel_sprite.c:	set->flags &= ~I915_SET_COLORKEY_NONE;
drivers/gpu/drm/i915/intel_sprite.c:	if (set->flags & ~(I915_SET_COLORKEY_DESTINATION | I915_SET_COLORKEY_SOURCE))
drivers/gpu/drm/i915/intel_sprite.c:	if ((set->flags & (I915_SET_COLORKEY_DESTINATION | I915_SET_COLORKEY_SOURCE)) == (I915_SET_COLORKEY_DESTINATION | I915_SET_COLORKEY_SOURCE))
drivers/gpu/drm/i915/intel_sprite.c:	    set->flags & I915_SET_COLORKEY_DESTINATION)
drivers/gpu/drm/i915/intel_sprite.c:	plane = drm_plane_find(dev, file_priv, set->plane_id);
drivers/gpu/drm/i915/intel_sprite.c:	    set->flags & I915_SET_COLORKEY_DESTINATION)
drivers/gpu/drm/i915/intel_uc_fw.c:		DRM_DEBUG_DRIVER("%s fw set-domain err=%d\n",
drivers/gpu/drm/i915/selftests/i915_gem_context.c:		{ .name = "reset-idle", .flags = TEST_RESET | TEST_IDLE },
drivers/gpu/drm/msm/adreno/adreno_gpu.c:		/* Dummy set-constant to trigger context rollover */
drivers/gpu/drm/nouveau/dispnv04/crtc.c:	if (!set || !set->crtc)
drivers/gpu/drm/nouveau/dispnv04/crtc.c:	dev = set->crtc->dev;
drivers/gpu/drm/nouveau/include/nvif/cl0002.h:	/* ... chipset-specific class data */
drivers/gpu/drm/nouveau/nvkm/engine/gr/priv.h:	/* Returns chipset-specific counts of units packed into an u64.
drivers/gpu/drm/omapdrm/displays/panel-nec-nl8048hl11.c:	gpio = of_get_named_gpio(node, "reset-gpios", 0);
drivers/gpu/drm/omapdrm/displays/panel-sony-acx565akm.c:	ddata->reset_gpio = of_get_named_gpio(np, "reset-gpios", 0);
drivers/gpu/drm/omapdrm/displays/panel-tpo-td043mtea1.c:	gpio = of_get_named_gpio(node, "reset-gpios", 0);
drivers/gpu/drm/panel/panel-jdi-lt070me05000.c:		dev_err(dev, "cannot get reset-gpios %d\n", ret);
drivers/gpu/drm/panel/panel-orisetech-otm8009a.c:		dev_err(dev, "cannot get reset-gpio\n");
drivers/gpu/drm/panel/panel-samsung-ld9040.c:	of_property_read_u32(np, "reset-delay", &ctx->reset_delay);
drivers/gpu/drm/panel/panel-samsung-ld9040.c:		dev_err(dev, "cannot get reset-gpios %ld\n",
drivers/gpu/drm/panel/panel-samsung-s6e3ha2.c:		dev_err(dev, "cannot get reset-gpios %ld\n",
drivers/gpu/drm/panel/panel-samsung-s6e63j0x03.c:		dev_err(dev, "cannot get reset-gpio: %ld\n",
drivers/gpu/drm/panel/panel-samsung-s6e8aa0.c:	of_property_read_u32(np, "reset-delay", &ctx->reset_delay);
drivers/gpu/drm/panel/panel-samsung-s6e8aa0.c:		dev_err(dev, "cannot get reset-gpios %ld\n",
drivers/gpu/drm/panel/panel-sharp-ls043t1le01.c:		dev_err(dev, "cannot get reset-gpios %ld\n",
drivers/gpu/drm/radeon/atombios.h:  UCHAR                       ucGPIO_PinState;        // Pin state showing how to set-up the pin
drivers/gpu/drm/radeon/atombios.h:  UCHAR                      ucDefaultMVDDQ_ID; // Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;
drivers/gpu/drm/radeon/atombios.h:  UCHAR                      ucDefaultMVDDC_ID; // Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;
drivers/gpu/drm/radeon/atombios.h:  UCHAR                      ucDefaultMVDDQ_ID; // Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;
drivers/gpu/drm/radeon/atombios.h:  UCHAR                      ucDefaultMVDDC_ID; // Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;
drivers/gpu/drm/radeon/mkregtable.c:		INIT_LIST_HEAD(&offset->list);
drivers/gpu/drm/radeon/mkregtable.c:		offset->offset = o;
drivers/gpu/drm/radeon/mkregtable.c:	list_add_tail(&offset->list, &t->offsets);
drivers/gpu/drm/radeon/mkregtable.c:		i = (offset->offset >> 2) / 32;
drivers/gpu/drm/radeon/mkregtable.c:		m = (offset->offset >> 2) & 31;
drivers/gpu/drm/radeon/radeon_display.c:	if (!set || !set->crtc)
drivers/gpu/drm/radeon/radeon_display.c:	dev = set->crtc->dev;
drivers/gpu/drm/selftests/Makefile:test-drm_modeset-y := test-drm_modeset_common.o test-drm_plane_helper.o \
drivers/gpu/drm/vmwgfx/vmwgfx_blit.c: * reference already set-up mappings.
drivers/gpu/drm/vmwgfx/vmwgfx_fb.c:	struct drm_crtc *crtc = set->crtc;
drivers/gpu/drm/vmwgfx/vmwgfx_kms.c: * vmw_kms_atomic_check_modeset- validate state object for modeset changes
drivers/gpu/drm/vmwgfx/vmwgfx_surface.c:		body->guest.ptr.offset += cur_offset->bo_offset;
drivers/gpu/drm/vmwgfx/vmwgfx_surface.c:		body->host.face = cur_offset->face;
drivers/gpu/drm/vmwgfx/vmwgfx_surface.c:		body->host.mipmap = cur_offset->mip;
drivers/gpu/drm/vmwgfx/vmwgfx_surface.c:			cur_offset->face = i;
drivers/gpu/drm/vmwgfx/vmwgfx_surface.c:			cur_offset->mip = j;
drivers/gpu/drm/vmwgfx/vmwgfx_surface.c:			cur_offset->bo_offset = cur_bo_offset;
drivers/hid/Kconfig:	  and Mac Pros. This receiver is also used in the Apple TV set-top box
drivers/i2c/busses/i2c-exynos5.c:		dev_err(i2c->dev, "%s clock set-up failed\n",
drivers/i2c/busses/i2c-pca-platform.c:	dev_warn(&i2c->adap.dev, "No reset-pin found. Chip may get stuck!\n");
drivers/i2c/busses/i2c-pca-platform.c:	i2c->gpio = devm_gpiod_get_optional(&pdev->dev, "reset-gpios", GPIOD_OUT_LOW);
drivers/i2c/busses/i2c-rk3x.c: * @min_setup_start_ns: min set-up time for a repeated START conditio
drivers/i2c/busses/i2c-rk3x.c: * @min_data_setup_ns: min data set-up time
drivers/i2c/busses/i2c-rk3x.c: * @min_setup_stop_ns: min set-up time for STOP condition
drivers/ide/ide-probe.c:	set->ops = &ide_mq_ops;
drivers/ide/ide-probe.c:	set->nr_hw_queues = 1;
drivers/ide/ide-probe.c:	set->queue_depth = 32;
drivers/ide/ide-probe.c:	set->reserved_tags = 1;
drivers/ide/ide-probe.c:	set->cmd_size = sizeof(struct ide_request);
drivers/ide/ide-probe.c:	set->numa_node = hwif_to_node(hwif);
drivers/ide/ide-probe.c:	set->flags = BLK_MQ_F_SHOULD_MERGE | BLK_MQ_F_BLOCKING;
drivers/iio/common/ssp_sensors/ssp_dev.c:	data->mcu_reset_gpio = of_get_named_gpio(node, "mcu-reset-gpios", 0);
drivers/iio/common/ssp_sensors/ssp_dev.c:				    GPIOF_OUT_INIT_HIGH, "mcu-reset-gpios");
drivers/iio/light/cm3605.c:	ret = of_property_read_u32(np, "capella,aset-resistance-ohms", &rset);
drivers/iio/light/tsl2583.c:			offset--;
drivers/iio/light/tsl2772.c:			offset--;
drivers/iio/proximity/sx9500.c:	{ "reset-gpios", &reset_gpios, 1 },
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_clear(&set->mask);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_clear(&set->used);
drivers/infiniband/hw/hfi1/affinity.c:	set->gen = 0;
drivers/infiniband/hw/hfi1/affinity.c:	if (cpumask_equal(&set->mask, &set->used)) {
drivers/infiniband/hw/hfi1/affinity.c:		set->gen++;
drivers/infiniband/hw/hfi1/affinity.c:		cpumask_clear(&set->used);
drivers/infiniband/hw/hfi1/affinity.c:	if (cpumask_empty(&set->used) && set->gen) {
drivers/infiniband/hw/hfi1/affinity.c:		set->gen--;
drivers/infiniband/hw/hfi1/affinity.c:		cpumask_copy(&set->used, &set->mask);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_andnot(diff, &set->mask, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:		cpumask_set_cpu(cpu, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_clear_cpu(cpu, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_andnot(available_cpus, &set->mask, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_set_cpu(cpu, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_set_cpu(cpu, &set->mask);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_set_cpu(cpu, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_clear_cpu(old_cpu, &set->mask);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_clear_cpu(old_cpu, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:		cpumask_andnot(&set->used, &set->used, &msix->mask);
drivers/infiniband/hw/hfi1/affinity.c:		cpumask_set_cpu(cpu, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:	} else if (cpumask_weight(proc_mask) < cpumask_weight(&set->mask)) {
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_copy(hw_thread_mask, &set->mask);
drivers/infiniband/hw/hfi1/affinity.c:			 * (set->mask == set->used) before this loop.
drivers/infiniband/hw/hfi1/affinity.c:			cpumask_andnot(diff, hw_thread_mask, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:	cpumask_andnot(available_mask, available_mask, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:		cpumask_andnot(available_mask, hw_thread_mask, &set->used);
drivers/infiniband/hw/hfi1/affinity.c:		cpumask_set_cpu(cpu, &set->used);
drivers/infiniband/hw/hfi1/chip.c: * to this routine to be after all LCB set-up is done.  In particular, after
drivers/infiniband/hw/hfi1/chip.c:		 * sides must be done with LCB set-up before either
drivers/infiniband/hw/hfi1/exp_rcv.c:	INIT_LIST_HEAD(&set->list);
drivers/infiniband/hw/hfi1/exp_rcv.c:	set->count = 0;
drivers/infiniband/hw/hfi1/exp_rcv.h:	list_add_tail(&grp->list, &set->list);
drivers/infiniband/hw/hfi1/exp_rcv.h:	set->count++;
drivers/infiniband/hw/hfi1/exp_rcv.h:	set->count--;
drivers/infiniband/hw/hfi1/exp_rcv.h:		list_first_entry(&set->list, struct tid_group, list);
drivers/infiniband/hw/hfi1/exp_rcv.h:	set->count--;
drivers/infiniband/hw/hfi1/firmware.c:	/* data read set-up, no auto-increment */
drivers/infiniband/hw/hfi1/firmware.c:	/* write set-up */
drivers/infiniband/hw/hfi1/qsfp.c: * Raw i2c write.  No set-up or lock checking.
drivers/infiniband/hw/hfi1/qsfp.c: * Raw i2c read.  No set-up or lock checking.
drivers/infiniband/hw/hfi1/tid_rdma.c:		if (pset->count && pset->addr) {
drivers/infiniband/hw/hfi1/tid_rdma.c:				       pset->addr,
drivers/infiniband/hw/hfi1/tid_rdma.c:				       PAGE_SIZE * pset->count,
drivers/infiniband/hw/hfi1/tid_rdma.c:			pset->mapped = 0;
drivers/infiniband/hw/hfi1/tid_rdma.c:		if (pset->count) {
drivers/infiniband/hw/hfi1/tid_rdma.c:			pset->addr = dma_map_page(&dd->pcidev->dev,
drivers/infiniband/hw/hfi1/tid_rdma.c:						  pages[pset->idx],
drivers/infiniband/hw/hfi1/tid_rdma.c:						  PAGE_SIZE * pset->count,
drivers/infiniband/hw/hfi1/tid_rdma.c:			if (dma_mapping_error(&dd->pcidev->dev, pset->addr)) {
drivers/infiniband/hw/hfi1/tid_rdma.c:			pset->mapped = 1;
drivers/infiniband/hw/hfi1/tid_rdma.c:		if (pset->count) {
drivers/infiniband/hw/hfi1/tid_rdma.c:				     pset->addr, trdma_pset_order(pset));
drivers/infiniband/hw/hfi1/tid_rdma.c:		npages += pset->count;
drivers/infiniband/hw/hfi1/tid_rdma.c:			if (!pset->count)
drivers/infiniband/hw/hfi1/user_exp_rcv.c:	list_for_each_entry_safe(grp, ptr, &set->list, list) {
drivers/infiniband/hw/qib/qib_sd7220.c:	 * Alter some regs per vendor latest doc, reset-defaults
drivers/input/rmi4/rmi_2d_sensor.c:	retval = rmi_of_property_read_u32(dev, &val, "syna,offset-x", 1);
drivers/input/rmi4/rmi_2d_sensor.c:	retval = rmi_of_property_read_u32(dev, &val, "syna,offset-y", 1);
drivers/input/rmi4/rmi_driver.c:					"syna,reset-delay-ms", 1);
drivers/input/touchscreen/bu21013_ts.c:	pdata->cs_pin = of_get_named_gpio(np, "reset-gpio", 0);
drivers/iommu/amd_iommu.c:/* FIXME: Change generic reset-function to do the same */
drivers/iommu/exynos-iommu.c:		 * because it is set-associative TLB
drivers/isdn/gigaset/Makefile:gigaset-y := common.o interface.o proc.o ev-layer.o asyncdata.o
drivers/isdn/gigaset/Makefile:gigaset-$(CONFIG_GIGASET_CAPI) += capi.o
drivers/isdn/gigaset/Makefile:gigaset-$(CONFIG_GIGASET_I4L) += i4l.o
drivers/isdn/gigaset/Makefile:gigaset-$(CONFIG_GIGASET_DUMMYLL) += dummyll.o
drivers/isdn/gigaset/Makefile:usb_gigaset-y := usb-gigaset.o
drivers/isdn/gigaset/Makefile:ser_gigaset-y := ser-gigaset.o
drivers/isdn/gigaset/Makefile:bas_gigaset-y := bas-gigaset.o isocdata.o
drivers/isdn/hisax/asuscom.c:#define ASUS_RESET      0x80	/* Bit 7 Reset-Leitung */
drivers/isdn/hisax/elsa.c:#define ELSA_ISDN_RESET      0x20	/* Bit 5 Reset-Leitung */
drivers/isdn/i4l/isdn_ppp.c:   generate a CCP Reset-Request or tear down CCP altogether */
drivers/isdn/i4l/isdn_ppp.c:/* In-kernel handling of CCP Reset-Request and Reset-Ack is necessary,
drivers/isdn/i4l/isdn_ppp.c:/* Send a CCP Reset-Request or Reset-Ack directly from the kernel. This is
drivers/isdn/i4l/isdn_ppp.c:		if (is->reset->rs[id]) {
drivers/isdn/i4l/isdn_ppp.c:	if (is->reset->rs[id]) {
drivers/isdn/i4l/isdn_ppp.c:		rs = is->reset->rs[id];
drivers/isdn/i4l/isdn_ppp.c:		is->reset->rs[id] = NULL;
drivers/isdn/i4l/isdn_ppp.c:	if (is->reset->rs[id]) {
drivers/isdn/i4l/isdn_ppp.c:		is->reset->rs[id] = rs;
drivers/isdn/i4l/isdn_ppp.c:			if (is->reset->rs[rp->id]) {
drivers/isdn/i4l/isdn_ppp.c:				rs = is->reset->rs[rp->id];
drivers/isdn/i4l/isdn_ppp.c:		if (is->reset->rs[is->reset->lastid]) {
drivers/isdn/i4l/isdn_ppp.c:			rs = is->reset->rs[is->reset->lastid];
drivers/isdn/i4l/isdn_ppp.c:			       " %d to be started\n", is->reset->lastid);
drivers/isdn/i4l/isdn_ppp.c:							    is->reset->lastid);
drivers/isdn/i4l/isdn_ppp.c:	struct ippp_ccp_reset_state *rs = is->reset->rs[id];
drivers/isdn/i4l/isdn_ppp.c:	is->reset->lastid++;
drivers/leds/leds-ktd2692.c:		offset--;
drivers/lightnvm/pblk-rb.c:		page_set->order = order;
drivers/lightnvm/pblk-rb.c:		page_set->pages = alloc_pages(GFP_KERNEL, order);
drivers/lightnvm/pblk-rb.c:		if (!page_set->pages) {
drivers/lightnvm/pblk-rb.c:		kaddr = page_address(page_set->pages);
drivers/lightnvm/pblk-rb.c:		list_add_tail(&page_set->list, &rb->pages);
drivers/md/bcache/alloc.c:	ca->set->need_gc = max(ca->set->need_gc, bucket_gc_gen(b));
drivers/md/bcache/alloc.c:	WARN_ON_ONCE(ca->set->need_gc > BUCKET_GC_GEN_MAX);
drivers/md/bcache/alloc.c:	BUG_ON(!ca->set->gc_mark_valid);
drivers/md/bcache/alloc.c:	lockdep_assert_held(&ca->set->bucket_lock);
drivers/md/bcache/alloc.c:	unsigned int min_prio = (INITIAL_PRIO - ca->set->min_prio) / 8;	\
drivers/md/bcache/alloc.c:	(b->prio - ca->set->min_prio + min_prio) * GC_SECTORS_USED(b);	\
drivers/md/bcache/alloc.c:		mutex_unlock(&(ca)->set->bucket_lock);			\
drivers/md/bcache/alloc.c:		    test_bit(CACHE_SET_IO_DISABLE, &ca->set->flags)) {	\
drivers/md/bcache/alloc.c:		mutex_lock(&(ca)->set->bucket_lock);			\
drivers/md/bcache/alloc.c:	mutex_lock(&ca->set->bucket_lock);
drivers/md/bcache/alloc.c:				mutex_unlock(&ca->set->bucket_lock);
drivers/md/bcache/alloc.c:				mutex_lock(&ca->set->bucket_lock);
drivers/md/bcache/alloc.c:			wake_up(&ca->set->btree_cache_wait);
drivers/md/bcache/alloc.c:			wake_up(&ca->set->bucket_wait);
drivers/md/bcache/alloc.c:			if (ca->set->gc_stats.in_use > CUTOFF_WRITEBACK_SYNC &&
drivers/md/bcache/alloc.c:			    ca->set->copy_gc_enabled &&
drivers/md/bcache/alloc.c:			    ca->set->copy_gc_dirty_only &&
drivers/md/bcache/alloc.c:				atomic_set(&ca->set->movinggc, 1);
drivers/md/bcache/alloc.c:		allocator_wait(ca, ca->set->gc_mark_valid &&
drivers/md/bcache/alloc.c:		allocator_wait(ca, !atomic_read(&ca->set->prio_blocked));
drivers/md/bcache/alloc.c:		if (CACHE_SYNC(&ca->set->sb)) {
drivers/md/bcache/alloc.c:		prepare_to_wait(&ca->set->bucket_wait, &w,
drivers/md/bcache/alloc.c:		mutex_unlock(&ca->set->bucket_lock);
drivers/md/bcache/alloc.c:		mutex_lock(&ca->set->bucket_lock);
drivers/md/bcache/alloc.c:	finish_wait(&ca->set->bucket_wait, &w);
drivers/md/bcache/alloc.c:	if (ca->set->avail_nbuckets > 0) {
drivers/md/bcache/alloc.c:		ca->set->avail_nbuckets--;
drivers/md/bcache/alloc.c:		bch_update_bucket_in_use(ca->set, &ca->set->gc_stats);
drivers/md/bcache/alloc.c:	if (ca->set->avail_nbuckets < ca->set->nbuckets) {
drivers/md/bcache/alloc.c:		ca->set->avail_nbuckets++;
drivers/md/bcache/alloc.c:		bch_update_bucket_in_use(ca->set, &ca->set->gc_stats);
drivers/md/bcache/bset.c:	if (t->tree != b->set->tree + btree_keys_cachelines(b)) {
drivers/md/bcache/bset.c:	if (i != b->set->data) {
drivers/md/bcache/bset.c:		i->seq = b->set->data->seq;
drivers/md/bcache/bset.c:			b->set->tree + btree_keys_cachelines(b) - t->tree);
drivers/md/bcache/bset.c:	if (t->size == b->set->tree + btree_keys_cachelines(b) - t->tree)
drivers/md/bcache/bset.c:		out->magic	= b->set->data->magic;
drivers/md/bcache/bset.c:		out->seq	= b->set->data->seq;
drivers/md/bcache/bset.c:		out->version	= b->set->data->version;
drivers/md/bcache/bset.c:		swap(out, b->set->data);
drivers/md/bcache/bset.c:		order = get_order(__set_bytes(b->set->data, keys));
drivers/md/bcache/bset.c:	btree_mergesort(b, new->set->data, &iter, false, true);
drivers/md/bcache/bset.c:	new->set->size = 0; // XXX: why?
drivers/md/bcache/bset.h:	return ((size_t) i) - ((size_t) b->set->data);
drivers/md/bcache/btree.c:	 * See the comment arount cache_set->fill_iter.
drivers/md/bcache/btree.c:	    c->verify_data->keys.set->data)
drivers/md/bcache/btree.c:	if (!b->keys.set->data)
drivers/md/bcache/btree.c:	bch_bset_init_next(&b->keys, b->keys.set->data, bset_magic(&b->c->sb));
drivers/md/bcache/btree.h:	return b->keys.set->data;
drivers/md/bcache/debug.c:	sorted = b->c->verify_data->keys.set->data;
drivers/md/bcache/debug.c:	inmemory = b->keys.set->data;
drivers/md/bcache/debug.c:	sorted = v->keys.set->data;
drivers/md/bcache/io.c:	if (ca->set->error_decay) {
drivers/md/bcache/io.c:		while (count > ca->set->error_decay) {
drivers/md/bcache/io.c:			unsigned int new = count - ca->set->error_decay;
drivers/md/bcache/io.c:		if (errors < ca->set->error_limit)
drivers/md/bcache/journal.c:	struct jset *j, *data = ca->set->journal.w[0].data;
drivers/md/bcache/journal.c:	closure_wake_up(&ca->set->journal.wait);
drivers/md/bcache/journal.c:	closure_put(&ca->set->cl);
drivers/md/bcache/journal.c:		closure_get(&ca->set->cl);
drivers/md/bcache/movinggc.c:	if (ca->set->copy_gc_dirty_only)
drivers/md/bcache/movinggc.c:	if (ca->set->copy_gc_dirty_only)
drivers/md/bcache/super.c:	closure_put(&ca->set->sb_write);
drivers/md/bcache/super.c:	lockdep_assert_held(&ca->set->bucket_lock);
drivers/md/bcache/super.c:		mutex_unlock(&ca->set->bucket_lock);
drivers/md/bcache/super.c:		mutex_lock(&ca->set->bucket_lock);
drivers/md/bcache/super.c:	mutex_unlock(&ca->set->bucket_lock);
drivers/md/bcache/super.c:	mutex_lock(&ca->set->bucket_lock);
drivers/md/bcache/super.c:	ca->set->cache[ca->sb.nr_this_dev] = ca;
drivers/md/bcache/super.c:		BUG_ON(ca->set->cache[ca->sb.nr_this_dev] != ca);
drivers/md/bcache/super.c:		ca->set->cache[ca->sb.nr_this_dev] = NULL;
drivers/md/bcache/sysfs.c:		mutex_lock(&ca->set->bucket_lock);
drivers/md/bcache/sysfs.c:		mutex_unlock(&ca->set->bucket_lock);
drivers/md/bcache/sysfs.c:			mutex_lock(&ca->set->bucket_lock);
drivers/md/bcache/sysfs.c:			mutex_unlock(&ca->set->bucket_lock);
drivers/md/dm-era-target.c:	ws_pack(&md->current_writeset->md, &disk->current_writeset);
drivers/md/dm-era-target.c:	r = dm_bitset_flush(&md->bitset_info, md->current_writeset->md.root,
drivers/md/dm-era-target.c:			    &md->current_writeset->md.root);
drivers/md/dm-era-target.c:	ws_pack(&md->current_writeset->md, &value);
drivers/md/dm-era-target.c:	md->current_writeset->md.root = INVALID_WRITESET_ROOT;
drivers/md/dm-era-target.c:	if (md->current_writeset->md.root != INVALID_WRITESET_ROOT) {
drivers/md/dm-era-target.c:	if (md->current_writeset->md.root != SUPERBLOCK_LOCATION) {
drivers/md/dm-era-target.c:		r = dm_bitset_flush(&md->bitset_info, md->current_writeset->md.root,
drivers/md/dm-era-target.c:				    &md->current_writeset->md.root);
drivers/md/dm-rq.c:	struct mapped_device *md = set->driver_data;
drivers/md/dm-rq.c:	md->tag_set->ops = &dm_mq_ops;
drivers/md/dm-rq.c:	md->tag_set->queue_depth = dm_get_blk_mq_queue_depth();
drivers/md/dm-rq.c:	md->tag_set->numa_node = md->numa_node_id;
drivers/md/dm-rq.c:	md->tag_set->flags = BLK_MQ_F_SHOULD_MERGE;
drivers/md/dm-rq.c:	md->tag_set->nr_hw_queues = dm_get_blk_mq_nr_hw_queues();
drivers/md/dm-rq.c:	md->tag_set->driver_data = md;
drivers/md/dm-rq.c:	md->tag_set->cmd_size = sizeof(struct dm_rq_target_io);
drivers/md/dm-rq.c:		md->tag_set->cmd_size += immutable_tgt->per_io_data_size;
drivers/md/dm-table.c:	    (grouped && arg_set->argc < *value)) {
drivers/md/raid10.c:			seq_printf(seq, " %d offset-copies", conf->geo.far_copies);
drivers/media/dvb-frontends/cx24120.c:		dev_dbg(&state->i2c->dev, "Reset-readreg 0xba: %x\n", ret);
drivers/media/dvb-frontends/dib0090.c:	state->calibrate = DC_CAL | WBD_CAL | TEMP_CAL;	/* enable iq-offset-calibration and wbd-calibration when tuning next time */
drivers/media/dvb-frontends/dib0090.c:				while (LUT_offset->RF_freq != 0xffff) {
drivers/media/dvb-frontends/dib0090.c:					if (((state->rf_request > (LUT_offset->RF_freq - margin_khz))
drivers/media/dvb-frontends/dib0090.c:								&& (state->rf_request < (LUT_offset->RF_freq + margin_khz)))
drivers/media/dvb-frontends/dib0090.c:							&& LUT_offset->std == state->fe->dtv_property_cache.delivery_system) {
drivers/media/dvb-frontends/dib0090.c:						state->rf_request += LUT_offset->offset_khz;
drivers/media/dvb-frontends/dib3000mc.c:	// output mode set-up
drivers/media/i2c/et8ek8/et8ek8_mode.c:		/* Switch of Preset-White-balance (0d:disable / 1d:enable) */
drivers/media/i2c/mt9p031.c:	if (mt9p031->blc_offset->cur.val != 0) {
drivers/media/i2c/mt9p031.c:				    mt9p031->blc_offset->cur.val);
drivers/media/i2c/ov2685.c:		dev_err(dev, "Failed to get reset-gpios\n");
drivers/media/i2c/ov5695.c:		dev_err(dev, "Failed to get reset-gpios\n");
drivers/media/i2c/s5k6aa.c:		preset->mbus_fmt.width	= S5K6AA_OUT_WIDTH_DEF;
drivers/media/i2c/s5k6aa.c:		preset->mbus_fmt.height	= S5K6AA_OUT_HEIGHT_DEF;
drivers/media/i2c/s5k6aa.c:		preset->mbus_fmt.code	= s5k6aa_formats[0].code;
drivers/media/i2c/s5k6aa.c:		preset->index		= i;
drivers/media/i2c/s5k6aa.c:		preset->clk_id		= 0;
drivers/media/i2c/s5k6aa.c:	int index = s5k6aa->preset->index;
drivers/media/i2c/s5k6aa.c:	int fmt_index = s5k6aa_get_pixfmt_index(s5k6aa, &preset->mbus_fmt);
drivers/media/i2c/s5k6aa.c:	ret = s5k6aa_write(client, REG_P_OUT_WIDTH(preset->index),
drivers/media/i2c/s5k6aa.c:			   preset->mbus_fmt.width);
drivers/media/i2c/s5k6aa.c:		ret = s5k6aa_write(client, REG_P_OUT_HEIGHT(preset->index),
drivers/media/i2c/s5k6aa.c:				   preset->mbus_fmt.height);
drivers/media/i2c/s5k6aa.c:		ret = s5k6aa_write(client, REG_P_FMT(preset->index),
drivers/media/i2c/s5k6aa.c:	int idx = preset->index;
drivers/media/i2c/s5k6aa.c:				   preset->clk_id);
drivers/media/i2c/s5k6aa.c:	struct v4l2_mbus_framefmt *mbus_fmt = &s5k6aa->preset->mbus_fmt;
drivers/media/i2c/s5k6aa.c:	fmt->format = s5k6aa->preset->mbus_fmt;
drivers/media/i2c/s5k6aa.c:			mf = &preset->mbus_fmt;
drivers/media/i2c/s5k6aa.c:		mf = &s5k6aa->preset->mbus_fmt;
drivers/media/i2c/s5k6aa.c:	idx = s5k6aa->preset->index;
drivers/media/pci/bt8xx/bttv-driver.c:		set->frame_irq = 1;
drivers/media/pci/bt8xx/bttv-driver.c:			set->top    = item;
drivers/media/pci/bt8xx/bttv-driver.c:			set->bottom = item;
drivers/media/pci/bt8xx/bttv-driver.c:				if (NULL == set->bottom &&
drivers/media/pci/bt8xx/bttv-driver.c:					set->bottom = item;
drivers/media/pci/bt8xx/bttv-driver.c:				if (NULL != set->top  &&  NULL != set->bottom)
drivers/media/pci/bt8xx/bttv-driver.c:					set->top_irq = 2;
drivers/media/pci/bt8xx/bttv-driver.c:			if (NULL == set->top && NULL == set->bottom) {
drivers/media/pci/bt8xx/bttv-driver.c:				set->top    = btv->screen;
drivers/media/pci/bt8xx/bttv-driver.c:				set->bottom = btv->screen;
drivers/media/pci/bt8xx/bttv-driver.c:			    NULL == set->top) {
drivers/media/pci/bt8xx/bttv-driver.c:				set->top = btv->screen;
drivers/media/pci/bt8xx/bttv-driver.c:			    NULL == set->bottom) {
drivers/media/pci/bt8xx/bttv-driver.c:				set->bottom = btv->screen;
drivers/media/pci/bt8xx/bttv-driver.c:		btv->c.nr, set->top, set->bottom,
drivers/media/pci/bt8xx/bttv-driver.c:		btv->screen, set->frame_irq, set->top_irq);
drivers/media/pci/bt8xx/bttv-risc.c:	if (NULL != set->top  &&  NULL != set->bottom) {
drivers/media/pci/bt8xx/bttv-risc.c:		if (set->top == set->bottom) {
drivers/media/pci/bt8xx/bttv-risc.c:			set->top->vb.state    = VIDEOBUF_ACTIVE;
drivers/media/pci/bt8xx/bttv-risc.c:			if (set->top->vb.queue.next)
drivers/media/pci/bt8xx/bttv-risc.c:				list_del(&set->top->vb.queue);
drivers/media/pci/bt8xx/bttv-risc.c:			set->top->vb.state    = VIDEOBUF_ACTIVE;
drivers/media/pci/bt8xx/bttv-risc.c:			set->bottom->vb.state = VIDEOBUF_ACTIVE;
drivers/media/pci/bt8xx/bttv-risc.c:			if (set->top->vb.queue.next)
drivers/media/pci/bt8xx/bttv-risc.c:				list_del(&set->top->vb.queue);
drivers/media/pci/bt8xx/bttv-risc.c:			if (set->bottom->vb.queue.next)
drivers/media/pci/bt8xx/bttv-risc.c:				list_del(&set->bottom->vb.queue);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_apply_geo(btv, &set->top->geo, 1);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_apply_geo(btv, &set->bottom->geo,0);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_risc_hook(btv, RISC_SLOT_O_FIELD, &set->top->top,
drivers/media/pci/bt8xx/bttv-risc.c:			       set->top_irq);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_risc_hook(btv, RISC_SLOT_E_FIELD, &set->bottom->bottom,
drivers/media/pci/bt8xx/bttv-risc.c:			       set->frame_irq);
drivers/media/pci/bt8xx/bttv-risc.c:		btaor((set->top->btformat & 0xf0) | (set->bottom->btformat & 0x0f),
drivers/media/pci/bt8xx/bttv-risc.c:		btaor((set->top->btswap & 0x0a) | (set->bottom->btswap & 0x05),
drivers/media/pci/bt8xx/bttv-risc.c:	} else if (NULL != set->top) {
drivers/media/pci/bt8xx/bttv-risc.c:		set->top->vb.state  = VIDEOBUF_ACTIVE;
drivers/media/pci/bt8xx/bttv-risc.c:		if (set->top->vb.queue.next)
drivers/media/pci/bt8xx/bttv-risc.c:			list_del(&set->top->vb.queue);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_apply_geo(btv, &set->top->geo,1);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_apply_geo(btv, &set->top->geo,0);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_risc_hook(btv, RISC_SLOT_O_FIELD, &set->top->top,
drivers/media/pci/bt8xx/bttv-risc.c:			       set->frame_irq);
drivers/media/pci/bt8xx/bttv-risc.c:		btaor(set->top->btformat & 0xff, ~0xff, BT848_COLOR_FMT);
drivers/media/pci/bt8xx/bttv-risc.c:		btaor(set->top->btswap & 0x0f,   ~0x0f, BT848_COLOR_CTL);
drivers/media/pci/bt8xx/bttv-risc.c:	} else if (NULL != set->bottom) {
drivers/media/pci/bt8xx/bttv-risc.c:		set->bottom->vb.state = VIDEOBUF_ACTIVE;
drivers/media/pci/bt8xx/bttv-risc.c:		if (set->bottom->vb.queue.next)
drivers/media/pci/bt8xx/bttv-risc.c:			list_del(&set->bottom->vb.queue);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_apply_geo(btv, &set->bottom->geo,1);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_apply_geo(btv, &set->bottom->geo,0);
drivers/media/pci/bt8xx/bttv-risc.c:		bttv_risc_hook(btv, RISC_SLOT_E_FIELD, &set->bottom->bottom,
drivers/media/pci/bt8xx/bttv-risc.c:			       set->frame_irq);
drivers/media/pci/bt8xx/bttv-risc.c:		btaor(set->bottom->btformat & 0xff, ~0xff, BT848_COLOR_FMT);
drivers/media/pci/bt8xx/bttv-risc.c:		btaor(set->bottom->btswap & 0x0f,   ~0x0f, BT848_COLOR_CTL);
drivers/media/pci/cx18/cx18-gpio.c:		str = "gpio-reset-ctrl";
drivers/media/pci/ivtv/ivtv-fileops.c:	since we may get here before the stream has been fully set-up */
drivers/media/pci/tw5864/tw5864-core.c: * v4l2-ctl --device /dev/videoX --set-ctrl=video_gop_size=1
drivers/media/platform/exynos4-is/fimc-reg.c:	cfg = (offset->y_v << 16) | offset->y_h;
drivers/media/platform/exynos4-is/fimc-reg.c:	cfg = (offset->cb_v << 16) | offset->cb_h;
drivers/media/platform/exynos4-is/fimc-reg.c:	cfg = (offset->cr_v << 16) | offset->cr_h;
drivers/media/platform/exynos4-is/fimc-reg.c:	cfg = (offset->y_v << 16) | offset->y_h;
drivers/media/platform/exynos4-is/fimc-reg.c:	cfg = (offset->cb_v << 16) | offset->cb_h;
drivers/media/platform/exynos4-is/fimc-reg.c:	cfg = (offset->cr_v << 16) | offset->cr_h;
drivers/media/platform/rcar-vin/rcar-dma.c:		if (xs < p_set->xs_value)
drivers/media/platform/rcar-vin/rcar-dma.c:	    xs - p_prev_set->xs_value < p_set->xs_value - xs)
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[0], VNC1A_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[1], VNC1B_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[2], VNC1C_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[3], VNC2A_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[4], VNC2B_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[5], VNC2C_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[6], VNC3A_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[7], VNC3B_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[8], VNC3C_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[9], VNC4A_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[10], VNC4B_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[11], VNC4C_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[12], VNC5A_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[13], VNC5B_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[14], VNC5C_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[15], VNC6A_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[16], VNC6B_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[17], VNC6C_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[18], VNC7A_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[19], VNC7B_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[20], VNC7C_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[21], VNC8A_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[22], VNC8B_REG);
drivers/media/platform/rcar-vin/rcar-dma.c:	rvin_write(vin, p_set->coeff_set[23], VNC8C_REG);
drivers/media/platform/rockchip/rga/rga-hw.c:		dst_offset->y_off;
drivers/media/platform/rockchip/rga/rga-hw.c:		dst_offset->u_off;
drivers/media/platform/rockchip/rga/rga-hw.c:		dst_offset->v_off;
drivers/media/platform/s3c-camif/camif-regs.c:		cfg = S3C_CISS_OFFS_INITIAL(offset->initial);
drivers/media/platform/s3c-camif/camif-regs.c:		cfg |= S3C_CISS_OFFS_LINE(offset->line);
drivers/media/platform/sti/c8sectpfe/c8sectpfe-core.c:		tsin->rst_gpio = of_get_named_gpio(child, "reset-gpios", 0);
drivers/media/platform/sti/c8sectpfe/c8sectpfe-debugfs.c:	fei->regset->regs = fei_sys_regs;
drivers/media/platform/sti/c8sectpfe/c8sectpfe-debugfs.c:	fei->regset->nregs = ARRAY_SIZE(fei_sys_regs);
drivers/media/platform/sti/c8sectpfe/c8sectpfe-debugfs.c:	fei->regset->base = fei->io;
drivers/media/platform/sti/hva/hva-h264.c:		msg = info.field_views_flag << offset--;
drivers/media/platform/sti/hva/hva-h264.c:			       offset--;
drivers/media/platform/sti/hva/hva-h264.c:			       offset--;
drivers/media/platform/sti/hva/hva-h264.c:			       offset--;
drivers/media/platform/sti/hva/hva-h264.c:		msg |= info.left_view_self_contained_flag << offset--;
drivers/media/platform/sti/hva/hva-h264.c:		msg |= info.right_view_self_contained_flag << offset--;
drivers/media/radio/radio-shark.c:		v4l2_err(&shark->v4l2_dev, "set-freq error: %d\n", res);
drivers/media/usb/gspca/spca508.c: * Initialization data: this is the first set-up data written to the
drivers/media/usb/pwc/pwc-v4l.c:	if (pdev->motor_pan_reset->is_new)
drivers/media/usb/pwc/pwc-v4l.c:	if (pdev->motor_tilt_reset->is_new)
drivers/media/usb/pwc/pwc-v4l.c:	if (pdev->motor_pan_reset->is_new || pdev->motor_tilt_reset->is_new) {
drivers/message/fusion/mptsas.c: * mptsas_schedule_target_reset- send pending target reset
drivers/mfd/ab3100-core.c: * Basic set-up, datastructure creation/destruction and I2C interface.
drivers/misc/cxl/hcalls.c: *    reset-mask: mask to control reset of function faults
drivers/misc/cxl/hcalls.h: *    reset-mask: mask to control reset of function faults
drivers/misc/lkdtm/Makefile:			--set-section-flags .text=alloc,readonly \
drivers/misc/qcom-coincell.c:		dev_err(chgr->dev, "invalid rset-ohms value %d\n", rset);
drivers/misc/qcom-coincell.c:		dev_err(chgr->dev, "invalid vset-millivolts value %d\n", vset);
drivers/misc/qcom-coincell.c:		rc = of_property_read_u32(node, "qcom,rset-ohms", &rset);
drivers/misc/qcom-coincell.c:				"can't find 'qcom,rset-ohms' in DT block");
drivers/misc/qcom-coincell.c:		rc = of_property_read_u32(node, "qcom,vset-millivolts", &vset);
drivers/misc/qcom-coincell.c:			    "can't find 'qcom,vset-millivolts' in DT block");
drivers/misc/vmw_vmci/vmci_queue_pair.c:	if (ppn_set->initialized)
drivers/misc/vmw_vmci/vmci_queue_pair.c:	ppn_set->num_produce_pages = num_produce_pages;
drivers/misc/vmw_vmci/vmci_queue_pair.c:	ppn_set->num_consume_pages = num_consume_pages;
drivers/misc/vmw_vmci/vmci_queue_pair.c:	ppn_set->produce_ppns = produce_ppns;
drivers/misc/vmw_vmci/vmci_queue_pair.c:	ppn_set->consume_ppns = consume_ppns;
drivers/misc/vmw_vmci/vmci_queue_pair.c:	ppn_set->initialized = true;
drivers/misc/vmw_vmci/vmci_queue_pair.c:	if (ppn_set->initialized) {
drivers/misc/vmw_vmci/vmci_queue_pair.c:		kfree(ppn_set->produce_ppns);
drivers/misc/vmw_vmci/vmci_queue_pair.c:		kfree(ppn_set->consume_ppns);
drivers/misc/vmw_vmci/vmci_queue_pair.c:		memcpy(call_buf, ppn_set->produce_ppns,
drivers/misc/vmw_vmci/vmci_queue_pair.c:		       ppn_set->num_produce_pages *
drivers/misc/vmw_vmci/vmci_queue_pair.c:		       sizeof(*ppn_set->produce_ppns));
drivers/misc/vmw_vmci/vmci_queue_pair.c:		       ppn_set->num_produce_pages *
drivers/misc/vmw_vmci/vmci_queue_pair.c:		       sizeof(*ppn_set->produce_ppns),
drivers/misc/vmw_vmci/vmci_queue_pair.c:		       ppn_set->consume_ppns,
drivers/misc/vmw_vmci/vmci_queue_pair.c:		       ppn_set->num_consume_pages *
drivers/misc/vmw_vmci/vmci_queue_pair.c:		       sizeof(*ppn_set->consume_ppns));
drivers/misc/vmw_vmci/vmci_queue_pair.c:		for (i = 0; i < ppn_set->num_produce_pages; i++)
drivers/misc/vmw_vmci/vmci_queue_pair.c:			ppns[i] = (u32) ppn_set->produce_ppns[i];
drivers/misc/vmw_vmci/vmci_queue_pair.c:		ppns = &ppns[ppn_set->num_produce_pages];
drivers/misc/vmw_vmci/vmci_queue_pair.c:		for (i = 0; i < ppn_set->num_consume_pages; i++)
drivers/misc/vmw_vmci/vmci_queue_pair.c:			ppns[i] = (u32) ppn_set->consume_ppns[i];
drivers/mmc/core/queue.c:	return __mmc_init_request(set->driver_data, req, GFP_KERNEL);
drivers/mmc/core/queue.c:	struct mmc_queue *mq = set->driver_data;
drivers/mmc/host/sdhci.c:		/* Reset-all turns off SD Bus Power */
drivers/mtd/devices/st_spi_fsm.c:	fsm->reset_signal = of_property_read_bool(np, "st,reset-signal");
drivers/mtd/devices/st_spi_fsm.c:	fsm->reset_por = of_property_read_bool(np, "st,reset-por");
drivers/mtd/maps/scx200_docflash.c:	partition_info[2].size = partition_info[3].offset-partition_info[2].offset;
drivers/mtd/nand/raw/s3c2410.c:		if (nmtd->set != NULL && chip > nmtd->set->nr_chips) {
drivers/mtd/nand/raw/s3c2410.c:		mtdinfo->name = set->name;
drivers/mtd/nand/raw/s3c2410.c:					 set->partitions, set->nr_partitions);
drivers/mtd/nand/raw/s3c2410.c:	nand_set_flash_node(chip, set->of_node);
drivers/mtd/nand/raw/s3c2410.c:	chip->options	   = set->options;
drivers/mtd/nand/raw/s3c2410.c:	if (set->flash_bbt)
drivers/net/can/sja1000/ems_pci.c:	/* read reset-values */
drivers/net/can/sja1000/ems_pcmcia.c:	/* read reset-values */
drivers/net/can/sja1000/peak_pcmcia.c:	/* read reset-values */
drivers/net/dsa/lan9303-core.c:		of_property_read_u32(np, "reset-duration",
drivers/net/eql.c: * Broken set-bit locking snapshot
drivers/net/ethernet/arc/emac_mdio.c:	/* optional reset-related properties */
drivers/net/ethernet/arc/emac_mdio.c:	of_property_read_u32(np, "phy-reset-duration", &data->msec);
drivers/net/ethernet/broadcom/bgmac-bcma-mdio.c:	/* For some legacy hardware we do chipset-based PHY initialization here
drivers/net/ethernet/broadcom/bnx2x/bnx2x_ethtool.c:		return dump_num_registers[0][preset-1];
drivers/net/ethernet/broadcom/bnx2x/bnx2x_ethtool.c:		return dump_num_registers[1][preset-1];
drivers/net/ethernet/broadcom/bnx2x/bnx2x_ethtool.c:		return dump_num_registers[2][preset-1];
drivers/net/ethernet/broadcom/bnx2x/bnx2x_ethtool.c:		return dump_num_registers[3][preset-1];
drivers/net/ethernet/broadcom/bnx2x/bnx2x_ethtool.c:		return dump_num_registers[4][preset-1];
drivers/net/ethernet/broadcom/bnx2x/bnx2x_ethtool.c:	   "set-channels command parameters: rx = %d, tx = %d, other = %d, combined = %d\n",
drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.c:	 * and set-mac completion
drivers/net/ethernet/broadcom/bnx2x/bnx2x_sriov.h:	/* set-mac ramrod state 1-pending, 0-done */
drivers/net/ethernet/broadcom/tg3.c:		ret = tg3_nvram_read_be32(tp, offset-b_offset, &val);
drivers/net/ethernet/broadcom/tg3.c:		ret = tg3_nvram_read_be32(tp, offset-b_offset, &start);
drivers/net/ethernet/brocade/bna/bfa_cee.c: * @brief CEE ISR for reset-stats responses from f/w
drivers/net/ethernet/cavium/thunder/nicvf_main.c:	sprintf(nic->irq_name[NICVF_INTR_ID_QS_ERR], "%s-qset-err-%d",
drivers/net/ethernet/chelsio/cxgb4/cxgb4_filter.c:	/* do a set-tcb for smac-sel and CWR bit.. */
drivers/net/ethernet/davicom/dm9000.c:	reset_gpios = of_get_named_gpio_flags(dev->of_node, "reset-gpios", 0,
drivers/net/ethernet/dec/tulip/dmfe.c: *	Send the set-up frame
drivers/net/ethernet/dec/tulip/uli526x.c: *	Send the set-up frame
drivers/net/ethernet/emulex/benet/be.h:	u16 cfg_num_rx_irqs;		/* configured via set-channels */
drivers/net/ethernet/emulex/benet/be.h:	u16 cfg_num_tx_irqs;		/* configured via set-channels */
drivers/net/ethernet/freescale/fec_main.c:	err = of_property_read_u32(np, "phy-reset-duration", &msec);
drivers/net/ethernet/freescale/fec_main.c:	phy_reset = of_get_named_gpio(np, "phy-reset-gpios", 0);
drivers/net/ethernet/freescale/fec_main.c:	err = of_property_read_u32(np, "phy-reset-post-delay", &phy_post_delay);
drivers/net/ethernet/freescale/fec_main.c:	active_high = of_property_read_bool(np, "phy-reset-active-high");
drivers/net/ethernet/freescale/fec_main.c:		dev_err(&pdev->dev, "failed to get phy-reset-gpios: %d\n", err);
drivers/net/ethernet/freescale/fman/fman_memac.c:	/* clear all pending events and set-up interrupts */
drivers/net/ethernet/freescale/fman/fman_tgec.c:	/* clear all pending events and set-up interrupts */
drivers/net/ethernet/hisilicon/hisi_femac.c:#define PHY_RESET_DELAYS_PROPERTY	"hisilicon,phy-reset-delays-us"
drivers/net/ethernet/hisilicon/hix5hd2_gmac.c:#define PHY_RESET_DELAYS_PROPERTY	"hisilicon,phy-reset-delays-us"
drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c:	ret = device_property_read_u32(dsaf_dev->dev, "reset-field-offset",
drivers/net/ethernet/hisilicon/hns/hns_dsaf_main.c:			"get reset-field-offset fail, ret=%d!\r\n", ret);
drivers/net/ethernet/intel/i40e/i40e_txrx.c:	 *    ethtool --set-priv-flags <dev> legacy-rx on
drivers/net/ethernet/intel/ice/ice_main.c:	 * interrupt. So for PFR, rebuild after the reset and clear the reset-
drivers/net/ethernet/intel/igb/e1000_mac.c:	for (offset = E1000_VLAN_FILTER_TBL_SIZE; offset--;)
drivers/net/ethernet/intel/ixgbe/ixgbe_main.c:	 *    ethtool --set-priv-flags <dev> legacy-rx on
drivers/net/ethernet/intel/ixgbe/ixgbe_phy.c:	/* Data rise/fall (1000ns/300ns) and set-up time (250ns) */
drivers/net/ethernet/intel/ixgbevf/ixgbevf_main.c:	 *    ethtool --set-priv-flags <dev> legacy-rx on
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	char *actions = set->ht_key.enc_actions;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	char *actions = set->ht_key.enc_actions;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	set->ht_key.is_first = is_first;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	set->ref_count = 1;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	err = rhashtable_insert_fast(&mlxsw_afa->set_ht, &set->ht_node,
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:					   &set->kvdl_index,
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:					   set->ht_key.enc_actions,
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:					   set->ht_key.is_first);
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	set->shared = true;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	set->prev = NULL;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	rhashtable_remove_fast(&mlxsw_afa->set_ht, &set->ht_node,
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:				     set->kvdl_index,
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:				     set->ht_key.is_first);
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	rhashtable_remove_fast(&mlxsw_afa->set_ht, &set->ht_node,
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	set->shared = false;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	if (--set->ref_count)
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	if (set->shared)
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	set = rhashtable_lookup_fast(&mlxsw_afa->set_ht, &orig_set->ht_key,
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:		set->ref_count++;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:		block->cur_set->prev = block->first_set;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:		block->first_set->next = block->cur_set;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:		next_set = set->next;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:		prev_set = set->prev;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:			prev_set->next = set;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:			mlxsw_afa_set_next_set(prev_set, set->kvdl_index);
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	return block->first_set->ht_key.enc_actions;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	return block->cur_set->ht_key.enc_actions;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	if (WARN_ON(!block->first_set->next))
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	return block->first_set->next->kvdl_index;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:		set->prev = block->cur_set;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:		block->cur_set->next = set;
drivers/net/ethernet/mellanox/mlxsw/core_acl_flex_actions.c:	actions = block->cur_set->ht_key.enc_actions;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	return ruleset->ref_count == 2;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	const struct mlxsw_sp_acl_profile_ops *ops = ruleset->ht_key.ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	return ops->ruleset_bind(mlxsw_sp, ruleset->priv,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	const struct mlxsw_sp_acl_profile_ops *ops = ruleset->ht_key.ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ops->ruleset_unbind(mlxsw_sp, ruleset->priv,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ruleset->ref_count = 1;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ruleset->ht_key.block = block;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ruleset->ht_key.chain_index = chain_index;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ruleset->ht_key.ops = ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	err = rhashtable_init(&ruleset->rule_ht, &mlxsw_sp_acl_rule_ht_params);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	err = ops->ruleset_add(mlxsw_sp, &acl->tcam, ruleset->priv,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	err = rhashtable_insert_fast(&acl->ruleset_ht, &ruleset->ht_node,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ops->ruleset_del(mlxsw_sp, ruleset->priv);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	rhashtable_destroy(&ruleset->rule_ht);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	const struct mlxsw_sp_acl_profile_ops *ops = ruleset->ht_key.ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	rhashtable_remove_fast(&acl->ruleset_ht, &ruleset->ht_node,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ops->ruleset_del(mlxsw_sp, ruleset->priv);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	rhashtable_destroy(&ruleset->rule_ht);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ruleset->ref_count++;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	if (--ruleset->ref_count)
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	const struct mlxsw_sp_acl_profile_ops *ops = ruleset->ht_key.ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	return ops->ruleset_group_id(ruleset->priv);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	const struct mlxsw_sp_acl_profile_ops *ops = ruleset->ht_key.ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	const struct mlxsw_sp_acl_profile_ops *ops = ruleset->ht_key.ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	err = ops->rule_add(mlxsw_sp, ruleset->priv, rule->priv, rule->rulei);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	err = rhashtable_insert_fast(&ruleset->rule_ht, &rule->ht_node,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	if (!ruleset->ht_key.chain_index &&
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:						      ruleset->ht_key.block);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ruleset->ht_key.block->rule_count++;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	rhashtable_remove_fast(&ruleset->rule_ht, &rule->ht_node,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	const struct mlxsw_sp_acl_profile_ops *ops = ruleset->ht_key.ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	ruleset->ht_key.block->rule_count--;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	if (!ruleset->ht_key.chain_index &&
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:						  ruleset->ht_key.block);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	rhashtable_remove_fast(&ruleset->rule_ht, &rule->ht_node,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	const struct mlxsw_sp_acl_profile_ops *ops = ruleset->ht_key.ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	return rhashtable_lookup_fast(&ruleset->rule_ht, &cookie,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl.c:	const struct mlxsw_sp_acl_profile_ops *ops = ruleset->ht_key.ops;
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	return mlxsw_sp_acl_tcam_vgroup_add(mlxsw_sp, tcam, &ruleset->vgroup,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	mlxsw_sp_acl_tcam_vgroup_del(&ruleset->vgroup);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	return mlxsw_sp_acl_tcam_group_bind(mlxsw_sp, &ruleset->vgroup.group,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	mlxsw_sp_acl_tcam_group_unbind(mlxsw_sp, &ruleset->vgroup.group,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	return mlxsw_sp_acl_tcam_group_id(&ruleset->vgroup.group);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	return mlxsw_sp_acl_tcam_ventry_add(mlxsw_sp, &ruleset->vgroup,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	err = mlxsw_sp_acl_tcam_vgroup_add(mlxsw_sp, tcam, &ruleset->vgroup,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	ruleset->vchunk = mlxsw_sp_acl_tcam_vchunk_get(mlxsw_sp,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:						       &ruleset->vgroup, 1,
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	if (IS_ERR(ruleset->vchunk)) {
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:		err = PTR_ERR(ruleset->vchunk);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	mlxsw_sp_acl_tcam_vgroup_del(&ruleset->vgroup);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	mlxsw_sp_acl_tcam_vchunk_put(mlxsw_sp, ruleset->vchunk);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	mlxsw_sp_acl_tcam_vgroup_del(&ruleset->vgroup);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	return mlxsw_sp_acl_tcam_group_id(&ruleset->vgroup.group);
drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c:	return mlxsw_sp_acl_tcam_ventry_add(mlxsw_sp, &ruleset->vgroup,
drivers/net/ethernet/micrel/ks8851.c:	gpio = of_get_named_gpio_flags(spi->dev.of_node, "reset-gpios",
drivers/net/ethernet/netronome/nfp/nfp_net_repr.c:	return rcu_dereference_protected(set->reprs[id],
drivers/net/ethernet/qlogic/qed/qed_dcbx.c:	/* clear set-parmas cache */
drivers/net/ethernet/qlogic/qed/qed_dev.c:	SET_FIELD(p_coal_timeset->value, COALESCING_TIMESET_TIMESET, timeset);
drivers/net/ethernet/qlogic/qed/qed_dev.c:	SET_FIELD(p_coal_timeset->value, COALESCING_TIMESET_VALID, 1);
drivers/net/ethernet/qlogic/qed/qed_roce.c:		/* Init->RTR or Reset->RTR */
drivers/net/ethernet/qlogic/qed/qed_vf.h:	 * 32-bit values. As old VFs used to set-bit to the values on its side,
drivers/net/ethernet/qlogic/qede/qede_ethtool.c:		   "set-channels command parameters: rx = %d, tx = %d, other = %d, combined = %d\n",
drivers/net/ethernet/sfc/ptp.c:	timeset->host_start = MCDI_DWORD(data, PTP_OUT_SYNCHRONIZE_HOSTSTART);
drivers/net/ethernet/sfc/ptp.c:	timeset->major = MCDI_DWORD(data, PTP_OUT_SYNCHRONIZE_MAJOR);
drivers/net/ethernet/sfc/ptp.c:	timeset->minor = MCDI_DWORD(data, PTP_OUT_SYNCHRONIZE_MINOR);
drivers/net/ethernet/sfc/ptp.c:	timeset->host_end = MCDI_DWORD(data, PTP_OUT_SYNCHRONIZE_HOSTEND),
drivers/net/ethernet/sfc/ptp.c:	timeset->wait = MCDI_DWORD(data, PTP_OUT_SYNCHRONIZE_WAITNS);
drivers/net/ethernet/sfc/ptp.c:	start_ns = timeset->host_start & MC_NANOSECOND_MASK;
drivers/net/ethernet/sfc/ptp.c:	end_ns = timeset->host_end & MC_NANOSECOND_MASK;
drivers/net/ethernet/sfc/ptp.c:	timeset->window = end_ns - start_ns;
drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c:						"snps,reset-gpio", 0);
drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c:						"snps,reset-active-low");
drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c:				"snps,reset-delays-us", data->delays, 3);
drivers/net/hyperv/rndis_filter.c:	set->req_id = atomic_inc_return(&dev->new_req_id);
drivers/net/hyperv/rndis_filter.c:	set->oid = RNDIS_OID_GEN_RNDIS_CONFIG_PARAMETER;
drivers/net/hyperv/rndis_filter.c:	set->info_buflen = extlen;
drivers/net/hyperv/rndis_filter.c:	set->info_buf_offset = sizeof(struct rndis_set_request);
drivers/net/hyperv/rndis_filter.c:	set->dev_vc_handle = 0;
drivers/net/hyperv/rndis_filter.c:		set->info_buf_offset);
drivers/net/hyperv/rndis_filter.c:	set->oid = OID_TCP_OFFLOAD_PARAMETERS;
drivers/net/hyperv/rndis_filter.c:	set->info_buflen = extlen;
drivers/net/hyperv/rndis_filter.c:	set->info_buf_offset = sizeof(struct rndis_set_request);
drivers/net/hyperv/rndis_filter.c:	set->dev_vc_handle = 0;
drivers/net/hyperv/rndis_filter.c:				set->info_buf_offset);
drivers/net/hyperv/rndis_filter.c:	set->oid = OID_GEN_RECEIVE_SCALE_PARAMETERS;
drivers/net/hyperv/rndis_filter.c:	set->info_buflen = extlen;
drivers/net/hyperv/rndis_filter.c:	set->info_buf_offset = sizeof(struct rndis_set_request);
drivers/net/hyperv/rndis_filter.c:	set->dev_vc_handle = 0;
drivers/net/hyperv/rndis_filter.c:	set->oid = RNDIS_OID_GEN_CURRENT_PACKET_FILTER;
drivers/net/hyperv/rndis_filter.c:	set->info_buflen = sizeof(u32);
drivers/net/hyperv/rndis_filter.c:	set->info_buf_offset = sizeof(struct rndis_set_request);
drivers/net/ieee802154/at86rf230.c:	*rstn = of_get_named_gpio(spi->dev.of_node, "reset-gpio", 0);
drivers/net/ieee802154/ca8210.c:		"reset-gpio",
drivers/net/ieee802154/cc2520.c:	pdata->reset = of_get_named_gpio(np, "reset-gpio", 0);
drivers/net/phy/mdio_bus.c:					       "reset-gpios", 0, GPIOD_OUT_LOW,
drivers/net/phy/phylink.c:	phylink_merge_link_mode(kset->link_modes.advertising, state->advertising);
drivers/net/phy/phylink.c:	linkmode_copy(kset->link_modes.lp_advertising, state->lp_advertising);
drivers/net/phy/phylink.c:	kset->base.speed = state->speed;
drivers/net/phy/phylink.c:	kset->base.duplex = state->duplex;
drivers/net/phy/phylink.c:	kset->base.autoneg = state->an_enabled ? AUTONEG_ENABLE :
drivers/net/phy/phylink.c:		kset->base.port = pl->link_port;
drivers/net/phy/phylink.c:	linkmode_copy(kset->link_modes.supported, pl->supported);
drivers/net/phy/phylink.c:	if (kset->base.autoneg != AUTONEG_DISABLE &&
drivers/net/phy/phylink.c:	    kset->base.autoneg != AUTONEG_ENABLE)
drivers/net/phy/phylink.c:	linkmode_and(config.advertising, kset->link_modes.advertising,
drivers/net/phy/phylink.c:	if (kset->base.autoneg == AUTONEG_DISABLE) {
drivers/net/phy/phylink.c:		s = phy_lookup_setting(kset->base.speed, kset->base.duplex,
drivers/net/phy/spi_ks8995.c:	pdata->reset_gpio = of_get_named_gpio_flags(np, "reset-gpios", 0,
drivers/net/phy/spi_ks8995.c:				"failed to get reset-gpios: %d\n", err);
drivers/net/ppp/bsd_comp.c: * we can issue a CCP reset-request; for DECOMP_FATALERROR, we may be
drivers/net/ppp/ppp_deflate.c: * we can issue a CCP reset-request; for DECOMP_FATALERROR, we may be
drivers/net/ppp/ppp_mppe.c: * We received a CCP Reset-Request (actually, we are sending a Reset-Ack),
drivers/net/ppp/ppp_mppe.c: * every CCP Reset-Request; we only rekey on the next xmit packet.
drivers/net/ppp/ppp_mppe.c: * We might get multiple CCP Reset-Requests if our CCP Reset-Ack is lost.
drivers/net/ppp/ppp_mppe.c: * So, rekeying for every CCP Reset-Request is broken as the peer will not
drivers/net/ppp/ppp_mppe.c: * CCP Reset-Request, we must rekey again.)
drivers/net/ppp/ppp_mppe.c:	    (state->bits & MPPE_BIT_FLUSHED)) {	/* CCP Reset-Request  */
drivers/net/ppp/ppp_mppe.c: * We received a CCP Reset-Ack.  Just ignore it.
drivers/net/ppp/ppp_mppe.c:				 * Signal the peer to rekey (by sending a CCP Reset-Request).
drivers/net/ppp/ppp_mppe.c:				/* ccp.c will be silent (no additional CCP Reset-Requests). */
drivers/net/ppp/ppp_mppe.c:				 * peer need not send a Reset-Ack packet.  But RFC 1962
drivers/net/ppp/ppp_mppe.c:				 * requires it.  Hopefully, M$ does send a Reset-Ack; even
drivers/net/usb/rndis_host.c:	u.set->msg_type = cpu_to_le32(RNDIS_MSG_SET);
drivers/net/usb/rndis_host.c:	u.set->msg_len = cpu_to_le32(4 + sizeof *u.set);
drivers/net/usb/rndis_host.c:	u.set->oid = cpu_to_le32(RNDIS_OID_GEN_CURRENT_PACKET_FILTER);
drivers/net/usb/rndis_host.c:	u.set->len = cpu_to_le32(4);
drivers/net/usb/rndis_host.c:	u.set->offset = cpu_to_le32((sizeof *u.set) - 8);
drivers/net/wireless/ath/ath10k/mac.c:	rateset->num_rates = 0;
drivers/net/wireless/ath/ath10k/mac.c:		rateset->rates[rateset->num_rates] = rate;
drivers/net/wireless/ath/ath10k/mac.c:		rateset->num_rates++;
drivers/net/wireless/ath/ath5k/dma.c:	 * Add additional, chipset-dependent interrupt mask flags
drivers/net/wireless/ath/ath5k/pci.c:	for (offset = 0x1f, octet = 0, total = 0; offset >= 0x1d; offset--) {
drivers/net/wireless/ath/ath9k/ar9003_mci.c:		offset--;
drivers/net/wireless/ath/key.c:		ath_err(common, "set-entry: keycache entry %u out of range\n",
drivers/net/wireless/ath/wcn36xx/hal.h:	/* 20/40MHZ offset-HIGH 40/80MHZ offset HIGH */
drivers/net/wireless/ath/wil6210/debugfs.c:/*---reset---*/
drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c:	for (i = 0; i < rateset->count; i++) {
drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c:		if (!(rateset->rates[i] & BRCMS_RATE_FLAG))
drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c:		rate = (rateset->rates[i] & BRCMS_RATE_MASK);
drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c:				  rateset->rates[i]);
drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c:		return isset(hw_rateset->mcs, (rspec & RSPEC_RATE_MASK));
drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c:	for (i = 0; i < hw_rateset->count; i++)
drivers/net/wireless/broadcom/brcm80211/brcmsmac/main.c:		if (hw_rateset->rates[i] == rspec2rate(rspec))
drivers/net/wireless/broadcom/brcm80211/brcmsmac/rate.c:		rateset->mcs[i] = 0;
drivers/net/wireless/broadcom/brcm80211/brcmsmac/rate.c:	memcpy(&rateset->mcs[0], &cck_ofdm_mimo_rates.mcs[0], MCSSET_LEN);
drivers/net/wireless/broadcom/brcm80211/brcmsmac/rate.c:		setbit(rateset->mcs, 32);
drivers/net/wireless/broadcom/brcm80211/brcmsmac/rate.c:		clrbit(rateset->mcs, 32);
drivers/net/wireless/intel/iwlegacy/common.c:	force_reset->reset_request_count++;
drivers/net/wireless/intel/iwlegacy/common.c:		if (force_reset->last_force_reset_jiffies &&
drivers/net/wireless/intel/iwlegacy/common.c:		    time_after(force_reset->last_force_reset_jiffies +
drivers/net/wireless/intel/iwlegacy/common.c:			       force_reset->reset_duration, jiffies)) {
drivers/net/wireless/intel/iwlegacy/common.c:			force_reset->reset_reject_count++;
drivers/net/wireless/intel/iwlegacy/common.c:	force_reset->reset_success_count++;
drivers/net/wireless/intel/iwlegacy/common.c:	force_reset->last_force_reset_jiffies = jiffies;
drivers/net/wireless/intel/iwlegacy/debug.c:		      force_reset->reset_request_count);
drivers/net/wireless/intel/iwlegacy/debug.c:		      force_reset->reset_success_count);
drivers/net/wireless/intel/iwlegacy/debug.c:		      force_reset->reset_reject_count);
drivers/net/wireless/intel/iwlegacy/debug.c:		      force_reset->reset_duration);
drivers/net/wireless/intel/iwlwifi/dvm/debugfs.c:			rf_reset->reset_request_count);
drivers/net/wireless/intel/iwlwifi/dvm/debugfs.c:			rf_reset->reset_success_count);
drivers/net/wireless/intel/iwlwifi/dvm/debugfs.c:			rf_reset->reset_reject_count);
drivers/net/wireless/intel/iwlwifi/dvm/rx.c:	rf_reset->reset_request_count++;
drivers/net/wireless/intel/iwlwifi/dvm/rx.c:	if (!external && rf_reset->last_reset_jiffies &&
drivers/net/wireless/intel/iwlwifi/dvm/rx.c:	    time_after(rf_reset->last_reset_jiffies +
drivers/net/wireless/intel/iwlwifi/dvm/rx.c:		rf_reset->reset_reject_count++;
drivers/net/wireless/intel/iwlwifi/dvm/rx.c:	rf_reset->reset_success_count++;
drivers/net/wireless/intel/iwlwifi/dvm/rx.c:	rf_reset->last_reset_jiffies = jiffies;
drivers/net/wireless/intersil/orinoco/main.c:			offset--;
drivers/net/wireless/marvell/mwifiex/scan.c:			bss_entry->channel = ds_param_set->current_chan;
drivers/net/wireless/marvell/mwifiex/scan.c:			vs_param_set->header.type =
drivers/net/wireless/marvell/mwifiex/scan.c:			vs_param_set->header.len =
drivers/net/wireless/marvell/mwifiex/scan.c:			memcpy(vs_param_set->ie, priv->vs_ie[id].ie,
drivers/net/wireless/marvell/mwifiex/scan.c:			       le16_to_cpu(vs_param_set->header.len));
drivers/net/wireless/marvell/mwifiex/scan.c:			*buffer += le16_to_cpu(vs_param_set->header.len) +
drivers/net/wireless/marvell/mwifiex/scan.c:			ret_len += le16_to_cpu(vs_param_set->header.len) +
drivers/net/wireless/marvell/mwifiex/sdio.c: *      - Set host interrupt Reset-To-Read to clear
drivers/net/wireless/marvell/mwifiex/sta_cmd.c:			key_param_set->type =
drivers/net/wireless/marvell/mwifiex/sta_cmd.c:			key_param_set->length = cpu_to_le16((u16)
drivers/net/wireless/marvell/mwifiex/sta_cmd.c:			key_param_set->key_type_id =
drivers/net/wireless/marvell/mwifiex/sta_cmd.c:			key_param_set->key_info =
drivers/net/wireless/marvell/mwifiex/sta_cmd.c:			key_param_set->key_len =
drivers/net/wireless/marvell/mwifiex/sta_cmd.c:			key_param_set->key[0] = i;
drivers/net/wireless/marvell/mwifiex/sta_cmd.c:				key_param_set->key[1] = 1;
drivers/net/wireless/marvell/mwifiex/sta_cmd.c:				key_param_set->key[1] = 0;
drivers/net/wireless/marvell/mwifiex/sta_cmd.c:			memmove(&key_param_set->key[2],
drivers/net/wireless/quantenna/qtnfmac/event.c:				(sizeof(*ie_set) - sizeof(ie_set->hdr));
drivers/net/wireless/quantenna/qtnfmac/event.c:			if (ie_set->type == QLINK_IE_SET_ASSOC_REQ && ie_len) {
drivers/net/wireless/quantenna/qtnfmac/event.c:				sinfo->assoc_req_ies = ie_set->ie_data;
drivers/net/wireless/quantenna/qtnfmac/event.c:				(sizeof(*ie_set) - sizeof(ie_set->hdr));
drivers/net/wireless/quantenna/qtnfmac/event.c:			switch (ie_set->type) {
drivers/net/wireless/quantenna/qtnfmac/event.c:				ies = ie_set->ie_data;
drivers/net/wireless/ralink/rt2x00/rt2800lib.c:			prev_freq_offset--;
drivers/net/wireless/realtek/rtlwifi/efuse.c:				"offset-%d Worden=%x\n", offset, wren);
drivers/net/wireless/rndis_wlan.c:	u.set->msg_type = cpu_to_le32(RNDIS_MSG_SET);
drivers/net/wireless/rndis_wlan.c:	u.set->msg_len = cpu_to_le32(sizeof(*u.set) + len);
drivers/net/wireless/rndis_wlan.c:	u.set->oid = cpu_to_le32(oid);
drivers/net/wireless/rndis_wlan.c:	u.set->len = cpu_to_le32(len);
drivers/net/wireless/rndis_wlan.c:	u.set->offset = cpu_to_le32(sizeof(*u.set) - 8);
drivers/net/wireless/rndis_wlan.c:	u.set->handle = cpu_to_le32(0);
drivers/net/wireless/rndis_wlan.c:	reset->msg_type = cpu_to_le32(RNDIS_MSG_RESET);
drivers/net/wireless/rndis_wlan.c:	reset->msg_len = cpu_to_le32(sizeof(*reset));
drivers/nfc/nfcmrvl/main.c:	reset_n_io = of_get_named_gpio(node, "reset-n-io", 0);
drivers/nfc/nfcmrvl/main.c:		pr_info("no reset-n-io config\n");
drivers/nfc/nfcmrvl/main.c:		pr_err("invalid reset-n-io GPIO\n");
drivers/nfc/st-nci/i2c.c:	{ "reset-gpios", &reset_gpios, 1 },
drivers/nfc/st-nci/spi.c:	{ "reset-gpios", &reset_gpios, 1 },
drivers/nvdimm/label.c:		guid_copy(&nd_label->type_guid, &nd_set->type_guid);
drivers/nvdimm/label.c:			nd_label->isetcookie = __cpu_to_le64(nd_set->cookie2);
drivers/nvdimm/label.c:			guid_copy(&nd_label->type_guid, &nd_set->type_guid);
drivers/nvdimm/namespace_devs.c:					&& !guid_equal(&nd_set->type_guid,
drivers/nvdimm/namespace_devs.c:						nd_set->type_guid.b,
drivers/nvdimm/namespace_devs.c:		dev_dbg(&nd_region->dev, "invalid interleave-set-cookie\n");
drivers/nvdimm/namespace_devs.c:		if (!guid_equal(&nd_set->type_guid, &nd_label->type_guid)) {
drivers/nvdimm/namespace_devs.c:					nd_set->type_guid.b,
drivers/nvdimm/namespace_devs.c:		if (nd_label->isetcookie != __cpu_to_le64(nd_set->cookie2)) {
drivers/nvdimm/namespace_devs.c:					nd_set->cookie2,
drivers/nvdimm/region_devs.c:	return sprintf(buf, "%#llx\n", nd_set->cookie1);
drivers/nvdimm/region_devs.c:		return nd_set->cookie1;
drivers/nvdimm/region_devs.c:	return nd_set->cookie2;
drivers/nvdimm/region_devs.c:		return nd_set->altcookie;
drivers/nvme/host/core.c:	nvme_reset_wq = alloc_workqueue("nvme-reset-wq",
drivers/nvme/host/fc.c:	return __nvme_fc_exit_request(set->driver_data, op);
drivers/nvme/host/fc.c:	struct nvme_fc_ctrl *ctrl = set->driver_data;
drivers/nvme/host/rdma.c:	struct nvme_rdma_ctrl *ctrl = set->driver_data;
drivers/nvme/host/rdma.c:		set->ops = &nvme_rdma_admin_mq_ops;
drivers/nvme/host/rdma.c:		set->queue_depth = NVME_AQ_MQ_TAG_DEPTH;
drivers/nvme/host/rdma.c:		set->reserved_tags = 2; /* connect + keep-alive */
drivers/nvme/host/rdma.c:		set->numa_node = nctrl->numa_node;
drivers/nvme/host/rdma.c:		set->cmd_size = sizeof(struct nvme_rdma_request) +
drivers/nvme/host/rdma.c:		set->driver_data = ctrl;
drivers/nvme/host/rdma.c:		set->nr_hw_queues = 1;
drivers/nvme/host/rdma.c:		set->timeout = ADMIN_TIMEOUT;
drivers/nvme/host/rdma.c:		set->flags = BLK_MQ_F_NO_SCHED;
drivers/nvme/host/rdma.c:		set->ops = &nvme_rdma_mq_ops;
drivers/nvme/host/rdma.c:		set->queue_depth = nctrl->sqsize + 1;
drivers/nvme/host/rdma.c:		set->reserved_tags = 1; /* fabric connect */
drivers/nvme/host/rdma.c:		set->numa_node = nctrl->numa_node;
drivers/nvme/host/rdma.c:		set->flags = BLK_MQ_F_SHOULD_MERGE;
drivers/nvme/host/rdma.c:		set->cmd_size = sizeof(struct nvme_rdma_request) +
drivers/nvme/host/rdma.c:		set->driver_data = ctrl;
drivers/nvme/host/rdma.c:		set->nr_hw_queues = nctrl->queue_count - 1;
drivers/nvme/host/rdma.c:		set->timeout = NVME_IO_TIMEOUT;
drivers/nvme/host/rdma.c:		set->nr_maps = nctrl->opts->nr_poll_queues ? HCTX_MAX_TYPES : 2;
drivers/nvme/host/rdma.c:	struct nvme_rdma_ctrl *ctrl = set->driver_data;
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_DEFAULT].nr_queues =
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_DEFAULT].queue_offset = 0;
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_READ].nr_queues =
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_READ].queue_offset =
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_DEFAULT].nr_queues =
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_DEFAULT].queue_offset = 0;
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_READ].nr_queues =
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_READ].queue_offset = 0;
drivers/nvme/host/rdma.c:	blk_mq_rdma_map_queues(&set->map[HCTX_TYPE_DEFAULT],
drivers/nvme/host/rdma.c:	blk_mq_rdma_map_queues(&set->map[HCTX_TYPE_READ],
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_POLL].nr_queues =
drivers/nvme/host/rdma.c:		set->map[HCTX_TYPE_POLL].queue_offset =
drivers/nvme/host/rdma.c:		blk_mq_map_queues(&set->map[HCTX_TYPE_POLL]);
drivers/nvme/host/tcp.c:	struct nvme_tcp_ctrl *ctrl = set->driver_data;
drivers/nvme/host/tcp.c:		set->ops = &nvme_tcp_admin_mq_ops;
drivers/nvme/host/tcp.c:		set->queue_depth = NVME_AQ_MQ_TAG_DEPTH;
drivers/nvme/host/tcp.c:		set->reserved_tags = 2; /* connect + keep-alive */
drivers/nvme/host/tcp.c:		set->numa_node = NUMA_NO_NODE;
drivers/nvme/host/tcp.c:		set->cmd_size = sizeof(struct nvme_tcp_request);
drivers/nvme/host/tcp.c:		set->driver_data = ctrl;
drivers/nvme/host/tcp.c:		set->nr_hw_queues = 1;
drivers/nvme/host/tcp.c:		set->timeout = ADMIN_TIMEOUT;
drivers/nvme/host/tcp.c:		set->ops = &nvme_tcp_mq_ops;
drivers/nvme/host/tcp.c:		set->queue_depth = nctrl->sqsize + 1;
drivers/nvme/host/tcp.c:		set->reserved_tags = 1; /* fabric connect */
drivers/nvme/host/tcp.c:		set->numa_node = NUMA_NO_NODE;
drivers/nvme/host/tcp.c:		set->flags = BLK_MQ_F_SHOULD_MERGE;
drivers/nvme/host/tcp.c:		set->cmd_size = sizeof(struct nvme_tcp_request);
drivers/nvme/host/tcp.c:		set->driver_data = ctrl;
drivers/nvme/host/tcp.c:		set->nr_hw_queues = nctrl->queue_count - 1;
drivers/nvme/host/tcp.c:		set->timeout = NVME_IO_TIMEOUT;
drivers/nvme/host/tcp.c:		set->nr_maps = 2 /* default + read */;
drivers/nvme/host/tcp.c:	struct nvme_tcp_ctrl *ctrl = set->driver_data;
drivers/nvme/host/tcp.c:	set->map[HCTX_TYPE_DEFAULT].queue_offset = 0;
drivers/nvme/host/tcp.c:	set->map[HCTX_TYPE_READ].nr_queues = ctrl->ctrl.opts->nr_io_queues;
drivers/nvme/host/tcp.c:		set->map[HCTX_TYPE_DEFAULT].nr_queues =
drivers/nvme/host/tcp.c:		set->map[HCTX_TYPE_READ].queue_offset =
drivers/nvme/host/tcp.c:		set->map[HCTX_TYPE_DEFAULT].nr_queues =
drivers/nvme/host/tcp.c:		set->map[HCTX_TYPE_READ].queue_offset = 0;
drivers/nvme/host/tcp.c:	blk_mq_map_queues(&set->map[HCTX_TYPE_DEFAULT]);
drivers/nvme/host/tcp.c:	blk_mq_map_queues(&set->map[HCTX_TYPE_READ]);
drivers/nvme/host/pci.c:	struct nvme_dev *dev = set->driver_data;
drivers/nvme/host/pci.c:	struct nvme_dev *dev = set->driver_data;
drivers/nvme/host/pci.c:	for (i = 0, qoff = 0; i < set->nr_maps; i++) {
drivers/nvme/host/pci.c:		struct blk_mq_queue_map *map = &set->map[i];
drivers/nvme/target/loop.c:	struct nvme_loop_ctrl *ctrl = set->driver_data;
drivers/of/kobj.c:		name = safe_name(&of_kset->kobj, "base");
drivers/of/of_mdio.c:	of_property_read_u32(child, "reset-assert-us",
drivers/of/of_mdio.c:	of_property_read_u32(child, "reset-deassert-us",
drivers/of/of_mdio.c:	of_property_read_u32(np, "reset-delay-us", &mdio->reset_delay_us);
drivers/parport/parport_pc.c:		/* -1 if not there, >6 for offset-method (max BAR is 6) */
drivers/parport/parport_pc.c: * to do chipset-specific tests for some onboard ports that we know
drivers/parport/parport_serial.c:		int hi; /* -1 if not there, >6 for offset-method (max
drivers/pci/controller/dwc/pci-exynos.c:	ep->reset_gpio = of_get_named_gpio(np, "reset-gpio", 0);
drivers/pci/controller/dwc/pci-imx6.c:	imx6_pcie->reset_gpio = of_get_named_gpio(node, "reset-gpio", 0);
drivers/pci/controller/dwc/pci-imx6.c:						"reset-gpio-active-high");
drivers/pci/controller/dwc/pcie-histb.c:				"reset-gpios", 0, &of_flags);
drivers/pci/controller/dwc/pcie-kirin.c:						      "reset-gpios", 0);
drivers/pci/controller/pci-mvebu.c:	reset_gpio = of_get_named_gpio_flags(child, "reset-gpios", 0, &flags);
drivers/pci/controller/pci-mvebu.c:		of_property_read_u32(port->dn, "reset-delay-us",
drivers/pci/controller/pci-thunder-ecam.c:		v |= 0xc; /* EA entry-2. Offset-L */
drivers/pci/controller/pci-thunder-ecam.c:			v = 0xfffffffe; /* MaxOffset-L 64-bit */
drivers/pci/controller/pci-thunder-ecam.c:			v = 0x0000000f; /* MaxOffset-H */
drivers/pci/hotplug/acpiphp_ibm.c:	struct kobject *sysdir = &pci_slots_kset->kobj;
drivers/pci/hotplug/acpiphp_ibm.c:	struct kobject *sysdir = &pci_slots_kset->kobj;
drivers/pci/hotplug/pnv_php.c:	ret = of_property_read_u32(dn, "ibm,reset-by-firmware", &prop32);
drivers/pci/hotplug/rpadlpar_sysfs.c:					    &pci_slots_kset->kobj);
drivers/pci/pci-driver.c:	/* Resume device if platform firmware has put it in reset-power-on */
drivers/pci/quirks.c: * [1] http://www.intel.com/content/www/us/en/chipsets/100-series-chipset-datasheet-vol-2.html
drivers/pci/quirks.c: * [2] http://www.intel.com/content/www/us/en/chipsets/100-series-chipset-datasheet-vol-1.html
drivers/pci/quirks.c: * [3] http://www.intel.com/content/www/us/en/chipsets/100-series-chipset-spec-update.html
drivers/pci/quirks.c: * [4] http://www.intel.com/content/www/us/en/chipsets/200-series-chipset-pch-spec-update.html
drivers/pci/quirks.c: * [5] http://www.intel.com/content/www/us/en/chipsets/200-series-chipset-pch-datasheet-vol-1.html
drivers/pci/slot.c:						&pci_bus_kset->kobj);
drivers/pcmcia/i82365.c:    /* Chipset-specific functions */
drivers/perf/xgene_pmu.c:	XGENE_PMU_EVENT_ATTR(r-set-replacement,			0x1f),
drivers/phy/qualcomm/phy-qcom-qusb2.c:	if (!of_property_read_u32(dev->of_node, "qcom,imp-res-offset-value",
drivers/pinctrl/mvebu/pinctrl-mvebu.c:			if (!set->name)
drivers/pinctrl/mvebu/pinctrl-mvebu.c:			if (pctl->variant && !(pctl->variant & set->variant))
drivers/pinctrl/mvebu/pinctrl-mvebu.c:			if (strcmp(set->name, "gpio") == 0)
drivers/pinctrl/mvebu/pinctrl-mvebu.c:				set->flags = MVEBU_SETTING_GPI |
drivers/pinctrl/mvebu/pinctrl-mvebu.c:			else if (strcmp(set->name, "gpo") == 0)
drivers/pinctrl/mvebu/pinctrl-mvebu.c:				set->flags = MVEBU_SETTING_GPO;
drivers/pinctrl/mvebu/pinctrl-mvebu.c:			else if (strcmp(set->name, "gpi") == 0)
drivers/pinctrl/mvebu/pinctrl-mvebu.c:				set->flags = MVEBU_SETTING_GPI;
drivers/pinctrl/pinctrl-as3722.c:	FUNCTION_GROUP(soft-reset-in, SOFT_RESET_IN),
drivers/platform/x86/thinkpad_acpi.c:	sysfs_create_group(_kobj, &_attr_set->group)
drivers/pps/kapi.c:	ts->nsec += offset->nsec;
drivers/pps/kapi.c:	ts->sec += offset->sec;
drivers/regulator/ab3100.c: * voltage is defined in the board set-up if any.
drivers/regulator/of_regulator.c:	if (of_property_read_bool(np, "regulator-allow-set-load"))
drivers/regulator/ti-abb-regulator.c:	pname = "ti,ldovbb-vset-mask";
drivers/reset/Makefile:obj-$(CONFIG_RESET_A10SR) += reset-a10sr.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_ATH79) += reset-ath79.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_AXS10X) += reset-axs10x.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_BERLIN) += reset-berlin.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_HSDK) += reset-hsdk.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_IMX7) += reset-imx7.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_LANTIQ) += reset-lantiq.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_LPC18XX) += reset-lpc18xx.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_MESON) += reset-meson.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_OXNAS) += reset-oxnas.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_PISTACHIO) += reset-pistachio.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_SIMPLE) += reset-simple.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_STM32MP157) += reset-stm32mp1.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_SUNXI) += reset-sunxi.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_TI_SCI) += reset-ti-sci.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_TI_SYSCON) += reset-ti-syscon.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_UNIPHIER) += reset-uniphier.o
drivers/reset/Makefile:obj-$(CONFIG_RESET_ZYNQ) += reset-zynq.o
drivers/reset/core.c:#include <linux/reset-controller.h>
drivers/reset/core.c:						 "reset-names", id);
drivers/reset/core.c:	ret = of_parse_phandle_with_args(node, "resets", "#reset-cells",
drivers/reset/core.c:	count = of_count_phandle_with_args(node, "resets", "#reset-cells");
drivers/reset/hisilicon/Makefile:obj-$(CONFIG_COMMON_RESET_HI3660) += reset-hi3660.o
drivers/reset/hisilicon/hi6220_reset.c:#include <linux/reset-controller.h>
drivers/reset/hisilicon/hi6220_reset.c:		.name = "reset-hi6220",
drivers/reset/hisilicon/reset-hi3660.c:#include <linux/reset-controller.h>
drivers/reset/reset-a10sr.c: * Adapted from reset-socfpga.c
drivers/reset/reset-a10sr.c:#include <linux/reset-controller.h>
drivers/reset/reset-ath79.c:#include <linux/reset-controller.h>
drivers/reset/reset-ath79.c:	spin_lock_irqsave(&ath79_reset->lock, flags);
drivers/reset/reset-ath79.c:	val = readl(ath79_reset->base);
drivers/reset/reset-ath79.c:	writel(val, ath79_reset->base);
drivers/reset/reset-ath79.c:	spin_unlock_irqrestore(&ath79_reset->lock, flags);
drivers/reset/reset-ath79.c:	val = readl(ath79_reset->base);
drivers/reset/reset-ath79.c:	ath79_reset_assert(&ath79_reset->rcdev, FULL_CHIP_RESET);
drivers/reset/reset-ath79.c:	ath79_reset->base = devm_ioremap_resource(&pdev->dev, res);
drivers/reset/reset-ath79.c:	if (IS_ERR(ath79_reset->base))
drivers/reset/reset-ath79.c:		return PTR_ERR(ath79_reset->base);
drivers/reset/reset-ath79.c:	spin_lock_init(&ath79_reset->lock);
drivers/reset/reset-ath79.c:	ath79_reset->rcdev.ops = &ath79_reset_ops;
drivers/reset/reset-ath79.c:	ath79_reset->rcdev.owner = THIS_MODULE;
drivers/reset/reset-ath79.c:	ath79_reset->rcdev.of_node = pdev->dev.of_node;
drivers/reset/reset-ath79.c:	ath79_reset->rcdev.of_reset_n_cells = 1;
drivers/reset/reset-ath79.c:	ath79_reset->rcdev.nr_resets = 32;
drivers/reset/reset-ath79.c:	err = devm_reset_controller_register(&pdev->dev, &ath79_reset->rcdev);
drivers/reset/reset-ath79.c:	ath79_reset->restart_nb.notifier_call = ath79_reset_restart_handler;
drivers/reset/reset-ath79.c:	ath79_reset->restart_nb.priority = 128;
drivers/reset/reset-ath79.c:	err = register_restart_handler(&ath79_reset->restart_nb);
drivers/reset/reset-axs10x.c:#include <linux/reset-controller.h>
drivers/reset/reset-berlin.c:#include <linux/reset-controller.h>
drivers/reset/reset-hsdk.c:#include <linux/reset-controller.h>
drivers/reset/reset-imx7.c:#include <linux/reset-controller.h>
drivers/reset/reset-lantiq.c:#include <linux/reset-controller.h>
drivers/reset/reset-lpc18xx.c:#include <linux/reset-controller.h>
drivers/reset/reset-meson.c:#include <linux/reset-controller.h>
drivers/reset/reset-oxnas.c: * drivers/reset/reset-oxnas.c
drivers/reset/reset-oxnas.c:#include <linux/reset-controller.h>
drivers/reset/reset-pistachio.c:#include <linux/reset-controller.h>
drivers/reset/reset-simple.c:#include <linux/reset-controller.h>
drivers/reset/reset-simple.c:#include "reset-simple.h"
drivers/reset/reset-simple.h:#include <linux/reset-controller.h>
drivers/reset/reset-stm32mp1.c:#include <linux/reset-controller.h>
drivers/reset/reset-sunxi.c:#include <linux/reset-controller.h>
drivers/reset/reset-sunxi.c:#include "reset-simple.h"
drivers/reset/reset-ti-sci.c:#include <linux/reset-controller.h>
drivers/reset/reset-ti-syscon.c:#include <linux/reset-controller.h>
drivers/reset/reset-ti-syscon.c:	list = of_get_property(np, "ti,reset-bits", &size);
drivers/reset/reset-uniphier.c:#include <linux/reset-controller.h>
drivers/reset/reset-zynq.c:#include <linux/reset-controller.h>
drivers/reset/sti/Makefile:obj-$(CONFIG_STI_RESET_SYSCFG) += reset-syscfg.o
drivers/reset/sti/Makefile:obj-$(CONFIG_STIH407_RESET) += reset-stih407.o
drivers/reset/sti/reset-stih407.c:#include "reset-syscfg.h"
drivers/reset/sti/reset-stih407.c:		.name = "reset-stih407",
drivers/reset/sti/reset-syscfg.c:#include "reset-syscfg.h"
drivers/reset/sti/reset-syscfg.h:#include <linux/reset-controller.h>
drivers/reset/tegra/Makefile:obj-$(CONFIG_RESET_TEGRA_BPMP) += reset-bpmp.o
drivers/reset/tegra/reset-bpmp.c:#include <linux/reset-controller.h>
drivers/rtc/rtc-jz4740.c:			of_property_read_u32(np, "reset-pin-assert-time-ms",
drivers/rtc/rtc-pm8xxx.c:						      "allow-set-time");
drivers/s390/char/sclp_config.c:	rc = sysfs_create_bin_file(&ofb_kset->kobj, &ofb_bin_attr);
drivers/s390/char/sclp_cpi_sys.c:	rc = sysfs_create_group(&cpi_kset->kobj, &cpi_attr_group);
drivers/s390/char/sclp_ocf.c:	kobject_uevent(&ocf_kset->kobj, KOBJ_CHANGE);
drivers/s390/char/sclp_ocf.c:	rc = sysfs_create_group(&ocf_kset->kobj, &ocf_attr_group);
drivers/s390/cio/idset.c:		set->num_ssid = num_ssid;
drivers/s390/cio/idset.c:		set->num_id = num_id;
drivers/s390/cio/idset.c:		memset(set->bitmap, 0, bitmap_size(num_ssid, num_id));
drivers/s390/cio/idset.c:	memset(set->bitmap, 0xff, bitmap_size(set->num_ssid, set->num_id));
drivers/s390/cio/idset.c:	set_bit(ssid * set->num_id + id, set->bitmap);
drivers/s390/cio/idset.c:	clear_bit(ssid * set->num_id + id, set->bitmap);
drivers/s390/cio/idset.c:	return test_bit(ssid * set->num_id + id, set->bitmap);
drivers/s390/cio/idset.c:	bitnum = find_first_bit(set->bitmap, set->num_ssid * set->num_id);
drivers/s390/cio/idset.c:	if (bitnum >= set->num_ssid * set->num_id)
drivers/s390/cio/idset.c:	*ssid = bitnum / set->num_id;
drivers/s390/cio/idset.c:	*id = bitnum % set->num_id;
drivers/s390/cio/idset.c:	int pos = schid.ssid * set->num_id + schid.sch_no;
drivers/s390/cio/idset.c:	bitmap_clear(set->bitmap, pos, set->num_id - schid.sch_no);
drivers/s390/cio/idset.c:	return bitmap_empty(set->bitmap, set->num_ssid * set->num_id);
drivers/scsi/Kconfig:	  since the driver will get this information from the user set-up.  It
drivers/scsi/advansys.c:	 * then 'termination' was set-up in AdvInitFrom3550EEPROM() and
drivers/scsi/advansys.c:	 * 'termination' was set-up in AdvInitFrom38C0800EEPROM() and is ready
drivers/scsi/advansys.c:	 * then 'termination' was set-up in AscInitFrom38C1600EEPROM() and is
drivers/scsi/bfa/bfa_port.c: * @brief CEE ISR for reset-stats responses from f/w
drivers/scsi/csiostor/csio_hw.c: * csio_do_reset- Perform the device reset.
drivers/scsi/csiostor/csio_init.c:			rv = csio_wr_iq_create(hw, NULL, sqset->iq_idx,
drivers/scsi/csiostor/csio_init.c:					       sqset->intr_idx, i, false, NULL);
drivers/scsi/csiostor/csio_init.c:			rv = csio_wr_eq_create(hw, NULL, sqset->eq_idx,
drivers/scsi/csiostor/csio_init.c:					       sqset->iq_idx, i, NULL);
drivers/scsi/csiostor/csio_init.c:				sqset->eq_idx = orig->eq_idx;
drivers/scsi/csiostor/csio_init.c:				sqset->iq_idx = orig->iq_idx;
drivers/scsi/csiostor/csio_init.c:			sqset->eq_idx = idx;
drivers/scsi/csiostor/csio_init.c:			sqset->iq_idx = idx;
drivers/scsi/csiostor/csio_isr.c:			struct csio_q *q = hw->wrm.q_arr[sqset->iq_idx];
drivers/scsi/csiostor/csio_scsi.c:	ioreq->iq_idx		= sqset->iq_idx;
drivers/scsi/csiostor/csio_scsi.c:	ioreq->eq_idx		= sqset->eq_idx;
drivers/scsi/csiostor/csio_scsi.c:	ioreq->eq_idx = sqset->eq_idx;
drivers/scsi/csiostor/csio_scsi.c:	ioreq->iq_idx		= sqset->iq_idx;
drivers/scsi/csiostor/csio_scsi.c:	ioreq->eq_idx		= sqset->eq_idx;
drivers/scsi/hisi_sas/hisi_sas_main.c:		if (device_property_read_u32(dev, "ctrl-reset-reg",
drivers/scsi/hisi_sas/hisi_sas_main.c:			dev_err(dev, "could not get property ctrl-reset-reg\n");
drivers/scsi/hisi_sas/hisi_sas_main.c:		if (device_property_read_u32(dev, "ctrl-reset-sts-reg",
drivers/scsi/hisi_sas/hisi_sas_main.c:			dev_err(dev, "could not get property ctrl-reset-sts-reg\n");
drivers/scsi/iscsi_boot_sysfs.c:	boot_kobj->kobj.kset = boot_kset->kset;
drivers/scsi/iscsi_boot_sysfs.c:	list_add_tail(&boot_kobj->list, &boot_kset->kobj_list);
drivers/scsi/iscsi_boot_sysfs.c:	boot_kset->kset = kset_create_and_add(set_name, NULL, firmware_kobj);
drivers/scsi/iscsi_boot_sysfs.c:	if (!boot_kset->kset) {
drivers/scsi/iscsi_boot_sysfs.c:	INIT_LIST_HEAD(&boot_kset->kobj_list);
drivers/scsi/iscsi_boot_sysfs.c:				 &boot_kset->kobj_list, list)
drivers/scsi/iscsi_boot_sysfs.c:	kset_unregister(boot_kset->kset);
drivers/scsi/lpfc/lpfc_sli.c:	shdr = (union lpfc_sli4_cfg_shdr *)&cq_set->cfg_shdr;
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request,
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, cq->page_count);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, 1);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, 1);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, 0);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, numcq);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request,
drivers/scsi/lpfc/lpfc_sli.c:					       &cq_set->u.request,
drivers/scsi/lpfc/lpfc_sli.c:					       &cq_set->u.request,
drivers/scsi/lpfc/lpfc_sli.c:				       &cq_set->u.request, LPFC_CQ_CNT_256);
drivers/scsi/lpfc/lpfc_sli.c:				       &cq_set->u.request, LPFC_CQ_CNT_512);
drivers/scsi/lpfc/lpfc_sli.c:				       &cq_set->u.request, LPFC_CQ_CNT_1024);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			       &cq_set->u.request, eq->queue_id);
drivers/scsi/lpfc/lpfc_sli.c:			cq_set->u.request.page[cnt].addr_lo =
drivers/scsi/lpfc/lpfc_sli.c:			cq_set->u.request.page[cnt].addr_hi =
drivers/scsi/lpfc/lpfc_sli.c:	rc = bf_get(lpfc_mbx_cq_create_set_base_id, &cq_set->u.response);
drivers/scsi/megaraid/megaraid_sas_base.c:	return readl(&instance->reg_set->outbound_msg_0);
drivers/scsi/megaraid/megaraid_sas_base.c:	return readl(&instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/megaraid/megaraid_sas_base.c:	return readl(&instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/megaraid/megaraid_sas_base.c:	return readl(&instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/megaraid/megaraid_sas_base.c:	u32 __iomem *seq_offset = &reg_set->seq_offset;
drivers/scsi/megaraid/megaraid_sas_base.c:	u32 __iomem *hostdiag_offset = &reg_set->host_diag;
drivers/scsi/megaraid/megaraid_sas_base.c:		seq_offset = &reg_set->fusion_seq_offset;
drivers/scsi/megaraid/megaraid_sas_base.c:		hostdiag_offset = &reg_set->fusion_host_diag;
drivers/scsi/megaraid/megaraid_sas_base.c:			writel(MFI_STOP_ADP, &instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_base.c:			readl(&instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_base.c:			&instance->reg_set->inbound_doorbell);
drivers/scsi/megaraid/megaraid_sas_base.c:				  &instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_base.c:					&instance->reg_set->inbound_doorbell);
drivers/scsi/megaraid/megaraid_sas_base.c:				       &instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_base.c:					&instance->reg_set->inbound_doorbell);
drivers/scsi/megaraid/megaraid_sas_base.c:					&instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_base.c:							    reg_set->
drivers/scsi/megaraid/megaraid_sas_base.c:					&instance->reg_set->inbound_doorbell);
drivers/scsi/megaraid/megaraid_sas_base.c:				      &instance->reg_set->outbound_scratch_pad_2);
drivers/scsi/megaraid/megaraid_sas_base.c:			(instance, &instance->reg_set->outbound_scratch_pad_1);
drivers/scsi/megaraid/megaraid_sas_base.c:				      &instance->reg_set->outbound_scratch_pad_3);
drivers/scsi/megaraid/megaraid_sas_base.c:				(instance, &instance->reg_set->outbound_scratch_pad_1);
drivers/scsi/megaraid/megaraid_sas_fp.c:		if (span_set->span_row_data_width == 0)
drivers/scsi/megaraid/megaraid_sas_fp.c:		if (row > span_set->data_row_end)
drivers/scsi/megaraid/megaraid_sas_fp.c:		if (span_set->span_row_data_width == 0)
drivers/scsi/megaraid/megaraid_sas_fp.c:		if (strip > span_set->data_strip_end)
drivers/scsi/megaraid/megaraid_sas_fp.c:		span_set_Strip = strip - span_set->data_strip_start;
drivers/scsi/megaraid/megaraid_sas_fp.c:				span_set->span_row_data_width);
drivers/scsi/megaraid/megaraid_sas_fp.c:				span_set->span_row_data_width) * span_set->diff;
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->strip_offset[span])
drivers/scsi/megaraid/megaraid_sas_fp.c:		retval = (span_set->data_row_start + span_set_Row +
drivers/scsi/megaraid/megaraid_sas_fp.c:		if (span_set->span_row_data_width == 0)
drivers/scsi/megaraid/megaraid_sas_fp.c:		if (row > span_set->data_row_end)
drivers/scsi/megaraid/megaraid_sas_fp.c:						(((row - span_set->data_row_start)
drivers/scsi/megaraid/megaraid_sas_fp.c:					strip *= span_set->span_row_data_width;
drivers/scsi/megaraid/megaraid_sas_fp.c:					strip += span_set->data_strip_start;
drivers/scsi/megaraid/megaraid_sas_fp.c:					strip += span_set->strip_offset[span];
drivers/scsi/megaraid/megaraid_sas_fp.c:		if (span_set->span_row_data_width == 0)
drivers/scsi/megaraid/megaraid_sas_fp.c:		if (strip > span_set->data_strip_end)
drivers/scsi/megaraid/megaraid_sas_fp.c:				((strip - span_set->data_strip_start),
drivers/scsi/megaraid/megaraid_sas_fp.c:				span_set->span_row_data_width);
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->strip_offset[span])
drivers/scsi/megaraid/megaraid_sas_fp.c:						span_set->strip_offset[span];
drivers/scsi/megaraid/megaraid_sas_fp.c:				span_set->diff = le32_to_cpu(quad->diff);
drivers/scsi/megaraid/megaraid_sas_fp.c:						span_set->strip_offset[count] =
drivers/scsi/megaraid/megaraid_sas_fp.c:				span_set->span_row_data_width = span_row_width;
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->log_start_lba = 0;
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->log_end_lba =
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->span_row_start = 0;
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->span_row_end = span_row - 1;
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->data_strip_start = 0;
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->data_strip_end =
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->data_row_start = 0;
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->data_row_end =
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->log_start_lba =
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->log_end_lba =
drivers/scsi/megaraid/megaraid_sas_fp.c:						span_set->log_start_lba +
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->span_row_start =
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->span_row_end =
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->span_row_start + span_row - 1;
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->data_strip_start =
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->data_strip_end =
drivers/scsi/megaraid/megaraid_sas_fp.c:						span_set->data_strip_start +
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->data_row_start =
drivers/scsi/megaraid/megaraid_sas_fp.c:					span_set->data_row_end =
drivers/scsi/megaraid/megaraid_sas_fp.c:						span_set->data_row_start +
drivers/scsi/megaraid/megaraid_sas_fusion.c:	writeq(req_data, &instance->reg_set->inbound_low_queue_port);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		&instance->reg_set->inbound_low_queue_port);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		&instance->reg_set->inbound_high_queue_port);
drivers/scsi/megaraid/megaraid_sas_fusion.c:			      &instance->reg_set->outbound_scratch_pad_2) & 0x00FFFF;
drivers/scsi/megaraid/megaraid_sas_fusion.c:		(instance, &instance->reg_set->outbound_scratch_pad_1);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		if (megasas_readl(instance, &instance->reg_set->doorbell) & 1)
drivers/scsi/megaraid/megaraid_sas_fusion.c:				      &instance->reg_set->outbound_scratch_pad_1);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	return megasas_readl(instance, &instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	writel(MPI2_WRSEQ_FLUSH_KEY_VALUE, &instance->reg_set->fusion_seq_offset);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	writel(MPI2_WRSEQ_1ST_KEY_VALUE, &instance->reg_set->fusion_seq_offset);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	writel(MPI2_WRSEQ_2ND_KEY_VALUE, &instance->reg_set->fusion_seq_offset);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	writel(MPI2_WRSEQ_3RD_KEY_VALUE, &instance->reg_set->fusion_seq_offset);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	writel(MPI2_WRSEQ_4TH_KEY_VALUE, &instance->reg_set->fusion_seq_offset);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	writel(MPI2_WRSEQ_5TH_KEY_VALUE, &instance->reg_set->fusion_seq_offset);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	writel(MPI2_WRSEQ_6TH_KEY_VALUE, &instance->reg_set->fusion_seq_offset);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	host_diag = megasas_readl(instance, &instance->reg_set->fusion_host_diag);
drivers/scsi/megaraid/megaraid_sas_fusion.c:					  &instance->reg_set->fusion_host_diag);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		&instance->reg_set->fusion_host_diag);
drivers/scsi/megaraid/megaraid_sas_fusion.c:	host_diag = megasas_readl(instance, &instance->reg_set->fusion_host_diag);
drivers/scsi/megaraid/megaraid_sas_fusion.c:					  &instance->reg_set->fusion_host_diag);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		       &instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		readl(&instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		status_reg = megasas_readl(instance, &instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_fusion.c:			&instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		readl(&instance->reg_set->doorbell);
drivers/scsi/megaraid/megaraid_sas_fusion.c:				&instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/megaraid/megaraid_sas_fusion.c:			readl(&instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		writel(status_reg, &instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		readl(&instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		writel(status_reg, &instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/megaraid/megaraid_sas_fusion.c:		readl(&instance->reg_set->outbound_scratch_pad_0);
drivers/scsi/qla2xxx/qla_def.h:					     * reset-recovery completion is
drivers/scsi/qla2xxx/qla_init.c:	/* Set NEED-RESET iff in READY state and we are the reset-owner */
drivers/scsi/qla2xxx/qla_init.c:	 * Perform reset if we are the reset-owner,
drivers/scsi/qla2xxx/qla_nx2.c:	 * non-reset-owner to force a reset. Non-reset-owner sets
drivers/scsi/qla2xxx/qla_nx2.c:	 * the IDC_CTRL BIT0 to prevent Reset-owner from doing a Reset
drivers/scsi/qla4xxx/ql4_83xx.c:		 * non-reset-owner to force a reset. Non-reset-owner sets
drivers/scsi/qla4xxx/ql4_83xx.c:		 * the IDC_CTRL BIT0 to prevent Reset-owner from doing a Reset
drivers/scsi/scsi_lib.c:	struct Scsi_Host *shost = set->driver_data;
drivers/scsi/scsi_lib.c:	return blk_mq_map_queues(&set->map[0]);
drivers/scsi/sym53c8xx_2/sym_hipd.c:	 *  to chip features, user set-up and driver set-up.
drivers/scsi/sym53c8xx_2/sym_nvram.c: *  Get target set-up from Symbios format NVRAM.
drivers/scsi/sym53c8xx_2/sym_nvram.c: *  Get target set-up from Tekram format NVRAM.
drivers/slimbus/qcom-ctrl.c:		dev_err(&pdev->dev, "ref-clock set-rate failed:%d\n", ret);
drivers/soc/dove/pmu.c:#include <linux/reset-controller.h>
drivers/soc/dove/pmu.c: *	#reset-cells = 1;
drivers/soc/dove/pmu.c:		ret = of_parse_phandle_with_args(np, "resets", "#reset-cells",
drivers/soc/lantiq/fpi-bus.c:	ret = device_property_read_u32(dev, "lantiq,offset-endianness",
drivers/soc/renesas/rcar-rst.c:	{ .compatible = "renesas,r8a7778-reset-wdt", .data = &rcar_rst_gen1 },
drivers/soc/renesas/rcar-rst.c:	{ .compatible = "renesas,r8a7779-reset-wdt", .data = &rcar_rst_gen1 },
drivers/soundwire/mipi_disco.c:			"mipi-sdw-clockstopprepare-hard-reset-behavior",
drivers/staging/comedi/comedi.h: * @data:		Pointer to miscellaneous set-up data (not used).
drivers/staging/comedi/comedi.h: * @data_len:		Length of miscellaneous set-up data.
drivers/staging/comedi/comedi.h: * This is used with the %COMEDI_CMD or %COMEDI_CMDTEST ioctl to set-up
drivers/staging/comedi/comedi_fops.c: * asynchronous acquisition command set-up
drivers/staging/comedi/drivers.c: * low-level driver's 'auto_attach' handler to set-up the hardware and
drivers/staging/comedi/drivers/amplc_dio200_pci.c: * This function does some special set-up for the PCIe boards
drivers/staging/fbtft/fbtft-core.c:	ret = fbtft_request_one_gpio(par, "reset-gpios", 0, &par->gpio.reset);
drivers/staging/greybus/arche-apb-ctrl.c:	apb->resetn_gpio = of_get_named_gpio(np, "reset-gpios", 0);
drivers/staging/greybus/arche-platform.c:							     "svc,reset-active-high");
drivers/staging/greybus/arche-platform.c:							"svc,reset-gpio",
drivers/staging/greybus/arche-platform.c:		dev_err(dev, "failed to get reset-gpio\n");
drivers/staging/greybus/audio_manager.c:	gb_audio_manager_sysfs_init(&manager_kset->kobj);
drivers/staging/greybus/gpio.c:	 * No set-up of the hardware will happen if IRQ_TYPE_NONE
drivers/staging/greybus/light.c:	fset->min = channel->intensity_uA.min;
drivers/staging/greybus/light.c:	fset->max = channel->intensity_uA.max;
drivers/staging/greybus/light.c:	fset->step = channel->intensity_uA.step;
drivers/staging/greybus/light.c:	fset->val = channel->intensity_uA.max;
drivers/staging/greybus/light.c:		fset->min = channel->timeout_us.min;
drivers/staging/greybus/light.c:		fset->max = channel->timeout_us.max;
drivers/staging/greybus/light.c:		fset->step = channel->timeout_us.step;
drivers/staging/greybus/light.c:		fset->val = channel->timeout_us.max;
drivers/staging/greybus/light.c:	fset->min = le32_to_cpu(conf.intensity_min_uA);
drivers/staging/greybus/light.c:	fset->max = le32_to_cpu(conf.intensity_max_uA);
drivers/staging/greybus/light.c:	fset->step = le32_to_cpu(conf.intensity_step_uA);
drivers/staging/greybus/light.c:	channel->led->max_brightness = (fset->max - fset->min) / fset->step;
drivers/staging/greybus/light.c:		fset->min = le32_to_cpu(conf.timeout_min_us);
drivers/staging/greybus/light.c:		fset->max = le32_to_cpu(conf.timeout_max_us);
drivers/staging/greybus/light.c:		fset->step = le32_to_cpu(conf.timeout_step_us);
drivers/staging/mt29f_spinand/mt29f_spinand.c: * spinand_reset- send RESET command "0xff" to the Nand device.
drivers/staging/mt7621-dts/mt7621.dtsi:			reset-names = "i2c";
drivers/staging/mt7621-dts/mt7621.dtsi:			reset-names = "i2s";
drivers/staging/mt7621-dts/mt7621.dtsi:			reset-names = "spi";
drivers/staging/mt7621-dts/mt7621.dtsi:			reset-names = "dma";
drivers/staging/mt7621-dts/mt7621.dtsi:			reset-names = "hsdma";
drivers/staging/mt7621-dts/mt7621.dtsi:		#reset-cells = <1>;
drivers/staging/mt7621-dts/mt7621.dtsi:		reset-names = "fe", "eth";
drivers/staging/mt7621-dts/mt7621.dtsi:		reset-names = "pcie0", "pcie1", "pcie2";
drivers/staging/mt7621-eth/Documentation/devicetree/bindings/net/mediatek-net-gsw.txt:- mediatek,reset-pin: phandle describing the reset GPIO
drivers/staging/mt7621-eth/Documentation/devicetree/bindings/net/mediatek-net-gsw.txt:	mediatek,reset-pin = <&pio 15 0>;
drivers/staging/mt7621-eth/mtk_eth_soc.c:/* these bits are also exposed via the reset-controller API. however the switch
drivers/staging/mt7621-eth/mtk_eth_soc.c: * reset-controller api does not provide this feature yet. Do the reset manually
drivers/staging/mt7621-eth/mtk_eth_soc.c: * until we fixed the reset-controller api to be able to do this
drivers/staging/rtl8188eu/hal/phy.c:						offset--;
drivers/staging/rtl8188eu/hal/rtl8188eu_xmit.c:		pfirstframe->pkt_offset--;
drivers/staging/rtl8192u/r819xU_phy.c:	/* --set BB Global Reset-- */
drivers/staging/rtl8723bs/hal/HalPhyRf.c:					_offset--;\
drivers/staging/rtlwifi/efuse.c:				"offset-%d Worden=%x\n", offset, wren);
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:			psd_set->seq_num, h2c_seq);
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	if (h2c_seq != psd_set->seq_num) {
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:		       psd_set->seq_num, h2c_seq);
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	if (psd_set->process_status != HALMAC_CMD_PROCESS_SENDING) {
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	psd_set->data_size = total_size;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	if (!psd_set->data)
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:		psd_set->data = kzalloc(psd_set->data_size, GFP_KERNEL);
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:		psd_set->segment_size = segment_size;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	memcpy(psd_set->data + segment_id * psd_set->segment_size,
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	psd_set->process_status = process_status;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:				  process_status, psd_set->data,
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:				  psd_set->data_size);
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	*process_status = cfg_para_state_set->process_status;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	*process_status = efuse_state_set->process_status;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	*process_status = efuse_state_set->process_status;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	*process_status = scan_state_set->process_status;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	*process_status = update_packet_set->process_status;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	*process_status = iqk_set->process_status;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	*process_status = power_tracking_state_set->process_status;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:	*process_status = psd_set->process_status;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:		if (*size < psd_set->data_size) {
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:			*size = psd_set->data_size;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:		*size = psd_set->data_size;
drivers/staging/rtlwifi/halmac/halmac_88xx/halmac_func_88xx.c:		memcpy(data, psd_set->data, *size);
drivers/staging/rtlwifi/phydm/halphyrf_ce.c:					_offset--;                             \
drivers/target/target_core_iblock.c:	/* convert offset-bytes to offset-lbas */
drivers/thermal/broadcom/bcm2835_thermal.c:	regset->regs = bcm2835_thermal_regs;
drivers/thermal/broadcom/bcm2835_thermal.c:	regset->nregs = ARRAY_SIZE(bcm2835_thermal_regs);
drivers/thermal/broadcom/bcm2835_thermal.c:	regset->base = data->regs;
drivers/tty/ipwireless/hardware.c:	/* True if we are to send the set-up data to the hardware. */
drivers/tty/sysrq.c:	np = of_find_node_by_path("/chosen/linux,sysrq-reset-seq");
drivers/usb/chipidea/ci_hdrc_msm.c:#include <linux/reset-controller.h>
drivers/usb/core/driver.c:			 * a reset-resume and any of its interface drivers
drivers/usb/core/hub.c: * is ready for a reset-resume, or should be disconnected.
drivers/usb/core/hub.c:	 * so try a reset-resume instead.
drivers/usb/core/hub.c:		udev->reset_resume ? "finish reset-resume" : "finish resume");
drivers/usb/core/hub.c:		 * we don't want to perform a reset-resume.  We'll fail the
drivers/usb/core/hub.c:		/* If a normal resume failed, try doing a reset-resume */
drivers/usb/core/hub.c:			dev_dbg(&udev->dev, "retry with reset-resume\n");
drivers/usb/dwc2/debugfs.c:	hsotg->regset->regs = dwc2_regs;
drivers/usb/dwc2/debugfs.c:	hsotg->regset->nregs = ARRAY_SIZE(dwc2_regs);
drivers/usb/dwc2/debugfs.c:	hsotg->regset->base = hsotg->regs;
drivers/usb/dwc3/debugfs.c:	dwc->regset->regs = dwc3_regs;
drivers/usb/dwc3/debugfs.c:	dwc->regset->nregs = ARRAY_SIZE(dwc3_regs);
drivers/usb/dwc3/debugfs.c:	dwc->regset->base = dwc->regs - DWC3_GLOBALS_REGS_START;
drivers/usb/dwc3/dwc3-pci.c:	{ "reset-gpios", &reset_gpios, 1 },
drivers/usb/gadget/function/Makefile:usb_f_ecm_subset-y		:= f_subset.o
drivers/usb/gadget/udc/snps_udc_core.c:		VDBG(dev, "TDC set- completion\n");
drivers/usb/host/ehci-platform.c:					  "needs-reset-on-resume"))
drivers/usb/host/whci/asl.c:	n = qset->list_node.next;
drivers/usb/host/whci/asl.c:	p = qset->list_node.prev;
drivers/usb/host/whci/asl.c:	list_move(&qset->list_node, &whc->async_list);
drivers/usb/host/whci/asl.c:	qset->in_sw_list = true;
drivers/usb/host/whci/asl.c:	whc_qset_set_link_ptr(&qset->qh.link, next->qset_dma);
drivers/usb/host/whci/asl.c:	whc_qset_set_link_ptr(&prev->qh.link, qset->qset_dma);
drivers/usb/host/whci/asl.c:	qset->in_hw_list = true;
drivers/usb/host/whci/asl.c:	list_move(&qset->list_node, &whc->async_removed_list);
drivers/usb/host/whci/asl.c:	qset->in_sw_list = false;
drivers/usb/host/whci/asl.c:	qset->in_hw_list = false;
drivers/usb/host/whci/asl.c:	while (qset->ntds) {
drivers/usb/host/whci/asl.c:		td = &qset->qtd[qset->td_start];
drivers/usb/host/whci/asl.c:	if (!qset->remove)
drivers/usb/host/whci/asl.c:	if (qset->remove && qset->ntds == 0) {
drivers/usb/host/whci/asl.c:	le_writeq(qset->qset_dma | QH_LINK_NTDS(8), whc->base + WUSBASYNCLISTADDR);
drivers/usb/host/whci/asl.c:		if (!qset->in_hw_list) {
drivers/usb/host/whci/asl.c:		if (qset->reset) {
drivers/usb/host/whci/asl.c:			if (!list_empty(&qset->stds)) {
drivers/usb/host/whci/asl.c:		if (!qset->in_sw_list && !qset->remove)
drivers/usb/host/whci/asl.c:	list_for_each_entry_safe(std, t, &qset->stds, list_node) {
drivers/usb/host/whci/asl.c:	qset->remove = 1;
drivers/usb/host/whci/asl.c:		list_del(&qset->list_node);
drivers/usb/host/whci/debug.c:	seq_printf(s, "qset %08x", (u32)qset->qset_dma);
drivers/usb/host/whci/debug.c:	if (&qset->list_node == qset->whc->async_list.prev) {
drivers/usb/host/whci/debug.c:			   qset->qh.info1 & 0x0f,
drivers/usb/host/whci/debug.c:			   (qset->qh.info1 >> 4) & 0x1 ? "in" : "out",
drivers/usb/host/whci/debug.c:			   qh_type[(qset->qh.info1 >> 5) & 0x7],
drivers/usb/host/whci/debug.c:			   (qset->qh.info1 >> 16) & 0xffff);
drivers/usb/host/whci/debug.c:	seq_printf(s, "  -> %08x\n", (u32)qset->qh.link);
drivers/usb/host/whci/debug.c:		   qset->qh.info1, qset->qh.info2,  qset->qh.info3);
drivers/usb/host/whci/debug.c:		   qset->qh.status, qset->qh.err_count, qset->qh.cur_window);
drivers/usb/host/whci/debug.c:		   qset->qh.overlay.qtd.status, qset->qh.overlay.qtd.options);
drivers/usb/host/whci/debug.c:			i == qset->td_start ? 'S' : ' ',
drivers/usb/host/whci/debug.c:			i == qset->td_end ? 'E' : ' ',
drivers/usb/host/whci/debug.c:			i, qset->qtd[i].status, qset->qtd[i].options,
drivers/usb/host/whci/debug.c:			(u32)qset->qtd[i].page_list_ptr);
drivers/usb/host/whci/debug.c:	seq_printf(s, "  ntds: %d\n", qset->ntds);
drivers/usb/host/whci/debug.c:	list_for_each_entry(std, &qset->stds, list_node) {
drivers/usb/host/whci/debug.c:				std->qtd - &qset->qtd[0],
drivers/usb/host/whci/hcd.c:		qset->remove = 1;
drivers/usb/host/whci/hcd.c:		qset->reset = 1;
drivers/usb/host/whci/pzl.c:	uint8_t bInterval = qset->ep->desc.bInterval;
drivers/usb/host/whci/pzl.c:	list_move(&qset->list_node, &whc->periodic_list[period]);
drivers/usb/host/whci/pzl.c:	qset->in_sw_list = true;
drivers/usb/host/whci/pzl.c:	list_move(&qset->list_node, &whc->periodic_removed_list);
drivers/usb/host/whci/pzl.c:	qset->in_hw_list = false;
drivers/usb/host/whci/pzl.c:	qset->in_sw_list = false;
drivers/usb/host/whci/pzl.c:	while (qset->ntds) {
drivers/usb/host/whci/pzl.c:		t = qset->td_start;
drivers/usb/host/whci/pzl.c:		td = &qset->qtd[qset->td_start];
drivers/usb/host/whci/pzl.c:	if (!qset->remove)
drivers/usb/host/whci/pzl.c:	if (qset->remove && qset->ntds == 0) {
drivers/usb/host/whci/pzl.c:			whc_qset_set_link_ptr(&qset->qh.link, tmp_qh);
drivers/usb/host/whci/pzl.c:			tmp_qh = qset->qset_dma;
drivers/usb/host/whci/pzl.c:			qset->in_hw_list = true;
drivers/usb/host/whci/pzl.c:			if (!qset->in_hw_list)
drivers/usb/host/whci/pzl.c:		if (qset->reset) {
drivers/usb/host/whci/pzl.c:			if (!list_empty(&qset->stds)) {
drivers/usb/host/whci/pzl.c:		if (!qset->in_sw_list && !qset->remove)
drivers/usb/host/whci/pzl.c:	list_for_each_entry_safe(std, t, &qset->stds, list_node) {
drivers/usb/host/whci/pzl.c:	qset->remove = 1;
drivers/usb/host/whci/qset.c:	qset->qset_dma = dma;
drivers/usb/host/whci/qset.c:	qset->whc = whc;
drivers/usb/host/whci/qset.c:	INIT_LIST_HEAD(&qset->list_node);
drivers/usb/host/whci/qset.c:	INIT_LIST_HEAD(&qset->stds);
drivers/usb/host/whci/qset.c:	qset->max_packet = le16_to_cpu(urb->ep->desc.wMaxPacketSize);
drivers/usb/host/whci/qset.c:	epcd = (struct usb_wireless_ep_comp_descriptor *)qset->ep->extra;
drivers/usb/host/whci/qset.c:		qset->max_seq = epcd->bMaxSequence;
drivers/usb/host/whci/qset.c:		qset->max_burst = epcd->bMaxBurst;
drivers/usb/host/whci/qset.c:		qset->max_seq = 2;
drivers/usb/host/whci/qset.c:		qset->max_burst = 1;
drivers/usb/host/whci/qset.c:	qset->qh.info1 = cpu_to_le32(
drivers/usb/host/whci/qset.c:		| QH_INFO1_MAX_PKT_LEN(qset->max_packet)
drivers/usb/host/whci/qset.c:	qset->qh.info2 = cpu_to_le32(
drivers/usb/host/whci/qset.c:		QH_INFO2_BURST(qset->max_burst)
drivers/usb/host/whci/qset.c:		| QH_INFO2_MAX_SEQ(qset->max_seq - 1)
drivers/usb/host/whci/qset.c:	qset->qh.info3 = cpu_to_le32(
drivers/usb/host/whci/qset.c:	qset->qh.cur_window = cpu_to_le32((1 << qset->max_burst) - 1);
drivers/usb/host/whci/qset.c:	qset->td_start = qset->td_end = qset->ntds = 0;
drivers/usb/host/whci/qset.c:	qset->qh.link = cpu_to_le64(QH_LINK_NTDS(8) | QH_LINK_T);
drivers/usb/host/whci/qset.c:	qset->qh.status = qset->qh.status & QH_STATUS_SEQ_MASK;
drivers/usb/host/whci/qset.c:	qset->qh.err_count = 0;
drivers/usb/host/whci/qset.c:	qset->qh.scratch[0] = 0;
drivers/usb/host/whci/qset.c:	qset->qh.scratch[1] = 0;
drivers/usb/host/whci/qset.c:	qset->qh.scratch[2] = 0;
drivers/usb/host/whci/qset.c:	memset(&qset->qh.overlay, 0, sizeof(qset->qh.overlay));
drivers/usb/host/whci/qset.c:	init_completion(&qset->remove_complete);
drivers/usb/host/whci/qset.c:	qset->reset = 0;
drivers/usb/host/whci/qset.c:	qset->qh.status &= ~QH_STATUS_SEQ_MASK;
drivers/usb/host/whci/qset.c:	qset->qh.cur_window = cpu_to_le32((1 << qset->max_burst) - 1);
drivers/usb/host/whci/qset.c:		qset->ep = urb->ep;
drivers/usb/host/whci/qset.c:	qset->remove = 0;
drivers/usb/host/whci/qset.c:	list_del_init(&qset->list_node);
drivers/usb/host/whci/qset.c:	complete(&qset->remove_complete);
drivers/usb/host/whci/qset.c:	list_for_each_entry(std, &qset->stds, list_node) {
drivers/usb/host/whci/qset.c:		if (qset->ntds >= WHCI_QSET_TD_MAX
drivers/usb/host/whci/qset.c:		    || (qset->pause_after_urb && std->urb != qset->pause_after_urb))
drivers/usb/host/whci/qset.c:		qtd = std->qtd = &qset->qtd[qset->td_end];
drivers/usb/host/whci/qset.c:			ialt = (qset->td_end + std->ntds_remaining) % WHCI_QSET_TD_MAX;
drivers/usb/host/whci/qset.c:			qset->pause_after_urb = std->urb;
drivers/usb/host/whci/qset.c:		if (QH_STATUS_TO_ICUR(qset->qh.status) == qset->td_end)
drivers/usb/host/whci/qset.c:		if (++qset->td_end >= WHCI_QSET_TD_MAX)
drivers/usb/host/whci/qset.c:			qset->td_end = 0;
drivers/usb/host/whci/qset.c:		qset->ntds++;
drivers/usb/host/whci/qset.c:	qset->qtd[qset->td_start].status = 0;
drivers/usb/host/whci/qset.c:	if (++qset->td_start >= WHCI_QSET_TD_MAX)
drivers/usb/host/whci/qset.c:		qset->td_start = 0;
drivers/usb/host/whci/qset.c:	qset->ntds--;
drivers/usb/host/whci/qset.c:	list_for_each_entry_safe(std, t, &qset->stds, list_node) {
drivers/usb/host/whci/qset.c:	list_for_each_entry_safe(std, t, &qset->stds, list_node) {
drivers/usb/host/whci/qset.c:			qset_free_std(qset->whc, std);
drivers/usb/host/whci/qset.c:	struct whc *whc = qset->whc;
drivers/usb/host/whci/qset.c:	list_add_tail(&std->list_node, &qset->stds);
drivers/usb/host/whci/qset.c:				if (std && std->len % qset->max_packet != 0)
drivers/usb/host/whci/qset.c:				dma_len = (QTD_MAX_XFER_SIZE / qset->max_packet)
drivers/usb/host/whci/qset.c:					* qset->max_packet - std->len;
drivers/usb/host/whci/qset.c:	list_for_each_entry(std, &qset->stds, list_node) {
drivers/usb/host/whci/qset.c:	max_std_len = qset->max_burst * qset->max_packet;
drivers/usb/host/whci/qset.c:	list_for_each_entry(std, &qset->stds, list_node) {
drivers/usb/host/whci/qset.c:	struct whc_std *std = list_first_entry(&qset->stds, struct whc_std, list_node);
drivers/usb/host/whci/qset.c:			qset->td_start = qset->td_end
drivers/usb/host/whci/qset.c:				= QH_STATUS_TO_ICUR(le16_to_cpu(qset->qh.status));
drivers/usb/host/whci/qset.c:		qset->pause_after_urb = NULL;
drivers/usb/host/whci/qset.c:	struct whc_std *std = list_first_entry(&qset->stds, struct whc_std, list_node);
drivers/usb/host/whci/qset.c:	list_for_each_entry(std, &qset->stds, list_node) {
drivers/usb/host/whci/qset.c:		if (qset->ntds == 0)
drivers/usb/host/whci/qset.c:	qset->remove = 1;
drivers/usb/host/whci/qset.c:	dma_pool_free(whc->qset_pool, qset, qset->qset_dma);
drivers/usb/host/whci/qset.c:	wait_for_completion(&qset->remove_complete);
drivers/usb/host/xhci-debugfs.c:	INIT_LIST_HEAD(&regset->list);
drivers/usb/host/xhci-debugfs.c:	list_add_tail(&regset->list, &xhci->regset_list);
drivers/usb/host/xhci-debugfs.c:	list_del(&regset->list);
drivers/usb/host/xhci-debugfs.c:	regset->regs = regs;
drivers/usb/host/xhci-debugfs.c:	regset->nregs = nregs;
drivers/usb/host/xhci-debugfs.c:	regset->base = hcd->regs + base;
drivers/usb/host/xhci-mem.c:	temp = xhci_read_64(xhci, &xhci->ir_set->erst_dequeue);
drivers/usb/host/xhci-mem.c:			&xhci->ir_set->erst_dequeue);
drivers/usb/host/xhci-mem.c:	port_offset--;
drivers/usb/host/xhci-mem.c:	val = readl(&xhci->ir_set->erst_size);
drivers/usb/host/xhci-mem.c:	writel(val, &xhci->ir_set->erst_size);
drivers/usb/host/xhci-mem.c:	val_64 = xhci_read_64(xhci, &xhci->ir_set->erst_base);
drivers/usb/host/xhci-mem.c:	xhci_write_64(xhci, val_64, &xhci->ir_set->erst_base);
drivers/usb/host/xhci-ring.c:		irq_pending = readl(&xhci->ir_set->irq_pending);
drivers/usb/host/xhci-ring.c:		writel(irq_pending, &xhci->ir_set->irq_pending);
drivers/usb/host/xhci-ring.c:		temp_64 = xhci_read_64(xhci, &xhci->ir_set->erst_dequeue);
drivers/usb/host/xhci-ring.c:				&xhci->ir_set->erst_dequeue);
drivers/usb/host/xhci-ring.c:	temp_64 = xhci_read_64(xhci, &xhci->ir_set->erst_dequeue);
drivers/usb/host/xhci-ring.c:	xhci_write_64(xhci, temp_64, &xhci->ir_set->erst_dequeue);
drivers/usb/host/xhci.c:	temp_64 = xhci_read_64(xhci, &xhci->ir_set->erst_dequeue);
drivers/usb/host/xhci.c:	temp = readl(&xhci->ir_set->irq_control);
drivers/usb/host/xhci.c:	writel(temp, &xhci->ir_set->irq_control);
drivers/usb/host/xhci.c:	temp = readl(&xhci->ir_set->irq_pending);
drivers/usb/host/xhci.c:	writel(ER_IRQ_ENABLE(temp), &xhci->ir_set->irq_pending);
drivers/usb/host/xhci.c:	temp = readl(&xhci->ir_set->irq_pending);
drivers/usb/host/xhci.c:	writel(ER_IRQ_DISABLE(temp), &xhci->ir_set->irq_pending);
drivers/usb/host/xhci.c:	xhci->s3.erst_size = readl(&xhci->ir_set->erst_size);
drivers/usb/host/xhci.c:	xhci->s3.erst_base = xhci_read_64(xhci, &xhci->ir_set->erst_base);
drivers/usb/host/xhci.c:	xhci->s3.erst_dequeue = xhci_read_64(xhci, &xhci->ir_set->erst_dequeue);
drivers/usb/host/xhci.c:	xhci->s3.irq_pending = readl(&xhci->ir_set->irq_pending);
drivers/usb/host/xhci.c:	xhci->s3.irq_control = readl(&xhci->ir_set->irq_control);
drivers/usb/host/xhci.c:	writel(xhci->s3.erst_size, &xhci->ir_set->erst_size);
drivers/usb/host/xhci.c:	xhci_write_64(xhci, xhci->s3.erst_base, &xhci->ir_set->erst_base);
drivers/usb/host/xhci.c:	xhci_write_64(xhci, xhci->s3.erst_dequeue, &xhci->ir_set->erst_dequeue);
drivers/usb/host/xhci.c:	writel(xhci->s3.irq_pending, &xhci->ir_set->irq_pending);
drivers/usb/host/xhci.c:	writel(xhci->s3.irq_control, &xhci->ir_set->irq_control);
drivers/usb/host/xhci.c:		temp = readl(&xhci->ir_set->irq_pending);
drivers/usb/host/xhci.c:		writel(ER_IRQ_DISABLE(temp), &xhci->ir_set->irq_pending);
drivers/usb/misc/usb3503.c:		hub->gpio_reset = of_get_named_gpio(np, "reset-gpios", 0);
drivers/usb/phy/phy-tegra-usb.c:			of_get_named_gpio(np, "nvidia,phy-reset-gpio", 0);
drivers/uwb/est.c:		offset--;
drivers/video/fbdev/core/svgalib.c:	while (regset->regnum != VGA_REGSET_END_VAL) {
drivers/video/fbdev/core/svgalib.c:		regval = vga_rcrt(regbase, regset->regnum);
drivers/video/fbdev/core/svgalib.c:		bitnum = regset->lowbit;
drivers/video/fbdev/core/svgalib.c:		while (bitnum <= regset->highbit) {
drivers/video/fbdev/core/svgalib.c:		vga_wcrt(regbase, regset->regnum, regval);
drivers/video/fbdev/core/svgalib.c:	while (regset->regnum != VGA_REGSET_END_VAL) {
drivers/video/fbdev/core/svgalib.c:		regval = vga_rseq(regbase, regset->regnum);
drivers/video/fbdev/core/svgalib.c:		bitnum = regset->lowbit;
drivers/video/fbdev/core/svgalib.c:		while (bitnum <= regset->highbit) {
drivers/video/fbdev/core/svgalib.c:		vga_wseq(regbase, regset->regnum, regval);
drivers/video/fbdev/core/svgalib.c:	while (regset->regnum != VGA_REGSET_END_VAL) {
drivers/video/fbdev/core/svgalib.c:		count += regset->highbit - regset->lowbit + 1;
drivers/video/fbdev/mbx/mbxfb.c:	if (set->scaled_width==0 || set->scaled_height==0)
drivers/video/fbdev/mbx/mbxfb.c:	vsctrl |= Vsctrl_Width(set->width) | Vsctrl_Height(set->height) |
drivers/video/fbdev/mbx/mbxfb.c:	switch (set->fmt) {
drivers/video/fbdev/mbx/mbxfb.c:		set->Y_stride = ((set->width) + 0xf ) & ~0xf;
drivers/video/fbdev/mbx/mbxfb.c:		set->Y_stride = ((set->width) + 0xf ) & ~0xf;
drivers/video/fbdev/mbx/mbxfb.c:		set->Y_stride = (set->width*2 + 0xf ) & ~0xf;
drivers/video/fbdev/mbx/mbxfb.c:		set->Y_stride = (set->width*2 + 0xf ) & ~0xf;
drivers/video/fbdev/mbx/mbxfb.c:		set->Y_stride = (set->width*2 + 0xf ) & ~0xf;
drivers/video/fbdev/mbx/mbxfb.c:		set->Y_stride = (set->width*2 + 0xf ) & ~0xf;
drivers/video/fbdev/mbx/mbxfb.c:	set->UV_stride = ((set->width/2) + 0x7 ) & ~0x7;
drivers/video/fbdev/mbx/mbxfb.c:		set->U_offset = set->height * set->Y_stride;
drivers/video/fbdev/mbx/mbxfb.c:		set->V_offset = set->U_offset +
drivers/video/fbdev/mbx/mbxfb.c:						set->height * set->UV_stride;
drivers/video/fbdev/mbx/mbxfb.c:			(0x60000 + set->mem_offset + set->U_offset)>>3);
drivers/video/fbdev/mbx/mbxfb.c:			(0x60000 + set->mem_offset + set->V_offset)>>3);
drivers/video/fbdev/mbx/mbxfb.c:	vscadr |= Vscadr_Vbase_Adr((0x60000 + set->mem_offset)>>4);
drivers/video/fbdev/mbx/mbxfb.c:	if (set->enable)
drivers/video/fbdev/mbx/mbxfb.c:	vsadr = Vsadr_Srcstride((set->Y_stride)/16-1) |
drivers/video/fbdev/mbx/mbxfb.c:		Vsadr_Xstart(set->x) | Vsadr_Ystart(set->y);
drivers/video/fbdev/mbx/mbxfb.c:	sssize = Sssize_Sc_Width(set->scaled_width-1) |
drivers/video/fbdev/mbx/mbxfb.c:			Sssize_Sc_Height(set->scaled_height-1);
drivers/video/fbdev/mbx/mbxfb.c:	spoctrl |= Spoctrl_Vpitch((set->height<<11)/set->scaled_height);
drivers/video/fbdev/mbx/mbxfb.c:	if (set->scaled_width == set->width)
drivers/video/fbdev/mbx/mbxfb.c:	if (set->scaled_height == set->height)
drivers/video/fbdev/mbx/mbxfb.c:	shctrl |= Shctrl_Hpitch((set->width<<11)/set->scaled_width);
drivers/video/fbdev/mbx/mbxfb.c:	if (set->enable)
drivers/video/fbdev/omap2/omapfb/displays/panel-dsi-cm.c:	gpio = of_get_named_gpio(node, "reset-gpios", 0);
drivers/video/fbdev/omap2/omapfb/displays/panel-nec-nl8048hl11.c:	gpio = of_get_named_gpio(node, "reset-gpios", 0);
drivers/video/fbdev/omap2/omapfb/displays/panel-sony-acx565akm.c:	ddata->reset_gpio = of_get_named_gpio(np, "reset-gpios", 0);
drivers/video/fbdev/omap2/omapfb/displays/panel-tpo-td043mtea1.c:	gpio = of_get_named_gpio(node, "reset-gpios", 0);
drivers/video/fbdev/vga16fb.c:			xoffset--;
drivers/video/fbdev/vga16fb.c:		xoffset--;
drivers/watchdog/Kconfig:	 later SoCs used in set-top boxes.  BCM7038 was made public
drivers/watchdog/asm9260_wdt.c:		dev_warn(priv->dev, "unknown reset-type: %s. Using default \"hw\" mode.",
drivers/watchdog/aspeed_wdt.c:	ret = of_property_read_string(np, "aspeed,reset-type", &reset_type);
drivers/watchdog/at91sam9_wdt.c:	if (!of_property_read_string(np, "atmel,reset-type", &tmp) &&
drivers/watchdog/cadence_wdt.c:	wdt->rst = of_property_read_bool(pdev->dev.of_node, "reset-on-timeout");
drivers/watchdog/imx2_wdt.c:						"fsl,ext-reset-output");
drivers/watchdog/wdrtas.c: * RTAS function set-indicator (surveillance). The unit of interval is
drivers/watchdog/wdrtas.c: * set-interval (surveillance)
drivers/watchdog/wdrtas.c: * set-interval (surveillance)
drivers/watchdog/wdrtas.c:	wdrtas_token_set_indicator = rtas_token("set-indicator");
drivers/watchdog/wdrtas.c:		pr_err("couldn't get token for set-indicator. Terminating watchdog code.\n");
drivers/watchdog/ziirave_wdt.c:						   "reset-duration-ms",
drivers/watchdog/zx2967_wdt.c:			"zte,wdt-reset-sysctrl", 3, 0, &out_args);
fs/binfmt_elf.c:	if (regset->writeback)
fs/binfmt_elf.c:		regset->writeback(task, regset, 1);
fs/binfmt_elf.c:		if (regset->core_note_type && regset->get &&
fs/binfmt_elf.c:		    (!regset->active || regset->active(t->task, regset))) {
fs/binfmt_elf.c:			ret = regset->get(t->task, regset,
fs/binfmt_elf.c:				if (regset->core_note_type != NT_PRFPREG)
fs/binfmt_elf.c:						  regset->core_note_type,
fs/btrfs/ctree.c:		key.offset--;
fs/btrfs/extent_io.c:	changeset->bytes_changed += state->end - state->start + 1;
fs/btrfs/extent_io.c:	ret = ulist_add(&changeset->range_changed, state->start, state->end,
fs/btrfs/extent_io.h:	changeset->bytes_changed = 0;
fs/btrfs/extent_io.h:	ulist_init(&changeset->range_changed);
fs/btrfs/extent_io.h:	changeset->bytes_changed = 0;
fs/btrfs/extent_io.h:	ulist_release(&changeset->range_changed);
fs/btrfs/relocation.c:		key.offset--;
fs/btrfs/super.c: *      "btrfs subvolume set-default", mount_subvol() is called always.
fs/btrfs/sysfs.c:	ret = sysfs_create_group(&btrfs_kset->kobj, &btrfs_feature_attr_group);
fs/btrfs/sysfs.c:	ret = sysfs_merge_group(&btrfs_kset->kobj,
fs/btrfs/sysfs.c:	sysfs_remove_group(&btrfs_kset->kobj, &btrfs_feature_attr_group);
fs/btrfs/sysfs.c:	sysfs_unmerge_group(&btrfs_kset->kobj,
fs/btrfs/sysfs.c:	sysfs_remove_group(&btrfs_kset->kobj, &btrfs_feature_attr_group);
fs/btrfs/tree-log.c:		key.offset--;
fs/btrfs/volumes.c:	} while (key.offset-- > 0);
fs/cifs/cifssmb.c:	data_offset->EndOfFile = cpu_to_le64(NO_CHANGE_64);
fs/cifs/cifssmb.c:	data_offset->NumOfBytes = cpu_to_le64(NO_CHANGE_64);
fs/cifs/cifssmb.c:	data_offset->LastStatusChange = cpu_to_le64(args->ctime);
fs/cifs/cifssmb.c:	data_offset->LastAccessTime = cpu_to_le64(args->atime);
fs/cifs/cifssmb.c:	data_offset->LastModificationTime = cpu_to_le64(args->mtime);
fs/cifs/cifssmb.c:	data_offset->Uid = cpu_to_le64(uid);
fs/cifs/cifssmb.c:	data_offset->Gid = cpu_to_le64(gid);
fs/cifs/cifssmb.c:	data_offset->DevMajor = cpu_to_le64(MAJOR(args->device));
fs/cifs/cifssmb.c:	data_offset->DevMinor = cpu_to_le64(MINOR(args->device));
fs/cifs/cifssmb.c:	data_offset->Permissions = cpu_to_le64(mode);
fs/cifs/cifssmb.c:		data_offset->Type = cpu_to_le32(UNIX_FILE);
fs/cifs/cifssmb.c:		data_offset->Type = cpu_to_le32(UNIX_DIR);
fs/cifs/cifssmb.c:		data_offset->Type = cpu_to_le32(UNIX_SYMLINK);
fs/cifs/cifssmb.c:		data_offset->Type = cpu_to_le32(UNIX_CHARDEV);
fs/cifs/cifssmb.c:		data_offset->Type = cpu_to_le32(UNIX_BLOCKDEV);
fs/cifs/cifssmb.c:		data_offset->Type = cpu_to_le32(UNIX_FIFO);
fs/cifs/cifssmb.c:		data_offset->Type = cpu_to_le32(UNIX_SOCKET);
fs/cifs/smb2pdu.h: * Maximum number of iovs we need for a set-info request.
fs/debugfs/file.c:	debugfs_print_regs32(s, regset->regs, regset->nregs, regset->base, "");
fs/exofs/common.h:	__le64	long_name_offset;	/* If !0 then offset-in-file */
fs/exofs/sys.c:	list_for_each_entry_safe(k_name, k_tmp, &exofs_kset->list, entry) {
fs/exofs/sys.c:	list_for_each_entry_safe(k_name, k_tmp, &exofs_kset->list, entry) {
fs/exofs/sys.c:			&exofs_kset->kobj,  "%s_%llx", dt_dev->osdname, pid);
fs/f2fs/node.c:	set->entry_cnt--;
fs/f2fs/node.c:	nid_t start_nid = set->set * NAT_ENTRY_PER_BLOCK;
fs/f2fs/node.c:		!__has_cursum_space(journal, set->entry_cnt, NAT_JOURNAL))
fs/f2fs/node.c:	list_for_each_entry_safe(ne, cur, &set->entry_list, list) {
fs/f2fs/node.c:	if (!set->entry_cnt) {
fs/f2fs/node.c:		radix_tree_delete(&NM_I(sbi)->nat_set_root, set->set);
fs/isofs/inode.c:	    strcmp(sbi->s_nls_iocharset->charset, CONFIG_NLS_DEFAULT) != 0)
fs/isofs/inode.c:		seq_printf(m, ",iocharset=%s", sbi->s_nls_iocharset->charset);
fs/jfs/jfs_dtree.c:			dtoffset->index = 2;
fs/jfs/jfs_dtree.c:		if (dtoffset->pn == 0) {
fs/jfs/jfs_dtree.c:			if (dtoffset->index == 2) {
fs/jfs/jfs_dtree.c:			dtoffset->pn = 1;
fs/jfs/jfs_dtree.c:			dtoffset->index = 0;
fs/jfs/jfs_dtree.c:				dtoffset->index++;
fs/jfs/jfs_dtree.c:					dtoffset->pn++;
fs/jfs/jfs_dtree.c:					dtoffset->index = 0;
fs/jfs/jfs_dtree.c:	pn = dtoffset->pn - 1;	/* Now pn = 0 represents leftmost leaf */
fs/jfs/jfs_dtree.c:	index = dtoffset->index;
fs/jfs/jfs_dtree.c:		dtoffset->pn++;
fs/jfs/jfs_dtree.c:		dtoffset->index = index = 0;
fs/jfs/jfs_dtree.c:		dtoffset->pn++;
fs/jfs/jfs_dtree.c:		dtoffset->index = 0;
fs/jfs/jfs_dtree.c:	btsp->index = dtoffset->index;
fs/nfs/dir.c:		if (set->cred < entry->cred)
fs/nfs/dir.c:		else if (set->cred > entry->cred)
fs/nfs/dir.c:	rb_link_node(&set->rb_node, parent, p);
fs/nfs/dir.c:	rb_insert_color(&set->rb_node, root_node);
fs/nfs/dir.c:	list_add_tail(&set->lru, &nfsi->access_cache_entry_lru);
fs/nfs/dir.c:	rb_replace_node(parent, &set->rb_node, root_node);
fs/nfs/dir.c:	list_add_tail(&set->lru, &nfsi->access_cache_entry_lru);
fs/nfs/dir.c:	cache->cred = get_rpccred(set->cred);
fs/nfs/dir.c:	cache->mask = set->mask;
fs/nfsd/nfsproc.c:	 * NFSv2 does not differentiate between "set-[ac]time-to-now"
fs/nfsd/nfsproc.c:	 * which only requires access, and "set-[ac]time-to-X" which
fs/nilfs2/sysfs.c:	err = sysfs_create_group(&nilfs_kset->kobj, &nilfs_feature_attr_group);
fs/nilfs2/sysfs.c:	sysfs_remove_group(&nilfs_kset->kobj, &nilfs_feature_attr_group);
fs/ocfs2/cluster/sys.c:	ret = sysfs_create_group(&o2cb_kset->kobj, &o2cb_attr_group);
fs/ocfs2/stackglue.c:	ret = sysfs_create_group(&ocfs2_kset->kobj, &ocfs2_attr_group);
fs/ocfs2/super.c:						&ocfs2_kset->kobj);
fs/proc/proc_sysctl.c:	else if (!set->is_seen)
fs/proc/proc_sysctl.c:		res = set->is_seen(set);
fs/proc/proc_sysctl.c:	init_header(&new->header, set->dir.header.root, set, node, table);
fs/proc/proc_sysctl.c:		return &set->dir;
fs/proc/proc_sysctl.c:	struct ctl_table_root *root = set->dir.header.root;
fs/proc/proc_sysctl.c:	dir = &set->dir;
fs/proc/proc_sysctl.c:	set->is_seen = is_seen;
fs/proc/proc_sysctl.c:	init_header(&set->dir.header, root, set, NULL, root_table);
fs/proc/proc_sysctl.c:	WARN_ON(!RB_EMPTY_ROOT(&set->dir.root));
fs/reiserfs/reiserfs.h:	key->on_disk_key.k_offset--;
fs/reiserfs/stree.c:	while (path_offset-- > FIRST_PATH_ELEMENT_OFFSET) {
fs/reiserfs/stree.c:	while (path_offset-- > FIRST_PATH_ELEMENT_OFFSET) {
fs/reiserfs/stree.c:		bh = PATH_OFFSET_PBUFFER(search_path, path_offset--);
fs/reiserfs/stree.c:		brelse(PATH_OFFSET_PBUFFER(search_path, path_offset--));
fs/udf/super.c:	if (fileset->logicalBlockNum != 0xFFFFFFFF ||
fs/udf/super.c:	    fileset->partitionReferenceNum != 0xFFFF) {
fs/udf/super.c:		      fileset->logicalBlockNum == 0xFFFFFFFF &&
fs/udf/super.c:		      fileset->partitionReferenceNum == 0xFFFF);
fs/udf/super.c:				 fileset->logicalBlockNum == 0xFFFFFFFF &&
fs/udf/super.c:				 fileset->partitionReferenceNum == 0xFFFF);
fs/udf/super.c:	if ((fileset->logicalBlockNum != 0xFFFFFFFF ||
fs/udf/super.c:	     fileset->partitionReferenceNum != 0xFFFF) && bh) {
fs/udf/super.c:			  fileset->logicalBlockNum,
fs/udf/super.c:			  fileset->partitionReferenceNum);
fs/udf/super.c:		sbi->s_partition = fileset->partitionReferenceNum;
fs/udf/super.c:	*root = lelb_to_cpu(fset->rootDirectoryICB.extLocation);
fs/udf/super.c:	UDF_SB(sb)->s_serial_number = le16_to_cpu(fset->descTag.tagSerialNum);
fs/udf/super.c:			  fileset->logicalBlockNum,
fs/udf/super.c:			  fileset->partitionReferenceNum);
fs/xfs/xfs_buf_item.c:	if (error) {	/* to stop gcc throwing set-but-unused warnings */
fs/xfs/xfs_ioctl.c:	 * The set-user-ID and set-group-ID bits of a file will be cleared upon
fs/xfs/xfs_iops.c:		 * The set-user-ID and set-group-ID bits of a file will be
include/linux/ceph/osdmap.h:	set->size = 0;
include/linux/ceph/osdmap.h:	set->primary = -1;
include/linux/ceph/rados.h:	f(OMAPSETVALS,	__CEPH_OSD_OP(WR, DATA, 21),	"omap-set-vals")    \
include/linux/ceph/rados.h:	f(OMAPSETHEADER, __CEPH_OSD_OP(WR, DATA, 22),	"omap-set-header")  \
include/linux/ceph/rados.h:	f(SETALLOCHINT,	__CEPH_OSD_OP(WR, DATA, 35),	"set-alloc-hint")   \
include/linux/ceph/rados.h:	f(PG_HITSET_LS,	__CEPH_OSD_OP(RD, PG, 3),	"pg-hitset-ls")	    \
include/linux/ceph/rados.h:	f(PG_HITSET_GET, __CEPH_OSD_OP(RD, PG, 4),	"pg-hitset-get")
include/linux/cgroup.h:	struct list_head		iters_node;	/* css_set->task_iters */
include/linux/cgroup.h:	return cgroup_is_descendant(cset->dfl_cgrp, ancestor);
include/linux/compat.h:	case 4: v.sig[7] = (set->sig[3] >> 32); v.sig[6] = set->sig[3];
include/linux/compat.h:	case 3: v.sig[5] = (set->sig[2] >> 32); v.sig[4] = set->sig[2];
include/linux/compat.h:	case 2: v.sig[3] = (set->sig[1] >> 32); v.sig[2] = set->sig[1];
include/linux/compat.h:	case 1: v.sig[1] = (set->sig[0] >> 32); v.sig[0] = set->sig[0];
include/linux/ide.h:	unsigned long	config_data;	/* for use by chipset-specific code */
include/linux/ide.h:	unsigned long	select_data;	/* for use by chipset-specific code */
include/linux/isdn_ppp.h: * Reset-Requests in a variety of ways. The decompressor is already returning
include/linux/libnvdimm.h:	/* v1.1 definition of the interleave-set-cookie algorithm */
include/linux/libnvdimm.h:	/* v1.2 definition of the interleave-set-cookie algorithm */
include/linux/netdev_features.h: * set in features when NETIF_F_IP_CSUM or NETIF_F_IPV6_CSUM are set--
include/linux/netfilter/ipset/ip_set.h:					   htonl(set->timeout))))
include/linux/netfilter/ipset/ip_set.h:	       (set->type->features & IPSET_TYPE_NOMATCH) &&
include/linux/netfilter/ipset/ip_set_comment.h:		set->ext_size -= sizeof(*c) + strlen(c->str) + 1;
include/linux/netfilter/ipset/ip_set_comment.h:	set->ext_size += sizeof(*c) + strlen(c->str) + 1;
include/linux/netfilter/ipset/ip_set_comment.h:	set->ext_size -= sizeof(*c) + strlen(c->str) + 1;
include/linux/ppp-comp.h: * useful functionality, namely sending a CCP reset-request as a result
include/linux/regset.h:	if (!regset->get)
include/linux/regset.h:	return regset->get(target, regset, offset, size, NULL, data);
include/linux/regset.h:	if (!regset->set)
include/linux/regset.h:	return regset->set(target, regset, offset, size, NULL, data);
include/linux/regset.h:	if (!regset->get_size)
include/linux/regset.h:		return regset->n * regset->size;
include/linux/regset.h:		return regset->get_size(target, regset);
include/linux/reset.h: * reset-controls.
include/linux/reset.h: * This function is intended for use with reset-controls which are shared
include/linux/reset.h: * When a reset-control is shared, the behavior of reset_control_assert /
include/linux/reset.h: * deassert is changed, the reset-core will keep track of a deassert_count
include/linux/reset.h: * about shared reset-controls in the reset_control_assert docs.
include/linux/reset.h: * When a reset-control is shared, the behavior of reset_control_assert /
include/linux/reset.h: * deassert is changed, the reset-core will keep track of a deassert_count
include/linux/reset.h: * about shared reset-controls in the reset_control_assert docs.
include/linux/reset.h: * When a reset-control is shared, the behavior of reset_control_assert /
include/linux/reset.h: * deassert is changed, the reset-core will keep track of a deassert_count
include/linux/reset.h: * about shared reset-controls in the reset_control_assert docs.
include/linux/rio_regs.h:#define  RIO_MNT_REQ_CMD_RD		0x03	/* Reset-device command */
include/linux/rtc.h:	if (to_set->tv_nsec < TIME_SET_NSEC_FUZZ) {
include/linux/rtc.h:		to_set->tv_nsec = 0;
include/linux/rtc.h:	if (to_set->tv_nsec > NSEC_PER_SEC - TIME_SET_NSEC_FUZZ) {
include/linux/rtc.h:		to_set->tv_sec++;
include/linux/rtc.h:		to_set->tv_nsec = 0;
include/linux/rtc/ds1685.h:#define RTC_CTRL_4B_PRS		BIT(3)	/* PAB Reset-Select */
include/linux/signal.h:		set->sig[0] |= 1UL << sig;
include/linux/signal.h:		set->sig[sig / _NSIG_BPW] |= 1UL << (sig % _NSIG_BPW);
include/linux/signal.h:		set->sig[0] &= ~(1UL << sig);
include/linux/signal.h:		set->sig[sig / _NSIG_BPW] &= ~(1UL << (sig % _NSIG_BPW));
include/linux/signal.h:		return 1 & (set->sig[0] >> sig);
include/linux/signal.h:		return 1 & (set->sig[sig / _NSIG_BPW] >> (sig % _NSIG_BPW));
include/linux/signal.h:		return (set->sig[3] | set->sig[2] |
include/linux/signal.h:			set->sig[1] | set->sig[0]) == 0;
include/linux/signal.h:		return (set->sig[1] | set->sig[0]) == 0;
include/linux/signal.h:		return set->sig[0] == 0;
include/linux/signal.h:	case 4:	set->sig[3] = op(set->sig[3]);				\
include/linux/signal.h:		set->sig[2] = op(set->sig[2]);				\
include/linux/signal.h:	case 2:	set->sig[1] = op(set->sig[1]);				\
include/linux/signal.h:	case 1:	set->sig[0] = op(set->sig[0]);				\
include/linux/signal.h:	case 2: set->sig[1] = 0;
include/linux/signal.h:	case 1:	set->sig[0] = 0;
include/linux/signal.h:	case 2: set->sig[1] = -1;
include/linux/signal.h:	case 1:	set->sig[0] = -1;
include/linux/signal.h:	set->sig[0] |= mask;
include/linux/signal.h:	set->sig[0] &= ~mask;
include/linux/signal.h:	return (set->sig[0] & mask) != 0;
include/linux/signal.h:	set->sig[0] = mask;
include/linux/signal.h:		memset(&set->sig[1], 0, sizeof(long)*(_NSIG_WORDS-1));
include/linux/signal.h:	case 2: set->sig[1] = 0;
include/linux/signal.h:	set->sig[0] = ~mask;
include/linux/signal.h:		memset(&set->sig[1], -1, sizeof(long)*(_NSIG_WORDS-1));
include/linux/signal.h:	case 2: set->sig[1] = -1;
include/linux/spinlock.h: * warns about set-but-not-used variables when building with
include/linux/sunrpc/rpc_rdma.h: * Message passed during RDMA-CM connection set-up.
include/linux/usb.h: * @needs_altsetting0: flag set when a set-interface request for altsetting 0
include/linux/usb.h: *	Instead, let the resume or reset-resume routine recover from
include/linux/uwb.h: * @offset: if != 0, at offset @offset-1 starts a field with a length
include/linux/xarray.h:	xas->xa_offset--;
include/net/netfilter/nf_tables.h:	return set->flags & NFT_SET_ANONYMOUS;
include/net/netfilter/nf_tables.h:	return (void *)set->data;
include/net/netfilter/nf_tables.h:	return set->gc_int ? msecs_to_jiffies(set->gc_int) : HZ;
include/net/netfilter/nf_tables.h:	return elem + set->ops->elemsize;
include/scsi/scsi_host.h:	 * True if the low-level driver performs its own reset-settle delays.
include/soc/tegra/bpmp-abi.h: * For reset enumerations, see <mach-t186/reset-t186.h>
include/soc/tegra/bpmp.h:#include <linux/reset-controller.h>
include/soc/tegra/mc.h:#include <linux/reset-controller.h>
include/trace/events/bcache.h:		__entry->offset		= bucket << ca->set->bucket_bits;
include/trace/events/bcache.h:		__entry->offset		= bucket << ca->set->bucket_bits;
include/trace/events/bcache.h:		__entry->blocked	= atomic_read(&ca->set->prio_blocked);
include/uapi/drm/i915_drm.h: * the different read/write domains in use (e.g. set-domain), but the assumption
include/uapi/linux/ethtool.h: * If such is the case, return EINVAL in the set-flags operation if the
include/uapi/linux/hdreg.h:					 * cmd set-feature supported extensions
include/uapi/linux/hdreg.h:					 * command set-feature enabled
include/uapi/linux/hdreg.h:					 * command set-feature enabled
include/uapi/linux/hdreg.h:					 * command set-feature default
include/uapi/linux/securebits.h:   transitioning to a non-root user (the set-uid fixup suppressed by
include/uapi/linux/videodev2.h:/* field 'status' - VCR and set-top box */
include/xen/interface/elfnote.h: * c-set-style: "BSD"
include/xen/interface/xen.h:	 * a set-and-check race. Note that the mask is only accessed by Xen
init/main.c:	 * Wait until kthreadd is all set-up.
kernel/cgroup/cgroup-internal.h:	/* list of cgrp_cset_links anchored at css_set->cgrp_links */
kernel/cgroup/cgroup-internal.h:	/* the src and dst cset list running through cset->mg_node */
kernel/cgroup/cgroup-internal.h:	if (refcount_dec_not_one(&cset->refcount))
kernel/cgroup/cgroup-internal.h:	refcount_inc(&cset->refcount);
kernel/cgroup/cgroup.c:		count += link->cset->nr_tasks;
kernel/cgroup/cgroup.c:	return cset->dom_cset != cset;
kernel/cgroup/cgroup.c: * css_set_populated() should be the same as !!cset->nr_tasks at steady
kernel/cgroup/cgroup.c:	return !list_empty(&cset->tasks) || !list_empty(&cset->mg_tasks);
kernel/cgroup/cgroup.c:	list_for_each_entry(link, &cset->cgrp_links, cgrp_link)
kernel/cgroup/cgroup.c: * @use_mg_tasks: move to @to_cset->mg_tasks instead of ->tasks
kernel/cgroup/cgroup.c:		list_for_each_entry_safe(it, pos, &from_cset->task_iters,
kernel/cgroup/cgroup.c:		list_add_tail(&task->cg_list, use_mg_tasks ? &to_cset->mg_tasks :
kernel/cgroup/cgroup.c:							     &to_cset->tasks);
kernel/cgroup/cgroup.c:	if (!refcount_dec_and_test(&cset->refcount))
kernel/cgroup/cgroup.c:	WARN_ON_ONCE(!list_empty(&cset->threaded_csets));
kernel/cgroup/cgroup.c:		list_del(&cset->e_cset_node[ssid]);
kernel/cgroup/cgroup.c:		css_put(cset->subsys[ssid]);
kernel/cgroup/cgroup.c:	hash_del(&cset->hlist);
kernel/cgroup/cgroup.c:	list_for_each_entry_safe(link, tmp_link, &cset->cgrp_links, cgrp_link) {
kernel/cgroup/cgroup.c:		list_del(&cset->threaded_csets_node);
kernel/cgroup/cgroup.c:		put_css_set_locked(cset->dom_cset);
kernel/cgroup/cgroup.c:	if (memcmp(template, cset->subsys, sizeof(cset->subsys)))
kernel/cgroup/cgroup.c:		new_dfl_cgrp = old_cset->dfl_cgrp;
kernel/cgroup/cgroup.c:	if (new_dfl_cgrp->dom_cgrp != cset->dom_cset->dfl_cgrp)
kernel/cgroup/cgroup.c:	l1 = &cset->cgrp_links;
kernel/cgroup/cgroup.c:	l2 = &old_cset->cgrp_links;
kernel/cgroup/cgroup.c:		if (l1 == &cset->cgrp_links) {
kernel/cgroup/cgroup.c:			BUG_ON(l2 != &old_cset->cgrp_links);
kernel/cgroup/cgroup.c:			BUG_ON(l2 == &old_cset->cgrp_links);
kernel/cgroup/cgroup.c:			template[i] = old_cset->subsys[i];
kernel/cgroup/cgroup.c:		cset->dfl_cgrp = cgrp;
kernel/cgroup/cgroup.c:	list_add_tail(&link->cgrp_link, &cset->cgrp_links);
kernel/cgroup/cgroup.c:	refcount_set(&cset->refcount, 1);
kernel/cgroup/cgroup.c:	cset->dom_cset = cset;
kernel/cgroup/cgroup.c:	INIT_LIST_HEAD(&cset->tasks);
kernel/cgroup/cgroup.c:	INIT_LIST_HEAD(&cset->mg_tasks);
kernel/cgroup/cgroup.c:	INIT_LIST_HEAD(&cset->task_iters);
kernel/cgroup/cgroup.c:	INIT_LIST_HEAD(&cset->threaded_csets);
kernel/cgroup/cgroup.c:	INIT_HLIST_NODE(&cset->hlist);
kernel/cgroup/cgroup.c:	INIT_LIST_HEAD(&cset->cgrp_links);
kernel/cgroup/cgroup.c:	INIT_LIST_HEAD(&cset->mg_preload_node);
kernel/cgroup/cgroup.c:	INIT_LIST_HEAD(&cset->mg_node);
kernel/cgroup/cgroup.c:	memcpy(cset->subsys, template, sizeof(cset->subsys));
kernel/cgroup/cgroup.c:	list_for_each_entry(link, &old_cset->cgrp_links, cgrp_link) {
kernel/cgroup/cgroup.c:	key = css_set_hash(cset->subsys);
kernel/cgroup/cgroup.c:	hash_add(css_set_table, &cset->hlist, key);
kernel/cgroup/cgroup.c:		struct cgroup_subsys_state *css = cset->subsys[ssid];
kernel/cgroup/cgroup.c:		list_add_tail(&cset->e_cset_node[ssid],
kernel/cgroup/cgroup.c:	if (cgroup_is_threaded(cset->dfl_cgrp)) {
kernel/cgroup/cgroup.c:		dcset = find_css_set(cset, cset->dfl_cgrp->dom_cgrp);
kernel/cgroup/cgroup.c:		cset->dom_cset = dcset;
kernel/cgroup/cgroup.c:		list_add_tail(&cset->threaded_csets_node,
kernel/cgroup/cgroup.c:			      &dcset->threaded_csets);
kernel/cgroup/cgroup.c:		list_for_each_entry(link, &cset->cgrp_links, cgrp_link) {
kernel/cgroup/cgroup.c:		res = cset->dfl_cgrp;
kernel/cgroup/cgroup.c:		list_for_each_entry(link, &cset->cgrp_links, cgrp_link) {
kernel/cgroup/cgroup.c:			list_move_tail(&cset->e_cset_node[ss->id],
kernel/cgroup/cgroup.c:			list_add_tail(&p->cg_list, &cset->tasks);
kernel/cgroup/cgroup.c:			cset->nr_tasks++;
kernel/cgroup/cgroup.c:	if (!cset->mg_src_cgrp)
kernel/cgroup/cgroup.c:	list_move_tail(&task->cg_list, &cset->mg_tasks);
kernel/cgroup/cgroup.c:	if (list_empty(&cset->mg_node))
kernel/cgroup/cgroup.c:		list_add_tail(&cset->mg_node,
kernel/cgroup/cgroup.c:	if (list_empty(&cset->mg_dst_cset->mg_node))
kernel/cgroup/cgroup.c:		list_add_tail(&cset->mg_dst_cset->mg_node,
kernel/cgroup/cgroup.c:	tset->cur_cset = list_first_entry(tset->csets, struct css_set, mg_node);
kernel/cgroup/cgroup.c:	tset->cur_task = NULL;
kernel/cgroup/cgroup.c:	struct css_set *cset = tset->cur_cset;
kernel/cgroup/cgroup.c:	struct task_struct *task = tset->cur_task;
kernel/cgroup/cgroup.c:	while (&cset->mg_node != tset->csets) {
kernel/cgroup/cgroup.c:			task = list_first_entry(&cset->mg_tasks,
kernel/cgroup/cgroup.c:		if (&task->cg_list != &cset->mg_tasks) {
kernel/cgroup/cgroup.c:			tset->cur_cset = cset;
kernel/cgroup/cgroup.c:			tset->cur_task = task;
kernel/cgroup/cgroup.c:			if (cset->mg_dst_cset)
kernel/cgroup/cgroup.c:				*dst_cssp = cset->mg_dst_cset->subsys[tset->ssid];
kernel/cgroup/cgroup.c:				*dst_cssp = cset->subsys[tset->ssid];
kernel/cgroup/cgroup.c:	if (tset->nr_tasks) {
kernel/cgroup/cgroup.c:				tset->ssid = ssid;
kernel/cgroup/cgroup.c:	list_for_each_entry(cset, &tset->src_csets, mg_node) {
kernel/cgroup/cgroup.c:		list_for_each_entry_safe(task, tmp_task, &cset->mg_tasks, cg_list) {
kernel/cgroup/cgroup.c:			struct css_set *to_cset = cset->mg_dst_cset;
kernel/cgroup/cgroup.c:			to_cset->nr_tasks++;
kernel/cgroup/cgroup.c:			from_cset->nr_tasks--;
kernel/cgroup/cgroup.c:			cgroup_freezer_migrate_task(task, from_cset->dfl_cgrp,
kernel/cgroup/cgroup.c:						    to_cset->dfl_cgrp);
kernel/cgroup/cgroup.c:	tset->csets = &tset->dst_csets;
kernel/cgroup/cgroup.c:	if (tset->nr_tasks) {
kernel/cgroup/cgroup.c:				tset->ssid = ssid;
kernel/cgroup/cgroup.c:	if (tset->nr_tasks) {
kernel/cgroup/cgroup.c:				tset->ssid = ssid;
kernel/cgroup/cgroup.c:	list_splice_init(&tset->dst_csets, &tset->src_csets);
kernel/cgroup/cgroup.c:	list_for_each_entry_safe(cset, tmp_cset, &tset->src_csets, mg_node) {
kernel/cgroup/cgroup.c:		list_splice_tail_init(&cset->mg_tasks, &cset->tasks);
kernel/cgroup/cgroup.c:		list_del_init(&cset->mg_node);
kernel/cgroup/cgroup.c:	tset->nr_tasks = 0;
kernel/cgroup/cgroup.c:	tset->csets    = &tset->src_csets;
kernel/cgroup/cgroup.c:		cset->mg_src_cgrp = NULL;
kernel/cgroup/cgroup.c:		cset->mg_dst_cgrp = NULL;
kernel/cgroup/cgroup.c:		cset->mg_dst_cset = NULL;
kernel/cgroup/cgroup.c:		list_del_init(&cset->mg_preload_node);
kernel/cgroup/cgroup.c:	if (src_cset->dead)
kernel/cgroup/cgroup.c:	if (!list_empty(&src_cset->mg_preload_node))
kernel/cgroup/cgroup.c:	WARN_ON(src_cset->mg_src_cgrp);
kernel/cgroup/cgroup.c:	WARN_ON(src_cset->mg_dst_cgrp);
kernel/cgroup/cgroup.c:	WARN_ON(!list_empty(&src_cset->mg_tasks));
kernel/cgroup/cgroup.c:	WARN_ON(!list_empty(&src_cset->mg_node));
kernel/cgroup/cgroup.c:	src_cset->mg_src_cgrp = src_cgrp;
kernel/cgroup/cgroup.c:	src_cset->mg_dst_cgrp = dst_cgrp;
kernel/cgroup/cgroup.c:	list_add_tail(&src_cset->mg_preload_node, &mgctx->preloaded_src_csets);
kernel/cgroup/cgroup.c:		dst_cset = find_css_set(src_cset, src_cset->mg_dst_cgrp);
kernel/cgroup/cgroup.c:		WARN_ON_ONCE(src_cset->mg_dst_cset || dst_cset->mg_dst_cset);
kernel/cgroup/cgroup.c:			src_cset->mg_src_cgrp = NULL;
kernel/cgroup/cgroup.c:			src_cset->mg_dst_cgrp = NULL;
kernel/cgroup/cgroup.c:			list_del_init(&src_cset->mg_preload_node);
kernel/cgroup/cgroup.c:		src_cset->mg_dst_cset = dst_cset;
kernel/cgroup/cgroup.c:		if (list_empty(&dst_cset->mg_preload_node))
kernel/cgroup/cgroup.c:			list_add_tail(&dst_cset->mg_preload_node,
kernel/cgroup/cgroup.c:			if (src_cset->subsys[ssid] != dst_cset->subsys[ssid])
kernel/cgroup/cgroup.c:		list_for_each_entry_safe(task, ntask, &src_cset->tasks, cg_list)
kernel/cgroup/cgroup.c:	    ns != &init_cgroup_ns && ns->root_cset->dfl_cgrp == cgrp)
kernel/cgroup/cgroup.c:		it->tcset_head = &cset->threaded_csets;
kernel/cgroup/cgroup.c:		it->tcset_pos = &cset->threaded_csets;
kernel/cgroup/cgroup.c:	if (!list_empty(&cset->tasks))
kernel/cgroup/cgroup.c:		it->task_pos = cset->tasks.next;
kernel/cgroup/cgroup.c:		it->task_pos = cset->mg_tasks.next;
kernel/cgroup/cgroup.c:	it->tasks_head = &cset->tasks;
kernel/cgroup/cgroup.c:	it->mg_tasks_head = &cset->mg_tasks;
kernel/cgroup/cgroup.c:	list_add(&it->iters_node, &cset->task_iters);
kernel/cgroup/cgroup.c:		 * Advance iterator to find next entry.  cset->tasks is
kernel/cgroup/cgroup.c:	    (!cgroup_is_descendant(src_cgrp, ns->root_cset->dfl_cgrp) ||
kernel/cgroup/cgroup.c:	     !cgroup_is_descendant(dst_cgrp, ns->root_cset->dfl_cgrp)))
kernel/cgroup/cgroup.c:		link->cset->dead = true;
kernel/cgroup/cgroup.c:			cset->nr_tasks++;
kernel/cgroup/cgroup.c:		cset->nr_tasks--;
kernel/cgroup/cgroup.c:		if (likely(cgroup_tryget(cset->dfl_cgrp))) {
kernel/cgroup/cgroup.c:			skcd->val = (unsigned long)cset->dfl_cgrp;
kernel/cgroup/cgroup.c:			cgroup_bpf_get(cset->dfl_cgrp);
kernel/cgroup/cpuset.c:	   (!newmask && cpumask_empty(cpuset->cpus_allowed)))
kernel/cgroup/cpuset.c:	if ((cmd != partcmd_update) && css_has_online_children(&cpuset->css))
kernel/cgroup/cpuset.c:	   (!cpumask_subset(cpuset->cpus_allowed, parent->effective_cpus) ||
kernel/cgroup/cpuset.c:	     cpumask_equal(cpuset->cpus_allowed, parent->effective_cpus)))
kernel/cgroup/cpuset.c:		cpumask_copy(tmp->addmask, cpuset->cpus_allowed);
kernel/cgroup/cpuset.c:		deleting = cpumask_and(tmp->delmask, cpuset->cpus_allowed,
kernel/cgroup/cpuset.c:		cpumask_andnot(tmp->delmask, cpuset->cpus_allowed, newmask);
kernel/cgroup/cpuset.c:		adding = cpumask_and(tmp->addmask, cpuset->cpus_allowed,
kernel/cgroup/cpuset.c:		int prev_prs = cpuset->partition_root_state;
kernel/cgroup/cpuset.c:		switch (cpuset->partition_root_state) {
kernel/cgroup/cpuset.c:				cpuset->partition_root_state = PRS_ERROR;
kernel/cgroup/cpuset.c:				cpuset->partition_root_state = PRS_ENABLED;
kernel/cgroup/cpuset.c:	if (!part_error && (cpuset->partition_root_state == PRS_ERROR))
kernel/cgroup/cpuset.c:	if (cpuset->partition_root_state == PRS_ERROR) {
kernel/cgroup/cpuset.c:		deleting = cpumask_and(tmp->delmask, cpuset->cpus_allowed,
kernel/cgroup/cpuset.c: * @tsk: pointer to task_struct from which to obtain cpuset->cpus_allowed.
kernel/cgroup/cpuset.c: * @tsk: pointer to task_struct from which to obtain cpuset->mems_allowed.
kernel/cgroup/debug.c:	refcnt = refcount_read(&cset->refcount);
kernel/cgroup/debug.c:	if (refcnt > cset->nr_tasks)
kernel/cgroup/debug.c:		seq_printf(seq, " +%d", refcnt - cset->nr_tasks);
kernel/cgroup/debug.c:		css = cset->subsys[ss->id];
kernel/cgroup/debug.c:	list_for_each_entry(link, &cset->cgrp_links, cgrp_link) {
kernel/cgroup/debug.c:		int refcnt = refcount_read(&cset->refcount);
kernel/cgroup/debug.c:		if (rcu_dereference_protected(cset->dom_cset, 1) != cset) {
kernel/cgroup/debug.c:			seq_printf(seq, "=>%pK", cset->dom_cset);
kernel/cgroup/debug.c:		if (!list_empty(&cset->threaded_csets)) {
kernel/cgroup/debug.c:			list_for_each_entry(tcset, &cset->threaded_csets,
kernel/cgroup/debug.c:			if (refcnt - cset->nr_tasks > 0) {
kernel/cgroup/debug.c:				int extra = refcnt - cset->nr_tasks;
kernel/cgroup/debug.c:		list_for_each_entry(task, &cset->tasks, cg_list) {
kernel/cgroup/debug.c:		list_for_each_entry(task, &cset->mg_tasks, cg_list) {
kernel/cgroup/debug.c:		if (cset->dead) {
kernel/cgroup/debug.c:		WARN_ON(count != cset->nr_tasks);
kernel/compat.c:	case 4: set->sig[3] = v.sig[6] | (((long)v.sig[7]) << 32 );
kernel/compat.c:	case 3: set->sig[2] = v.sig[4] | (((long)v.sig[5]) << 32 );
kernel/compat.c:	case 2: set->sig[1] = v.sig[2] | (((long)v.sig[3]) << 32 );
kernel/compat.c:	case 1: set->sig[0] = v.sig[0] | (((long)v.sig[1]) << 32 );
kernel/cred.c:	const struct user_namespace *set_ns = set->user_ns;
kernel/cred.c:	const struct user_namespace *subset_ns = subset->user_ns;
kernel/cred.c:		return cap_issubset(subset->cap_permitted, set->cap_permitted);
kernel/cred.c:	 * ancestor of subset and set->euid is owner of subset or one
kernel/cred.c:		    uid_eq(subset_ns->owner, set->euid))
kernel/ptrace.c:		if (regset->core_note_type == type)
kernel/ptrace.c:	if (!regset || (kiov->iov_len % regset->size) != 0)
kernel/ptrace.c:			    (__kernel_size_t) (regset->n * regset->size));
kernel/sched/core.c:	 * as we're not fully set-up yet.
kernel/sched/cpufreq_schedutil.c:	list_for_each_entry(sg_policy, &attr_set->policy_list, tunables_hook)
kernel/sched/wait.c:		 * But we need to ensure that set-condition + wakeup after that
kernel/time/timer_list.c:	for (; offset; offset--) {
lib/kobject.c:	spin_lock(&kobj->kset->list_lock);
lib/kobject.c:	list_add_tail(&kobj->entry, &kobj->kset->list);
lib/kobject.c:	spin_unlock(&kobj->kset->list_lock);
lib/kobject.c:	spin_lock(&kobj->kset->list_lock);
lib/kobject.c:	spin_unlock(&kobj->kset->list_lock);
lib/kobject.c:			parent = kobject_get(&kobj->kset->kobj);
lib/kobject.c:		 kobj->kset ? kobject_name(&kobj->kset->kobj) : "<NULL>");
lib/kobject.c:			new_parent = kobject_get(&kobj->kset->kobj);
lib/kobject.c: * Lock kset via @kset->subsys, and iterate over @kset->list,
lib/kobject.c:	spin_lock(&kset->list_lock);
lib/kobject.c:	list_for_each_entry(k, &kset->list, entry) {
lib/kobject.c:	spin_unlock(&kset->list_lock);
lib/kobject.c:	retval = kobject_set_name(&kset->kobj, "%s", name);
lib/kobject.c:	kset->uevent_ops = uevent_ops;
lib/kobject.c:	kset->kobj.parent = parent_kobj;
lib/kobject.c:	kset->kobj.ktype = &kset_ktype;
lib/kobject.c:	kset->kobj.kset = NULL;
lib/kobject_uevent.c:		struct kobject *ksobj = &kobj->kset->kobj;
lib/kobject_uevent.c:	uevent_ops = kset->uevent_ops;
lib/kobject_uevent.c:		subsystem = kobject_name(&kset->kobj);
lib/xarray.c:		xas->xa_offset--;
lib/zstd/zstd_opt.h:				offset--;
lib/zstd/zstd_opt.h:					offset--;
lib/zstd/zstd_opt.h:				offset--;
lib/zstd/zstd_opt.h:					offset--;
mm/page_alloc.c:	pcp = &pset->pcp;
mm/page_alloc.c:			K(this_cpu_read(zone->pageset->pcp.count)),
mm/readahead.c: * Count contiguously cached pages from @offset-1 to @offset-@max,
mm/slub.c:		sysfs_remove_link(&slab_kset->kobj, s->name);
mm/slub.c:		sysfs_remove_link(&slab_kset->kobj, name);
mm/slub.c:		return sysfs_create_link(&slab_kset->kobj, &s->kobj, name);
mm/vmstat.c: * pset->vm_stat_diff[] exsist.
mm/vmstat.c:		if (pset->vm_stat_diff[i]) {
mm/vmstat.c:			int v = pset->vm_stat_diff[i];
mm/vmstat.c:			pset->vm_stat_diff[i] = 0;
mm/vmstat.c:		if (pset->vm_numa_stat_diff[i]) {
mm/vmstat.c:			int v = pset->vm_numa_stat_diff[i];
mm/vmstat.c:			pset->vm_numa_stat_diff[i] = 0;
mm/vmstat.c:			   pageset->pcp.count,
mm/vmstat.c:			   pageset->pcp.high,
mm/vmstat.c:			   pageset->pcp.batch);
mm/vmstat.c:				pageset->stat_threshold);
net/ceph/osdmap.c:	if (set->size > 0 && set->primary >= 0)
net/ceph/osdmap.c:	if (!set->size && set->primary == -1)
net/ceph/osdmap.c:	if (set->size > 0 && set->primary == -1) {
net/ceph/osdmap.c:		for (i = 0; i < set->size; i++) {
net/ceph/osdmap.c:			if (set->osds[i] != CRUSH_ITEM_NONE)
net/ceph/osdmap.c:		if (i == set->size)
net/ceph/osdmap.c:		for (i = 0; i < set->size; i++) {
net/ceph/osdmap.c:			if (!ceph_osd_exists(osdmap, set->osds[i])) {
net/ceph/osdmap.c:				set->osds[i - removed] = set->osds[i];
net/ceph/osdmap.c:		set->size -= removed;
net/ceph/osdmap.c:		for (i = 0; i < set->size; i++) {
net/ceph/osdmap.c:			if (!ceph_osd_exists(osdmap, set->osds[i]))
net/ceph/osdmap.c:				set->osds[i] = CRUSH_ITEM_NONE;
net/ceph/osdmap.c:	BUG_ON(set->primary != -1);
net/ceph/osdmap.c:		for (i = 0; i < set->size; i++) {
net/ceph/osdmap.c:			if (ceph_osd_is_down(osdmap, set->osds[i])) {
net/ceph/osdmap.c:				set->osds[i - removed] = set->osds[i];
net/ceph/osdmap.c:		set->size -= removed;
net/ceph/osdmap.c:		if (set->size > 0)
net/ceph/osdmap.c:			set->primary = set->osds[0];
net/ceph/osdmap.c:		for (i = set->size - 1; i >= 0; i--) {
net/ceph/osdmap.c:			if (ceph_osd_is_down(osdmap, set->osds[i]))
net/ceph/osdmap.c:				set->osds[i] = CRUSH_ITEM_NONE;
net/ceph/osdmap.c:				set->primary = set->osds[i];
net/core/skbuff.c:					frag->page_offset+offset-start);
net/core/skbuff.c:		/* vlan_tci is already set-up so leave this for another time */
net/ipv4/inet_connection_sock.c:	offset--;
net/ipv4/ip_options.c:						memcpy(&addr, dptr+soffset-1, 4);
net/ipv4/ip_options.c:			memcpy(&faddr, &start[soffset-1], 4);
net/ipv4/ip_options.c:				memcpy(&dptr[doffset-1], &start[soffset-1], 4);
net/ipv4/netfilter/nf_nat_snmp_basic.asn1:		set-request
net/ipv4/tcp.c:			offset--;
net/ipv4/tcp.c:				offset--;
net/ipv4/tcp_ipv4.c:		while (offset-- && rc)
net/ipv4/tcp_ipv4.c:		while (offset-- && rc)
net/netfilter/Makefile:nf_tables_set-objs := nf_tables_set_core.o \
net/netfilter/ipset/Makefile:ip_set-y := ip_set_core.o ip_set_getport.o pfxlen.o
net/netfilter/ipset/ip_set_bitmap_gen.h:	struct mtype *map = set->data;
net/netfilter/ipset/ip_set_bitmap_gen.h:	mod_timer(&map->gc, jiffies + IPSET_GC_PERIOD(set->timeout) * HZ);
net/netfilter/ipset/ip_set_bitmap_gen.h:	struct mtype *map = set->data;
net/netfilter/ipset/ip_set_bitmap_gen.h:	struct mtype *map = set->data;
net/netfilter/ipset/ip_set_bitmap_gen.h:	if (set->dsize && set->extensions & IPSET_EXT_DESTROY)
net/netfilter/ipset/ip_set_bitmap_gen.h:	set->data = NULL;
net/netfilter/ipset/ip_set_bitmap_gen.h:	struct mtype *map = set->data;
net/netfilter/ipset/ip_set_bitmap_gen.h:	if (set->extensions & IPSET_EXT_DESTROY)
net/netfilter/ipset/ip_set_bitmap_gen.h:	set->elements = 0;
net/netfilter/ipset/ip_set_bitmap_gen.h:	set->ext_size = 0;
net/netfilter/ipset/ip_set_bitmap_gen.h:	const struct mtype *map = set->data;
net/netfilter/ipset/ip_set_bitmap_gen.h:	size_t memsize = mtype_memsize(map, set->dsize) + set->ext_size;
net/netfilter/ipset/ip_set_bitmap_gen.h:	    nla_put_net32(skb, IPSET_ATTR_REFERENCES, htonl(set->ref)) ||
net/netfilter/ipset/ip_set_bitmap_gen.h:	    nla_put_net32(skb, IPSET_ATTR_ELEMENTS, htonl(set->elements)))
net/netfilter/ipset/ip_set_bitmap_gen.h:	struct mtype *map = set->data;
net/netfilter/ipset/ip_set_bitmap_gen.h:	int ret = mtype_do_test(e, map, set->dsize);
net/netfilter/ipset/ip_set_bitmap_gen.h:	struct mtype *map = set->data;
net/netfilter/ipset/ip_set_bitmap_gen.h:	int ret = mtype_do_add(e, map, flags, set->dsize);
net/netfilter/ipset/ip_set_bitmap_gen.h:			set->elements--;
net/netfilter/ipset/ip_set_bitmap_gen.h:		set->elements--;
net/netfilter/ipset/ip_set_bitmap_gen.h:	set->elements++;
net/netfilter/ipset/ip_set_bitmap_gen.h:	struct mtype *map = set->data;
net/netfilter/ipset/ip_set_bitmap_gen.h:	set->elements--;
net/netfilter/ipset/ip_set_bitmap_gen.h:	struct mtype *map = set->data;
net/netfilter/ipset/ip_set_bitmap_gen.h:		if (mtype_do_list(skb, map, id, set->dsize))
net/netfilter/ipset/ip_set_bitmap_gen.h:	spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_bitmap_gen.h:		if (mtype_gc_test(id, map, set->dsize)) {
net/netfilter/ipset/ip_set_bitmap_gen.h:				set->elements--;
net/netfilter/ipset/ip_set_bitmap_gen.h:	spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_bitmap_gen.h:	map->gc.expires = jiffies + IPSET_GC_PERIOD(set->timeout) * HZ;
net/netfilter/ipset/ip_set_bitmap_ip.c:	struct bitmap_ip *map = set->data;
net/netfilter/ipset/ip_set_bitmap_ip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_bitmap_ip.c:	struct bitmap_ip *map = set->data;
net/netfilter/ipset/ip_set_bitmap_ip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_bitmap_ip.c:	set->timeout = IPSET_NO_TIMEOUT;
net/netfilter/ipset/ip_set_bitmap_ip.c:	set->data = map;
net/netfilter/ipset/ip_set_bitmap_ip.c:	set->family = NFPROTO_IPV4;
net/netfilter/ipset/ip_set_bitmap_ip.c:	set->dsize = ip_set_elem_len(set, tb, 0, 0);
net/netfilter/ipset/ip_set_bitmap_ip.c:	map = ip_set_alloc(sizeof(*map) + elements * set->dsize);
net/netfilter/ipset/ip_set_bitmap_ip.c:	set->variant = &bitmap_ip;
net/netfilter/ipset/ip_set_bitmap_ip.c:		set->timeout = ip_set_timeout_uget(tb[IPSET_ATTR_TIMEOUT]);
net/netfilter/ipset/ip_set_bitmap_ipmac.c:		if (t == set->timeout)
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	struct bitmap_ipmac *map = set->data;
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	const struct bitmap_ipmac *map = set->data;
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	set->timeout = IPSET_NO_TIMEOUT;
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	set->data = map;
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	set->family = NFPROTO_IPV4;
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	set->dsize = ip_set_elem_len(set, tb,
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	map = ip_set_alloc(sizeof(*map) + elements * set->dsize);
net/netfilter/ipset/ip_set_bitmap_ipmac.c:	set->variant = &bitmap_ipmac;
net/netfilter/ipset/ip_set_bitmap_ipmac.c:		set->timeout = ip_set_timeout_uget(tb[IPSET_ATTR_TIMEOUT]);
net/netfilter/ipset/ip_set_bitmap_port.c:	struct bitmap_port *map = set->data;
net/netfilter/ipset/ip_set_bitmap_port.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_bitmap_port.c:	struct bitmap_port *map = set->data;
net/netfilter/ipset/ip_set_bitmap_port.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_bitmap_port.c:	set->timeout = IPSET_NO_TIMEOUT;
net/netfilter/ipset/ip_set_bitmap_port.c:	set->data = map;
net/netfilter/ipset/ip_set_bitmap_port.c:	set->family = NFPROTO_UNSPEC;
net/netfilter/ipset/ip_set_bitmap_port.c:	set->dsize = ip_set_elem_len(set, tb, 0, 0);
net/netfilter/ipset/ip_set_bitmap_port.c:	map = ip_set_alloc(sizeof(*map) + elements * set->dsize);
net/netfilter/ipset/ip_set_bitmap_port.c:	set->variant = &bitmap_port;
net/netfilter/ipset/ip_set_bitmap_port.c:		set->timeout = ip_set_timeout_uget(tb[IPSET_ATTR_TIMEOUT]);
net/netfilter/ipset/ip_set_core.c:		set->flags |= IPSET_CREATE_FLAG_FORCEADD;
net/netfilter/ipset/ip_set_core.c:		set->offset[id] = len;
net/netfilter/ipset/ip_set_core.c:		set->extensions |= ip_set_extensions[id].type;
net/netfilter/ipset/ip_set_core.c:	set->ref++;
net/netfilter/ipset/ip_set_core.c:	BUG_ON(set->ref == 0);
net/netfilter/ipset/ip_set_core.c:	set->ref--;
net/netfilter/ipset/ip_set_core.c:/* set->ref can be swapped out by ip_set_swap, netlink events (like dump) need
net/netfilter/ipset/ip_set_core.c:	BUG_ON(set->ref_netlink == 0);
net/netfilter/ipset/ip_set_core.c:	set->ref_netlink--;
net/netfilter/ipset/ip_set_core.c:	pr_debug("set %s, index %u\n", set->name, index);
net/netfilter/ipset/ip_set_core.c:	if (opt->dim < set->type->dimension ||
net/netfilter/ipset/ip_set_core.c:	    !(opt->family == set->family || set->family == NFPROTO_UNSPEC))
net/netfilter/ipset/ip_set_core.c:	ret = set->variant->kadt(set, skb, par, IPSET_TEST, opt);
net/netfilter/ipset/ip_set_core.c:		spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:		set->variant->kadt(set, skb, par, IPSET_ADD, opt);
net/netfilter/ipset/ip_set_core.c:		spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:		    (set->type->features & IPSET_TYPE_NOMATCH) &&
net/netfilter/ipset/ip_set_core.c:	pr_debug("set %s, index %u\n", set->name, index);
net/netfilter/ipset/ip_set_core.c:	if (opt->dim < set->type->dimension ||
net/netfilter/ipset/ip_set_core.c:	    !(opt->family == set->family || set->family == NFPROTO_UNSPEC))
net/netfilter/ipset/ip_set_core.c:	spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:	ret = set->variant->kadt(set, skb, par, IPSET_ADD, opt);
net/netfilter/ipset/ip_set_core.c:	spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:	pr_debug("set %s, index %u\n", set->name, index);
net/netfilter/ipset/ip_set_core.c:	if (opt->dim < set->type->dimension ||
net/netfilter/ipset/ip_set_core.c:	    !(opt->family == set->family || set->family == NFPROTO_UNSPEC))
net/netfilter/ipset/ip_set_core.c:	spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:	ret = set->variant->kadt(set, skb, par, IPSET_DEL, opt);
net/netfilter/ipset/ip_set_core.c:	spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:	strncpy(name, set->name, IPSET_MAXNAMELEN);
net/netfilter/ipset/ip_set_core.c:		if (set && STRNCMP(set->name, name)) {
net/netfilter/ipset/ip_set_core.c:	spin_lock_init(&set->lock);
net/netfilter/ipset/ip_set_core.c:	strlcpy(set->name, name, IPSET_MAXNAMELEN);
net/netfilter/ipset/ip_set_core.c:	set->family = family;
net/netfilter/ipset/ip_set_core.c:	set->revision = revision;
net/netfilter/ipset/ip_set_core.c:	ret = find_set_type_get(typename, family, revision, &set->type);
net/netfilter/ipset/ip_set_core.c:			     set->type->create_policy, NULL)) {
net/netfilter/ipset/ip_set_core.c:	ret = set->type->create(net, set, tb, flags);
net/netfilter/ipset/ip_set_core.c:	ret = find_free_id(inst, set->name, &index, &clash);
net/netfilter/ipset/ip_set_core.c:		    STRNCMP(set->type->name, clash->type->name) &&
net/netfilter/ipset/ip_set_core.c:		    set->type->family == clash->type->family &&
net/netfilter/ipset/ip_set_core.c:		    set->type->revision_min == clash->type->revision_min &&
net/netfilter/ipset/ip_set_core.c:		    set->type->revision_max == clash->type->revision_max &&
net/netfilter/ipset/ip_set_core.c:		    set->variant->same_set(set, clash))
net/netfilter/ipset/ip_set_core.c:	pr_debug("create: '%s' created with index %u!\n", set->name, index);
net/netfilter/ipset/ip_set_core.c:	set->variant->destroy(set);
net/netfilter/ipset/ip_set_core.c:	module_put(set->type->me);
net/netfilter/ipset/ip_set_core.c:	pr_debug("set: %s\n",  set->name);
net/netfilter/ipset/ip_set_core.c:	set->variant->destroy(set);
net/netfilter/ipset/ip_set_core.c:	module_put(set->type->me);
net/netfilter/ipset/ip_set_core.c:	pr_debug("set: %s\n",  set->name);
net/netfilter/ipset/ip_set_core.c:	spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:	set->variant->flush(set);
net/netfilter/ipset/ip_set_core.c:	spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:	if (set->ref != 0 || set->ref_netlink != 0) {
net/netfilter/ipset/ip_set_core.c:	strncpy(set->name, name2, IPSET_MAXNAMELEN);
net/netfilter/ipset/ip_set_core.c:		if (set->variant->uref)
net/netfilter/ipset/ip_set_core.c:			set->variant->uref(set, cb, false);
net/netfilter/ipset/ip_set_core.c:		pr_debug("release set %s\n", set->name);
net/netfilter/ipset/ip_set_core.c:		     !!(set->type->features & IPSET_DUMP_LAST))) {
net/netfilter/ipset/ip_set_core.c:		pr_debug("List set: %s\n", set->name);
net/netfilter/ipset/ip_set_core.c:			set->ref_netlink++;
net/netfilter/ipset/ip_set_core.c:		    nla_put_string(skb, IPSET_ATTR_SETNAME, set->name))
net/netfilter/ipset/ip_set_core.c:					   set->type->name) ||
net/netfilter/ipset/ip_set_core.c:				       set->family) ||
net/netfilter/ipset/ip_set_core.c:				       set->revision))
net/netfilter/ipset/ip_set_core.c:			ret = set->variant->head(set, skb);
net/netfilter/ipset/ip_set_core.c:			if (set->variant->uref)
net/netfilter/ipset/ip_set_core.c:				set->variant->uref(set, cb, true);
net/netfilter/ipset/ip_set_core.c:			ret = set->variant->list(set, skb, cb);
net/netfilter/ipset/ip_set_core.c:		if (set && set->variant->uref)
net/netfilter/ipset/ip_set_core.c:			set->variant->uref(set, cb, false);
net/netfilter/ipset/ip_set_core.c:		if (set->variant->uref)
net/netfilter/ipset/ip_set_core.c:			set->variant->uref(set, cb, false);
net/netfilter/ipset/ip_set_core.c:		pr_debug("release set %s\n", set->name);
net/netfilter/ipset/ip_set_core.c:		spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:		ret = set->variant->uadt(set, tb, adt, &lineno, flags, retried);
net/netfilter/ipset/ip_set_core.c:		spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_core.c:		 set->variant->resize &&
net/netfilter/ipset/ip_set_core.c:		 (ret = set->variant->resize(set, retried)) == 0);
net/netfilter/ipset/ip_set_core.c:				     set->type->adt_policy, NULL))
net/netfilter/ipset/ip_set_core.c:					     set->type->adt_policy, NULL))
net/netfilter/ipset/ip_set_core.c:				     set->type->adt_policy, NULL))
net/netfilter/ipset/ip_set_core.c:					     set->type->adt_policy, NULL))
net/netfilter/ipset/ip_set_core.c:			     set->type->adt_policy, NULL))
net/netfilter/ipset/ip_set_core.c:	ret = set->variant->uadt(set, tb, IPSET_TEST, NULL, 0, 0);
net/netfilter/ipset/ip_set_core.c:	    nla_put_string(skb2, IPSET_ATTR_SETNAME, set->name) ||
net/netfilter/ipset/ip_set_core.c:	    nla_put_string(skb2, IPSET_ATTR_TYPENAME, set->type->name) ||
net/netfilter/ipset/ip_set_core.c:	    nla_put_u8(skb2, IPSET_ATTR_FAMILY, set->family) ||
net/netfilter/ipset/ip_set_core.c:	    nla_put_u8(skb2, IPSET_ATTR_REVISION, set->revision))
net/netfilter/ipset/ip_set_core.c:	    nla_put_u8(skb2, IPSET_ATTR_FAMILY, set->family) ||
net/netfilter/ipset/ip_set_core.c:	    nla_put_string(skb2, IPSET_ATTR_SETNAME, set->name))
net/netfilter/ipset/ip_set_core.c:		ret = strscpy(req_get->set.name, set ? set->name : "",
net/netfilter/ipset/ip_set_hash_gen.h:			ip_set_ext_destroy(set, ahash_data(n, i, set->dsize));
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:		if (set->extensions & IPSET_EXT_DESTROY)
net/netfilter/ipset/ip_set_hash_gen.h:	set->elements = 0;
net/netfilter/ipset/ip_set_hash_gen.h:	set->ext_size = 0;
net/netfilter/ipset/ip_set_hash_gen.h:		if (set->extensions & IPSET_EXT_DESTROY && ext_destroy)
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:	set->data = NULL;
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:	mod_timer(&h->gc, jiffies + IPSET_GC_PERIOD(set->timeout) * HZ);
net/netfilter/ipset/ip_set_hash_gen.h:		 IPSET_GC_PERIOD(set->timeout));
net/netfilter/ipset/ip_set_hash_gen.h:	size_t dsize = set->dsize;
net/netfilter/ipset/ip_set_hash_gen.h:			set->elements--;
net/netfilter/ipset/ip_set_hash_gen.h:			set->ext_size -= ext_size(AHASH_INIT_SIZE, dsize);
net/netfilter/ipset/ip_set_hash_gen.h:	spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_hash_gen.h:	spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_hash_gen.h:	h->gc.expires = jiffies + IPSET_GC_PERIOD(set->timeout) * HZ;
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:	size_t extsize, dsize = set->dsize;
net/netfilter/ipset/ip_set_hash_gen.h:			set->name);
net/netfilter/ipset/ip_set_hash_gen.h:	spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_hash_gen.h:		 set->name, orig->htable_bits, htable_bits, orig);
net/netfilter/ipset/ip_set_hash_gen.h:	set->ext_size = extsize;
net/netfilter/ipset/ip_set_hash_gen.h:	spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_hash_gen.h:	pr_debug("set %s resized from %u (%p) to %u (%p)\n", set->name,
net/netfilter/ipset/ip_set_hash_gen.h:	spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:	if (set->elements >= h->maxelem) {
net/netfilter/ipset/ip_set_hash_gen.h:		if (set->elements >= h->maxelem && SET_WITH_FORCEADD(set))
net/netfilter/ipset/ip_set_hash_gen.h:		if (forceadd || set->elements >= h->maxelem)
net/netfilter/ipset/ip_set_hash_gen.h:		n = kzalloc(sizeof(*n) + AHASH_INIT_SIZE * set->dsize,
net/netfilter/ipset/ip_set_hash_gen.h:		set->ext_size += ext_size(AHASH_INIT_SIZE, set->dsize);
net/netfilter/ipset/ip_set_hash_gen.h:		data = ahash_data(n, i, set->dsize);
net/netfilter/ipset/ip_set_hash_gen.h:		data = ahash_data(n, j, set->dsize);
net/netfilter/ipset/ip_set_hash_gen.h:			set->elements--;
net/netfilter/ipset/ip_set_hash_gen.h:	if (set->elements >= h->maxelem)
net/netfilter/ipset/ip_set_hash_gen.h:			    (old->size + AHASH_INIT_SIZE) * set->dsize,
net/netfilter/ipset/ip_set_hash_gen.h:		       old->size * set->dsize);
net/netfilter/ipset/ip_set_hash_gen.h:		set->ext_size += ext_size(AHASH_INIT_SIZE, set->dsize);
net/netfilter/ipset/ip_set_hash_gen.h:	data = ahash_data(n, j, set->dsize);
net/netfilter/ipset/ip_set_hash_gen.h:	set->elements++;
net/netfilter/ipset/ip_set_hash_gen.h:			set->name, h->maxelem);
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:	size_t dsize = set->dsize;
net/netfilter/ipset/ip_set_hash_gen.h:		set->elements--;
net/netfilter/ipset/ip_set_hash_gen.h:			set->ext_size -= ext_size(n->size, dsize);
net/netfilter/ipset/ip_set_hash_gen.h:			set->ext_size -= ext_size(AHASH_INIT_SIZE, dsize);
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:			data = ahash_data(n, i, set->dsize);
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:		data = ahash_data(n, i, set->dsize);
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:	/* If any members have expired, set->elements will be wrong
net/netfilter/ipset/ip_set_hash_gen.h:	 * we do not hold set->lock here, so grab it first.
net/netfilter/ipset/ip_set_hash_gen.h:	 * set->elements can still be incorrect in the case of a huge set,
net/netfilter/ipset/ip_set_hash_gen.h:		spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_hash_gen.h:		spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_hash_gen.h:	memsize = mtype_ahash_memsize(h, t) + set->ext_size;
net/netfilter/ipset/ip_set_hash_gen.h:	if (nla_put_net32(skb, IPSET_ATTR_REFERENCES, htonl(set->ref)) ||
net/netfilter/ipset/ip_set_hash_gen.h:	    nla_put_net32(skb, IPSET_ATTR_ELEMENTS, htonl(set->elements)))
net/netfilter/ipset/ip_set_hash_gen.h:	struct htype *h = set->data;
net/netfilter/ipset/ip_set_hash_gen.h:	pr_debug("list hash set %s\n", set->name);
net/netfilter/ipset/ip_set_hash_gen.h:			e = ahash_data(n, i, set->dsize);
net/netfilter/ipset/ip_set_hash_gen.h:			set->name);
net/netfilter/ipset/ip_set_hash_gen.h:		 set->name, set->family == NFPROTO_IPV4 ? "inet" : "inet6");
net/netfilter/ipset/ip_set_hash_gen.h:	if (set->family != NFPROTO_UNSPEC)
net/netfilter/ipset/ip_set_hash_gen.h:	if (!(set->family == NFPROTO_IPV4 || set->family == NFPROTO_IPV6))
net/netfilter/ipset/ip_set_hash_gen.h:	netmask = set->family == NFPROTO_IPV4 ? 32 : 128;
net/netfilter/ipset/ip_set_hash_gen.h:		if ((set->family == NFPROTO_IPV4 && netmask > 32) ||
net/netfilter/ipset/ip_set_hash_gen.h:		    (set->family == NFPROTO_IPV6 && netmask > 128) ||
net/netfilter/ipset/ip_set_hash_gen.h:	set->data = h;
net/netfilter/ipset/ip_set_hash_gen.h:	if (set->family == NFPROTO_IPV4) {
net/netfilter/ipset/ip_set_hash_gen.h:		set->variant = &IPSET_TOKEN(HTYPE, 4_variant);
net/netfilter/ipset/ip_set_hash_gen.h:		set->dsize = ip_set_elem_len(set, tb,
net/netfilter/ipset/ip_set_hash_gen.h:		set->variant = &IPSET_TOKEN(HTYPE, 6_variant);
net/netfilter/ipset/ip_set_hash_gen.h:		set->dsize = ip_set_elem_len(set, tb,
net/netfilter/ipset/ip_set_hash_gen.h:	set->timeout = IPSET_NO_TIMEOUT;
net/netfilter/ipset/ip_set_hash_gen.h:		set->timeout = ip_set_timeout_uget(tb[IPSET_ATTR_TIMEOUT]);
net/netfilter/ipset/ip_set_hash_gen.h:		if (set->family == NFPROTO_IPV4)
net/netfilter/ipset/ip_set_hash_gen.h:		 set->name, jhash_size(t->htable_bits),
net/netfilter/ipset/ip_set_hash_gen.h:		 t->htable_bits, h->maxelem, set->data, t);
net/netfilter/ipset/ip_set_hash_ip.c:	const struct hash_ip4 *h = set->data;
net/netfilter/ipset/ip_set_hash_ip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ip.c:	const struct hash_ip4 *h = set->data;
net/netfilter/ipset/ip_set_hash_ip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ip.c:	const struct hash_ip6 *h = set->data;
net/netfilter/ipset/ip_set_hash_ip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ip.c:	const struct hash_ip6 *h = set->data;
net/netfilter/ipset/ip_set_hash_ip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipmac.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipmac.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipmac.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipmac.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipmark.c:	const struct hash_ipmark4 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipmark.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipmark.c:	const struct hash_ipmark4 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipmark.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipmark.c:	const struct hash_ipmark6 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipmark.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipmark.c:	const struct hash_ipmark6 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipmark.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipport.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipport.c:	const struct hash_ipport4 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipport.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipport.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipport.c:	const struct hash_ipport6 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipport.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipportip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipportip.c:	const struct hash_ipportip4 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipportip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipportip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipportip.c:	const struct hash_ipportip6 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipportip.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipportnet.c:	const struct hash_ipportnet4 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipportnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipportnet.c:	const struct hash_ipportnet4 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipportnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipportnet.c:	const struct hash_ipportnet6 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipportnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_ipportnet.c:	const struct hash_ipportnet6 *h = set->data;
net/netfilter/ipset/ip_set_hash_ipportnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_mac.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_mac.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_net.c:	const struct hash_net4 *h = set->data;
net/netfilter/ipset/ip_set_hash_net.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_net.c:	const struct hash_net4 *h = set->data;
net/netfilter/ipset/ip_set_hash_net.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_net.c:	const struct hash_net6 *h = set->data;
net/netfilter/ipset/ip_set_hash_net.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_net.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netiface.c:	struct hash_netiface4 *h = set->data;
net/netfilter/ipset/ip_set_hash_netiface.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netiface.c:	struct hash_netiface4 *h = set->data;
net/netfilter/ipset/ip_set_hash_netiface.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netiface.c:	struct hash_netiface6 *h = set->data;
net/netfilter/ipset/ip_set_hash_netiface.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netiface.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netnet.c:	const struct hash_netnet4 *h = set->data;
net/netfilter/ipset/ip_set_hash_netnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netnet.c:	const struct hash_netnet4 *h = set->data;
net/netfilter/ipset/ip_set_hash_netnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netnet.c:	const struct hash_netnet6 *h = set->data;
net/netfilter/ipset/ip_set_hash_netnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netport.c:	const struct hash_netport4 *h = set->data;
net/netfilter/ipset/ip_set_hash_netport.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netport.c:	const struct hash_netport4 *h = set->data;
net/netfilter/ipset/ip_set_hash_netport.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netport.c:	const struct hash_netport6 *h = set->data;
net/netfilter/ipset/ip_set_hash_netport.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netport.c:	const struct hash_netport6 *h = set->data;
net/netfilter/ipset/ip_set_hash_netport.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netportnet.c:	const struct hash_netportnet4 *h = set->data;
net/netfilter/ipset/ip_set_hash_netportnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netportnet.c:	const struct hash_netportnet4 *h = set->data;
net/netfilter/ipset/ip_set_hash_netportnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netportnet.c:	const struct hash_netportnet6 *h = set->data;
net/netfilter/ipset/ip_set_hash_netportnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_hash_netportnet.c:	const struct hash_netportnet6 *h = set->data;
net/netfilter/ipset/ip_set_hash_netportnet.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	set->elements--;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	e = kzalloc(set->dsize, GFP_ATOMIC);
net/netfilter/ipset/ip_set_list_set.c:	set->elements++;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	ipset_adtfn adtfn = set->variant->adt[adt];
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	set->elements = 0;
net/netfilter/ipset/ip_set_list_set.c:	set->ext_size = 0;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	set->data = NULL;
net/netfilter/ipset/ip_set_list_set.c:	const struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	size_t memsize = list_set_memsize(map, set->dsize) + set->ext_size;
net/netfilter/ipset/ip_set_list_set.c:	    nla_put_net32(skb, IPSET_ATTR_REFERENCES, htonl(set->ref)) ||
net/netfilter/ipset/ip_set_list_set.c:	    nla_put_net32(skb, IPSET_ATTR_ELEMENTS, htonl(set->elements)))
net/netfilter/ipset/ip_set_list_set.c:	const struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	spin_lock_bh(&set->lock);
net/netfilter/ipset/ip_set_list_set.c:	spin_unlock_bh(&set->lock);
net/netfilter/ipset/ip_set_list_set.c:	map->gc.expires = jiffies + IPSET_GC_PERIOD(set->timeout) * HZ;
net/netfilter/ipset/ip_set_list_set.c:	struct list_set *map = set->data;
net/netfilter/ipset/ip_set_list_set.c:	mod_timer(&map->gc, jiffies + IPSET_GC_PERIOD(set->timeout) * HZ);
net/netfilter/ipset/ip_set_list_set.c:	set->data = map;
net/netfilter/ipset/ip_set_list_set.c:	set->variant = &set_variant;
net/netfilter/ipset/ip_set_list_set.c:	set->dsize = ip_set_elem_len(set, tb, sizeof(struct set_elem),
net/netfilter/ipset/ip_set_list_set.c:		set->timeout = ip_set_timeout_uget(tb[IPSET_ATTR_TIMEOUT]);
net/netfilter/ipvs/ip_vs_lblcr.c:		list_for_each_entry(e, &set->list, list) {
net/netfilter/ipvs/ip_vs_lblcr.c:	list_add_rcu(&e->list, &set->list);
net/netfilter/ipvs/ip_vs_lblcr.c:	atomic_inc(&set->size);
net/netfilter/ipvs/ip_vs_lblcr.c:	set->lastmod = jiffies;
net/netfilter/ipvs/ip_vs_lblcr.c:	list_for_each_entry(e, &set->list, list) {
net/netfilter/ipvs/ip_vs_lblcr.c:			atomic_dec(&set->size);
net/netfilter/ipvs/ip_vs_lblcr.c:			set->lastmod = jiffies;
net/netfilter/ipvs/ip_vs_lblcr.c:	list_for_each_entry_safe(e, ep, &set->list, list) {
net/netfilter/ipvs/ip_vs_lblcr.c:	list_for_each_entry_rcu(e, &set->list, list) {
net/netfilter/ipvs/ip_vs_lblcr.c:	list_for_each_entry_continue_rcu(e, &set->list, list) {
net/netfilter/ipvs/ip_vs_lblcr.c:	list_for_each_entry(e, &set->list, list) {
net/netfilter/ipvs/ip_vs_lblcr.c:	list_for_each_entry_continue(e, &set->list, list) {
net/netfilter/nf_tables_api.c:		    !list_empty(&set->bindings))
net/netfilter/nf_tables_api.c:		if (!nla_strcmp(nla, set->name) &&
net/netfilter/nf_tables_api.c:		if (be64_to_cpu(nla_get_be64(nla)) == set->handle &&
net/netfilter/nf_tables_api.c:	set->name = kasprintf(GFP_KERNEL, name, min + n);
net/netfilter/nf_tables_api.c:	if (!set->name)
net/netfilter/nf_tables_api.c:		if (!strcmp(set->name, i->name)) {
net/netfilter/nf_tables_api.c:			kfree(set->name);
net/netfilter/nf_tables_api.c:	if (nla_put_string(skb, NFTA_SET_NAME, set->name))
net/netfilter/nf_tables_api.c:	if (nla_put_be64(skb, NFTA_SET_HANDLE, cpu_to_be64(set->handle),
net/netfilter/nf_tables_api.c:	if (set->flags != 0)
net/netfilter/nf_tables_api.c:		if (nla_put_be32(skb, NFTA_SET_FLAGS, htonl(set->flags)))
net/netfilter/nf_tables_api.c:	if (nla_put_be32(skb, NFTA_SET_KEY_TYPE, htonl(set->ktype)))
net/netfilter/nf_tables_api.c:	if (nla_put_be32(skb, NFTA_SET_KEY_LEN, htonl(set->klen)))
net/netfilter/nf_tables_api.c:	if (set->flags & NFT_SET_MAP) {
net/netfilter/nf_tables_api.c:		if (nla_put_be32(skb, NFTA_SET_DATA_TYPE, htonl(set->dtype)))
net/netfilter/nf_tables_api.c:		if (nla_put_be32(skb, NFTA_SET_DATA_LEN, htonl(set->dlen)))
net/netfilter/nf_tables_api.c:	if (set->flags & NFT_SET_OBJECT &&
net/netfilter/nf_tables_api.c:	    nla_put_be32(skb, NFTA_SET_OBJ_TYPE, htonl(set->objtype)))
net/netfilter/nf_tables_api.c:	if (set->timeout &&
net/netfilter/nf_tables_api.c:			 nf_jiffies64_to_msecs(set->timeout),
net/netfilter/nf_tables_api.c:	if (set->gc_int &&
net/netfilter/nf_tables_api.c:	    nla_put_be32(skb, NFTA_SET_GC_INTERVAL, htonl(set->gc_int)))
net/netfilter/nf_tables_api.c:	if (set->policy != NFT_SET_POL_PERFORMANCE) {
net/netfilter/nf_tables_api.c:		if (nla_put_be32(skb, NFTA_SET_POLICY, htonl(set->policy)))
net/netfilter/nf_tables_api.c:	if (nla_put(skb, NFTA_SET_USERDATA, set->udlen, set->udata))
net/netfilter/nf_tables_api.c:	if (set->size &&
net/netfilter/nf_tables_api.c:	    nla_put_be32(skb, NFTA_SET_DESC_SIZE, htonl(set->size)))
net/netfilter/nf_tables_api.c:		udata = set->data + size;
net/netfilter/nf_tables_api.c:	INIT_LIST_HEAD(&set->bindings);
net/netfilter/nf_tables_api.c:	set->table = table;
net/netfilter/nf_tables_api.c:	write_pnet(&set->net, net);
net/netfilter/nf_tables_api.c:	set->ops   = ops;
net/netfilter/nf_tables_api.c:	set->ktype = ktype;
net/netfilter/nf_tables_api.c:	set->klen  = desc.klen;
net/netfilter/nf_tables_api.c:	set->dtype = dtype;
net/netfilter/nf_tables_api.c:	set->objtype = objtype;
net/netfilter/nf_tables_api.c:	set->dlen  = desc.dlen;
net/netfilter/nf_tables_api.c:	set->flags = flags;
net/netfilter/nf_tables_api.c:	set->size  = desc.size;
net/netfilter/nf_tables_api.c:	set->policy = policy;
net/netfilter/nf_tables_api.c:	set->udlen  = udlen;
net/netfilter/nf_tables_api.c:	set->udata  = udata;
net/netfilter/nf_tables_api.c:	set->timeout = timeout;
net/netfilter/nf_tables_api.c:	set->gc_int = gc_int;
net/netfilter/nf_tables_api.c:	set->handle = nf_tables_alloc_handle(table);
net/netfilter/nf_tables_api.c:	list_add_tail_rcu(&set->list, &table->sets);
net/netfilter/nf_tables_api.c:	kfree(set->name);
net/netfilter/nf_tables_api.c:	set->ops->destroy(set);
net/netfilter/nf_tables_api.c:	module_put(to_set_type(set->ops)->owner);
net/netfilter/nf_tables_api.c:	kfree(set->name);
net/netfilter/nf_tables_api.c:	list_del_rcu(&set->list);
net/netfilter/nf_tables_api.c:	if (!list_empty(&set->bindings) ||
net/netfilter/nf_tables_api.c:	    (nlh->nlmsg_flags & NLM_F_NONREC && atomic_read(&set->nelems) > 0)) {
net/netfilter/nf_tables_api.c:	dreg = nft_type_to_reg(set->dtype);
net/netfilter/nf_tables_api.c:					   set->dtype == NFT_DATA_VERDICT ?
net/netfilter/nf_tables_api.c:					   set->dlen);
net/netfilter/nf_tables_api.c:	if (!list_empty(&set->bindings) && nft_set_is_anonymous(set))
net/netfilter/nf_tables_api.c:		list_for_each_entry(i, &set->bindings, list) {
net/netfilter/nf_tables_api.c:		set->ops->walk(ctx, set, &iter);
net/netfilter/nf_tables_api.c:	list_add_tail_rcu(&binding->list, &set->bindings);
net/netfilter/nf_tables_api.c:	if (list_empty(&set->bindings) && nft_set_is_anonymous(set) &&
net/netfilter/nf_tables_api.c:			  NFT_DATA_VALUE, set->klen) < 0)
net/netfilter/nf_tables_api.c:			  set->dtype == NFT_DATA_VERDICT ? NFT_DATA_VERDICT : NFT_DATA_VALUE,
net/netfilter/nf_tables_api.c:			  set->dlen) < 0)
net/netfilter/nf_tables_api.c:	if (nla_put_string(skb, NFTA_SET_ELEM_LIST_SET, set->name))
net/netfilter/nf_tables_api.c:	set->ops->walk(&dump_ctx->ctx, set, &args.iter);
net/netfilter/nf_tables_api.c:	if (nla_put_string(skb, NFTA_SET_NAME, set->name))
net/netfilter/nf_tables_api.c:	if (!(set->flags & NFT_SET_INTERVAL) &&
net/netfilter/nf_tables_api.c:	if (desc.type != NFT_DATA_VALUE || desc.len != set->klen)
net/netfilter/nf_tables_api.c:	priv = set->ops->get(ctx->net, set, &elem, flags);
net/netfilter/nf_tables_api.c:	elem = kzalloc(set->ops->elemsize + tmpl->len, gfp);
net/netfilter/nf_tables_api.c:	memcpy(nft_set_ext_key(ext), key, set->klen);
net/netfilter/nf_tables_api.c:		memcpy(nft_set_ext_data(ext), data, set->dlen);
net/netfilter/nf_tables_api.c:		.net	= read_pnet(&set->net),
net/netfilter/nf_tables_api.c:		.family	= set->table->family,
net/netfilter/nf_tables_api.c:		nft_data_release(nft_set_ext_data(ext), set->dtype);
net/netfilter/nf_tables_api.c:	if (set->flags & NFT_SET_MAP) {
net/netfilter/nf_tables_api.c:		if (!(set->flags & NFT_SET_TIMEOUT))
net/netfilter/nf_tables_api.c:	} else if (set->flags & NFT_SET_TIMEOUT) {
net/netfilter/nf_tables_api.c:		timeout = set->timeout;
net/netfilter/nf_tables_api.c:	if (d1.type != NFT_DATA_VALUE || d1.len != set->klen)
net/netfilter/nf_tables_api.c:		if (timeout != set->timeout)
net/netfilter/nf_tables_api.c:		if (!(set->flags & NFT_SET_OBJECT)) {
net/netfilter/nf_tables_api.c:				     set->objtype, genmask);
net/netfilter/nf_tables_api.c:		if (set->dtype != NFT_DATA_VERDICT && d2.len != set->dlen)
net/netfilter/nf_tables_api.c:		dreg = nft_type_to_reg(set->dtype);
net/netfilter/nf_tables_api.c:		list_for_each_entry(binding, &set->bindings, list) {
net/netfilter/nf_tables_api.c:	err = set->ops->insert(ctx->net, set, &elem, &ext2);
net/netfilter/nf_tables_api.c:				    nft_set_ext_data(ext2), set->dlen) != 0) ||
net/netfilter/nf_tables_api.c:	if (set->size &&
net/netfilter/nf_tables_api.c:	    !atomic_add_unless(&set->nelems, 1, set->size + set->ndeact)) {
net/netfilter/nf_tables_api.c:	set->ops->remove(ctx->net, set, &elem);
net/netfilter/nf_tables_api.c:	if (!list_empty(&set->bindings) && set->flags & NFT_SET_CONSTANT)
net/netfilter/nf_tables_api.c:		nft_data_hold(nft_set_ext_data(ext), set->dtype);
net/netfilter/nf_tables_api.c:		nft_data_release(nft_set_ext_data(ext), set->dtype);
net/netfilter/nf_tables_api.c:	if (desc.type != NFT_DATA_VALUE || desc.len != set->klen)
net/netfilter/nf_tables_api.c:	priv = set->ops->deactivate(ctx->net, set, &elem);
net/netfilter/nf_tables_api.c:	if (!set->ops->flush(ctx->net, set, elem->priv)) {
net/netfilter/nf_tables_api.c:	set->ndeact++;
net/netfilter/nf_tables_api.c:	if (!list_empty(&set->bindings) && set->flags & NFT_SET_CONSTANT)
net/netfilter/nf_tables_api.c:		set->ops->walk(&ctx, set, &iter);
net/netfilter/nf_tables_api.c:		set->ndeact++;
net/netfilter/nf_tables_api.c:			te->set->ops->activate(net, te->set, &te->elem);
net/netfilter/nf_tables_api.c:			te->set->ops->remove(net, te->set, &te->elem);
net/netfilter/nf_tables_api.c:			atomic_dec(&te->set->nelems);
net/netfilter/nf_tables_api.c:			te->set->ndeact--;
net/netfilter/nf_tables_api.c:			te->set->ops->remove(net, te->set, &te->elem);
net/netfilter/nf_tables_api.c:			atomic_dec(&te->set->nelems);
net/netfilter/nf_tables_api.c:			te->set->ops->activate(net, te->set, &te->elem);
net/netfilter/nf_tables_api.c:			te->set->ndeact--;
net/netfilter/nf_tables_api.c:		if (!(set->flags & NFT_SET_MAP) ||
net/netfilter/nf_tables_api.c:		    set->dtype != NFT_DATA_VERDICT)
net/netfilter/nf_tables_api.c:		list_for_each_entry(binding, &set->bindings, list) {
net/netfilter/nf_tables_api.c:			set->ops->walk(ctx, set, &iter);
net/netfilter/nf_tables_api.c:			list_del(&set->list);
net/netfilter/nft_dynset.c:	if (!atomic_add_unless(&set->nelems, 1, set->size))
net/netfilter/nft_dynset.c:	timeout = priv->timeout ? : set->timeout;
net/netfilter/nft_dynset.c:	if (set->size)
net/netfilter/nft_dynset.c:		atomic_dec(&set->nelems);
net/netfilter/nft_dynset.c:	if (set->ops->update(set, &regs->data[priv->sreg_key], nft_dynset_new,
net/netfilter/nft_dynset.c:			timeout = priv->timeout ? : set->timeout;
net/netfilter/nft_dynset.c:	if (set->ops->update == NULL)
net/netfilter/nft_dynset.c:	if (set->flags & NFT_SET_CONSTANT)
net/netfilter/nft_dynset.c:		if (!(set->flags & NFT_SET_TIMEOUT))
net/netfilter/nft_dynset.c:		if (!(set->flags & NFT_SET_TIMEOUT))
net/netfilter/nft_dynset.c:	err = nft_validate_register_load(priv->sreg_key, set->klen);
net/netfilter/nft_dynset.c:		if (!(set->flags & NFT_SET_MAP))
net/netfilter/nft_dynset.c:		if (set->dtype == NFT_DATA_VERDICT)
net/netfilter/nft_dynset.c:		err = nft_validate_register_load(priv->sreg_data, set->dlen);
net/netfilter/nft_dynset.c:	} else if (set->flags & NFT_SET_MAP)
net/netfilter/nft_dynset.c:		if (!(set->flags & NFT_SET_EVAL))
net/netfilter/nft_dynset.c:			if (set->flags & NFT_SET_TIMEOUT)
net/netfilter/nft_dynset.c:			if (!set->ops->gc_init)
net/netfilter/nft_dynset.c:			set->ops->gc_init(set);
net/netfilter/nft_dynset.c:	nft_set_ext_add_length(&priv->tmpl, NFT_SET_EXT_KEY, set->klen);
net/netfilter/nft_dynset.c:	if (set->flags & NFT_SET_MAP)
net/netfilter/nft_dynset.c:		nft_set_ext_add_length(&priv->tmpl, NFT_SET_EXT_DATA, set->dlen);
net/netfilter/nft_dynset.c:	if (set->flags & NFT_SET_TIMEOUT) {
net/netfilter/nft_dynset.c:		if (timeout || set->timeout)
net/netfilter/nft_dynset.c:	if (set->size == 0)
net/netfilter/nft_dynset.c:		set->size = 0xffff;
net/netfilter/nft_dynset.c:	if (priv->set->flags & NFT_SET_MAP &&
net/netfilter/nft_dynset.c:	if (nla_put_string(skb, NFTA_DYNSET_SET_NAME, priv->set->name))
net/netfilter/nft_lookup.c:	found = set->ops->lookup(nft_net(pkt), set, &regs->data[priv->sreg],
net/netfilter/nft_lookup.c:	if (set->flags & NFT_SET_MAP)
net/netfilter/nft_lookup.c:			      nft_set_ext_data(ext), set->dlen);
net/netfilter/nft_lookup.c:	if (set->flags & NFT_SET_EVAL)
net/netfilter/nft_lookup.c:	err = nft_validate_register_load(priv->sreg, set->klen);
net/netfilter/nft_lookup.c:			if (set->flags & NFT_SET_MAP)
net/netfilter/nft_lookup.c:		if (!(set->flags & NFT_SET_MAP))
net/netfilter/nft_lookup.c:						  set->dtype, set->dlen);
net/netfilter/nft_lookup.c:	} else if (set->flags & NFT_SET_MAP)
net/netfilter/nft_lookup.c:	priv->binding.flags = set->flags & NFT_SET_MAP;
net/netfilter/nft_lookup.c:	if (nla_put_string(skb, NFTA_LOOKUP_SET, priv->set->name))
net/netfilter/nft_lookup.c:	if (priv->set->flags & NFT_SET_MAP)
net/netfilter/nft_lookup.c:	if (!(priv->set->flags & NFT_SET_MAP) ||
net/netfilter/nft_lookup.c:	    priv->set->dtype != NFT_DATA_VERDICT)
net/netfilter/nft_lookup.c:	priv->set->ops->walk(ctx, priv->set, &iter);
net/netfilter/nft_objref.c:	found = set->ops->lookup(nft_net(pkt), set, &regs->data[priv->sreg],
net/netfilter/nft_objref.c:	if (!(set->flags & NFT_SET_OBJECT))
net/netfilter/nft_objref.c:	err = nft_validate_register_load(priv->sreg, set->klen);
net/netfilter/nft_objref.c:	priv->binding.flags = set->flags & NFT_SET_OBJECT;
net/netfilter/nft_objref.c:	    nla_put_string(skb, NFTA_OBJREF_SET_NAME, priv->set->name))
net/netfilter/nft_set_bitmap.c:	if (set->klen == 2)
net/netfilter/nft_set_bitmap.c:			   nft_set_ext_key(&this->ext), set->klen) ||
net/netfilter/nft_set_bitmap.c:		if (memcmp(nft_set_ext_key(&be->ext), elem->key.val.data, set->klen) ||
net/netfilter/nft_set_bitmap.c:	priv->bitmap_size = nft_bitmap_size(set->klen);
net/netfilter/nft_set_hash.c:	if (memcmp(nft_set_ext_key(&he->ext), x->key, x->set->klen))
net/netfilter/nft_set_hash.c:			    expr->ops->gc(read_pnet(&set->net), expr))
net/netfilter/nft_set_hash.c:		atomic_dec(&set->nelems);
net/netfilter/nft_set_hash.c:	params.key_len	  = set->klen;
net/netfilter/nft_set_hash.c:	if (set->flags & NFT_SET_TIMEOUT)
net/netfilter/nft_set_hash.c:	hash = jhash(key, set->klen, priv->seed);
net/netfilter/nft_set_hash.c:		if (!memcmp(nft_set_ext_key(&he->ext), key, set->klen) &&
net/netfilter/nft_set_hash.c:	hash = jhash(elem->key.val.data, set->klen, priv->seed);
net/netfilter/nft_set_hash.c:		if (!memcmp(nft_set_ext_key(&he->ext), elem->key.val.data, set->klen) &&
net/netfilter/nft_set_hash.c:	k1 = nft_hash_key(key, set->klen);
net/netfilter/nft_set_hash.c:		k2 = nft_hash_key(nft_set_ext_key(&he->ext)->data, set->klen);
net/netfilter/nft_set_hash.c:	if (set->klen == 4) {
net/netfilter/nft_set_hash.c:		hash = jhash(key, set->klen, priv->seed);
net/netfilter/nft_set_hash.c:			    nft_set_ext_key(&he->ext), set->klen) &&
net/netfilter/nft_set_hash.c:			    set->klen) &&
net/netfilter/nft_set_rbtree.c:	return memcmp(this, nft_set_ext_key(&interval->ext), set->klen) == 0;
net/netfilter/nft_set_rbtree.c:		d = memcmp(this, key, set->klen);
net/netfilter/nft_set_rbtree.c:	if (set->flags & NFT_SET_INTERVAL && interval != NULL &&
net/netfilter/nft_set_rbtree.c:		d = memcmp(this, key, set->klen);
net/netfilter/nft_set_rbtree.c:	if (set->flags & NFT_SET_INTERVAL && interval != NULL &&
net/netfilter/nft_set_rbtree.c:			   set->klen);
net/netfilter/nft_set_rbtree.c:					   set->klen);
net/netfilter/nft_set_rbtree.c:		atomic_dec(&set->nelems);
net/netfilter/nft_set_rbtree.c:			atomic_dec(&set->nelems);
net/netfilter/nft_set_rbtree.c:	if (set->flags & NFT_SET_TIMEOUT)
net/netfilter/x_tables.c: * target_offset---------------------------------'               |
net/netfilter/x_tables.c: * next_offset---------------------------------------------------'
net/openvswitch/flow.c:	/* key_extract assumes that skb->protocol is set-up for
net/rfkill/rfkill-gpio.c:	{ "reset-gpios", &reset_gpios, 1 },
net/sched/em_ipset.c:	index = ip_set_nfnl_get_byindex(net, set->index);
net/sched/em_ipset.c:		ip_set_nfnl_put(em->net, set->index);
net/sched/em_ipset.c:	opt.dim = set->dim;
net/sched/em_ipset.c:	opt.flags = set->flags;
net/sched/em_ipset.c:	ret = ip_set_test(set->index, skb, &acpar, &opt);
net/sched/sch_cake.c: *   set-associative hash function.
net/sched/sch_cake.c:	/* set-associative hashing */
net/sctp/sm_statefuns.c:	/* set-up our fake chunk so that we can process it */
net/sctp/ulpevent.c:	sreset->strreset_type = SCTP_STREAM_RESET_EVENT;
net/sctp/ulpevent.c:	sreset->strreset_flags = flags;
net/sctp/ulpevent.c:	sreset->strreset_length = length;
net/sctp/ulpevent.c:	sreset->strreset_assoc_id = sctp_assoc2id(asoc);
net/sctp/ulpevent.c:		sreset->strreset_stream_list[i] = ntohs(stream_list[i]);
net/sctp/ulpevent.c:	areset->assocreset_type = SCTP_ASSOC_RESET_EVENT;
net/sctp/ulpevent.c:	areset->assocreset_flags = flags;
net/sctp/ulpevent.c:	areset->assocreset_length = sizeof(struct sctp_assoc_reset_event);
net/sctp/ulpevent.c:	areset->assocreset_assoc_id = sctp_assoc2id(asoc);
net/sctp/ulpevent.c:	areset->assocreset_local_tsn = local_tsn;
net/sctp/ulpevent.c:	areset->assocreset_remote_tsn = remote_tsn;
samples/kobject/Makefile:obj-$(CONFIG_SAMPLE_KOBJECT) += kobject-example.o kset-example.o
samples/kobject/kset-example.c: * /sys/kernel/kset-example
scripts/Kbuild.include:# Usage: cflags-y += $(call cc-disable-warning,unused-but-set-variable)
scripts/Makefile.extrawarn:warning-1 += $(call cc-option, -Wunused-but-set-variable)
scripts/checkpatch.pl:			fixup_current_range(\$lines[$range_last_linenr], $delta_offset--, -1);
scripts/config:	--set-str option string
scripts/config:	--set-val option value
scripts/config:	--set-str)
scripts/config:	--set-val)
scripts/dtc/checks.c:WARNING_PROPERTY_PHANDLE_CELLS(resets, "resets", "#reset-cells");
scripts/dtc/include-prefixes/arc/axs10x_mb.dtsi:		creg_rst: reset-controller@11220 {
scripts/dtc/include-prefixes/arc/axs10x_mb.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arc/axs10x_mb.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arc/hsdk.dts:		cgu_rst: reset-controller@8a0 {
scripts/dtc/include-prefixes/arc/hsdk.dts:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arc/hsdk.dts:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/am335x-baltos.dtsi:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/am335x-baltos.dtsi:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/am335x-evmsk.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/am335x-icev2.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/am335x-icev2.dts:	reset-gpios = <&gpio2 5 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/am335x-icev2.dts:	reset-delay-us = <2>;   /* PHY datasheet states 1uS min */
scripts/dtc/include-prefixes/arm/am335x-moxa-uc-8100-me-t.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/am335x-pepper.dts:	reset-gpios = <&gpio1 16 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/am335x-sl50.dts:		reset-gpios = <&gpio1 20 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/am33xx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/am33xx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/am437x-gp-evm.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/am437x-sk-evm.dts:		reset-gpios = <&gpio1 28 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/am43xx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/am43xx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/am57xx-beagle-x15-common.dtsi:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/am57xx-cl-som-am57x.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/am57xx-cl-som-am57x.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/armada-370-dlink-dns327l.dts:		reset-button {
scripts/dtc/include-prefixes/arm/armada-370-dlink-dns327l.dts:	reset_button_pin: reset-button-pin {
scripts/dtc/include-prefixes/arm/armada-370-netgear-rn102.dts:		reset-button {
scripts/dtc/include-prefixes/arm/armada-370-netgear-rn102.dts:	reset_button_pin: reset-button-pin {
scripts/dtc/include-prefixes/arm/armada-370-netgear-rn104.dts:		reset-button {
scripts/dtc/include-prefixes/arm/armada-370-netgear-rn104.dts:	reset_button_pin: reset-button-pin {
scripts/dtc/include-prefixes/arm/armada-388-clearfog-base.dts:		 * register, rather than preserving reset-loaded setting.
scripts/dtc/include-prefixes/arm/armada-388-clearfog.dts:				reset-gpios = <&expander0 2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/armada-388-clearfog.dtsi:				reset-gpios = <&expander0 1 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/armada-38x-solidrun-microsom.dtsi:		 * register, rather than preserving reset-loaded setting.
scripts/dtc/include-prefixes/arm/armada-xp-lenovo-ix4-300d.dts:		reset-button {
scripts/dtc/include-prefixes/arm/armada-xp-lenovo-ix4-300d.dts:	reset_button_pin: reset-button-pin {
scripts/dtc/include-prefixes/arm/armada-xp-netgear-rn2120.dts:		reset-button {
scripts/dtc/include-prefixes/arm/armada-xp-netgear-rn2120.dts:	reset_button_pin: reset-button-pin {
scripts/dtc/include-prefixes/arm/aspeed-bmc-opp-witherspoon.dts:	aspeed,reset-type = "none";
scripts/dtc/include-prefixes/arm/aspeed-g4.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/aspeed-g4.dtsi:					lpc_reset: reset-controller@18 {
scripts/dtc/include-prefixes/arm/aspeed-g4.dtsi:						#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/aspeed-g5.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/aspeed-g5.dtsi:					lpc_reset: reset-controller@18 {
scripts/dtc/include-prefixes/arm/aspeed-g5.dtsi:						#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/at91-vinco.dts:					reset-gpios = <&pioE 8 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/at91-vinco.dts:					reset-gpios = <&pioE 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/at91sam9260.dtsi:				atmel,reset-type = "all";
scripts/dtc/include-prefixes/arm/at91sam9263.dtsi:				atmel,reset-type = "all";
scripts/dtc/include-prefixes/arm/at91sam9g45.dtsi:				atmel,reset-type = "all";
scripts/dtc/include-prefixes/arm/at91sam9m10g45ek.dts:					pinctrl_sensor_reset: sensor_reset-0 {
scripts/dtc/include-prefixes/arm/at91sam9n12.dtsi:				atmel,reset-type = "all";
scripts/dtc/include-prefixes/arm/at91sam9x5.dtsi:				atmel,reset-type = "all";
scripts/dtc/include-prefixes/arm/at91sam9x5ek.dtsi:					pinctrl_sensor_reset: sensor_reset-0 {
scripts/dtc/include-prefixes/arm/atlas6.dtsi:			rstc: reset-controller@88010000 {
scripts/dtc/include-prefixes/arm/atlas6.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/atlas7.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/bcm23550.dtsi:		resetmgr: reset-controller@1001f00 {
scripts/dtc/include-prefixes/arm/bcm2835-rpi-zero-w.dts:		reset-gpios = <&gpio 41 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/bcm2837-rpi-3-b-plus.dts:		reset-gpios = <&expgpio 1 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/bcm2837-rpi-3-b.dts:		reset-gpios = <&expgpio 1 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/bcm63138.dtsi:		pmb0: reset-controller@4800c0 {
scripts/dtc/include-prefixes/arm/bcm63138.dtsi:			#reset-cells = <2>;
scripts/dtc/include-prefixes/arm/bcm63138.dtsi:		pmb1: reset-controller@4800e0 {
scripts/dtc/include-prefixes/arm/bcm63138.dtsi:			#reset-cells = <2>;
scripts/dtc/include-prefixes/arm/berlin2.dtsi:				#reset-cells = <2>;
scripts/dtc/include-prefixes/arm/berlin2cd.dtsi:				#reset-cells = <2>;
scripts/dtc/include-prefixes/arm/berlin2q.dtsi:				#reset-cells = <2>;
scripts/dtc/include-prefixes/arm/da850-lego-ev3.dts:		reset-gpios = <&gpio 80 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/dove-cm-a510.dtsi:	reset-gpio = <&gpio2 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/dove-d3plug.dts:		reset-gpios = <&gpio0 26 1>;
scripts/dtc/include-prefixes/arm/dove-d3plug.dts:		reset-delay-us = <20000>;
scripts/dtc/include-prefixes/arm/dove-d3plug.dts:		reset-gpios = <&gpio0 25 1>;
scripts/dtc/include-prefixes/arm/dove-sbc-a510.dts:	reset-gpios = <&gpio_ext 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/dove.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/dra7-evm.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/dra7.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
scripts/dtc/include-prefixes/arm/dra7.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
scripts/dtc/include-prefixes/arm/dra7.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
scripts/dtc/include-prefixes/arm/dra7.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
scripts/dtc/include-prefixes/arm/exynos3250-rinato.dts:		reset-gpios = <&gpe0 1 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/exynos4210-trats.dts:		reset-gpios = <&gpy4 5 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/exynos4210-trats.dts:		reset-delay = <100>;
scripts/dtc/include-prefixes/arm/exynos4210-universal_c210.dts:			reset-gpios = <&gpy4 5 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/exynos4210-universal_c210.dts:			reset-delay = <10>;
scripts/dtc/include-prefixes/arm/exynos4412-galaxy-s3.dtsi:		reset-gpios = <&gpf2 1 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/exynos4412-galaxy-s3.dtsi:		reset-delay = <100>;
scripts/dtc/include-prefixes/arm/exynos4412-itop-scp-core.dtsi:		reset-gpios = <&gpm2 4 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/exynos4412-midas.dtsi:			reset-gpios = <&gpf3 4 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/exynos4412-midas.dtsi:		reset-gpios = <&gpj0 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/exynos4412-odroid-common.dtsi:		reset-gpios = <&gpk1 2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/exynos4412-odroid-common.dtsi:		reset-gpios = <&gpx3 5 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/exynos5250-arndale.dts:		reset-gpios = <&gpx3 5 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/exynos5250-snow-common.dtsi:		reset-gpios = <&gpx0 2 GPIO_ACTIVE_LOW>, /* WIFI_RSTn */
scripts/dtc/include-prefixes/arm/exynos5250-snow-common.dtsi:		reset-gpios = <&gpx1 5 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/exynos5250-spring.dts:		reset-gpios = <&gpe1 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/exynos5410-odroidxu.dts:		reset-gpios = <&gpd1 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/exynos5410-odroidxu.dts:		reset-gpios = <&gpx1 4 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/exynos5420-peach-pit.dts:		reset-gpios = <&gpx0 0 GPIO_ACTIVE_LOW>; /* WIFI_EN */
scripts/dtc/include-prefixes/arm/exynos5420-peach-pit.dts:		reset-gpios = <&gpy7 7 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/exynos5422-odroidxu3-common.dtsi:		reset-gpios = <&gpd1 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/exynos5800-peach-pi.dts:		reset-gpios = <&gpx0 0 GPIO_ACTIVE_LOW>; /* WIFI_EN */
scripts/dtc/include-prefixes/arm/gemini.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/gemini.dtsi:			reset-names = "sata0", "sata1";
scripts/dtc/include-prefixes/arm/hi3519.dtsi:	crg: clock-reset-controller@12010000 {
scripts/dtc/include-prefixes/arm/hi3519.dtsi:		#reset-cells = <2>;
scripts/dtc/include-prefixes/arm/imx25-karo-tx25.dts:	phy-reset-gpios = <&gpio3 7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx25-pdk.dts:	phy-reset-gpios = <&gpio4 8 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx27-phytec-phycore-som.dtsi:	phy-reset-gpios = <&gpio3 30 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-apf28.dts:			phy-reset-gpios = <&gpio4 13 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-apf28dev.dts:			phy-reset-gpios = <&gpio1 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-cfa10036.dts:					reset-gpios = <&gpio2 7 0>;
scripts/dtc/include-prefixes/arm/imx28-cfa10037.dts:			phy-reset-gpios = <&gpio2 21 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-cfa10037.dts:			phy-reset-duration = <100>;
scripts/dtc/include-prefixes/arm/imx28-cfa10049.dts:			phy-reset-gpios = <&gpio2 21 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-cfa10049.dts:			phy-reset-duration = <100>;
scripts/dtc/include-prefixes/arm/imx28-cfa10057.dts:			phy-reset-gpios = <&gpio2 21 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-cfa10057.dts:			phy-reset-duration = <100>;
scripts/dtc/include-prefixes/arm/imx28-cfa10058.dts:			phy-reset-gpios = <&gpio2 21 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-cfa10058.dts:			phy-reset-duration = <100>;
scripts/dtc/include-prefixes/arm/imx28-duckbill-2-485.dts:			phy-reset-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-duckbill-2-485.dts:			phy-reset-duration = <25>;
scripts/dtc/include-prefixes/arm/imx28-duckbill-2-enocean.dts:			phy-reset-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-duckbill-2-enocean.dts:			phy-reset-duration = <25>;
scripts/dtc/include-prefixes/arm/imx28-duckbill-2-spi.dts:			phy-reset-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-duckbill-2-spi.dts:			phy-reset-duration = <25>;
scripts/dtc/include-prefixes/arm/imx28-duckbill-2.dts:			phy-reset-gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-duckbill-2.dts:			phy-reset-duration = <25>;
scripts/dtc/include-prefixes/arm/imx28-duckbill.dts:			phy-reset-gpios = <&gpio2 7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-duckbill.dts:			phy-reset-duration = <25>;
scripts/dtc/include-prefixes/arm/imx28-eukrea-mbmx283lc.dts:	phy-reset-gpios = <&gpio4 13 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-eukrea-mbmx287lc.dts:	phy-reset-gpios = <&gpio3 27 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-evk.dts:			phy-reset-gpios = <&gpio4 13 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-evk.dts:			phy-reset-duration = <100>;
scripts/dtc/include-prefixes/arm/imx28-m28cu3.dts:			phy-reset-gpios = <&gpio4 13 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx28-m28cu3.dts:			phy-reset-duration = <100>;
scripts/dtc/include-prefixes/arm/imx28-tx28.dts:		reset-gpios = <&gpio2 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx50-evk.dts:	phy-reset-gpios = <&gpio4 12 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx50.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/imx51-apf51.dts:	phy-reset-gpios = <&gpio3 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx51-apf51.dts:	phy-reset-duration = <1>;
scripts/dtc/include-prefixes/arm/imx51-babbage.dts:			reset-gpios = <&gpio2 5 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx51-babbage.dts:	phy-reset-gpios = <&gpio2 14 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx51-babbage.dts:	phy-reset-duration = <1>;
scripts/dtc/include-prefixes/arm/imx51-eukrea-mbimxsd51-baseboard.dts:	reset-gpios = <&gpio2 28 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx51-ts4800.dts:	phy-reset-gpios = <&gpio2 14 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx51-ts4800.dts:	phy-reset-duration = <1>;
scripts/dtc/include-prefixes/arm/imx51-zii-rdu1.dts:		reset-gpios = <&gpio4 8 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx51-zii-rdu1.dts:		reset-gpios = <&gpio4 7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx51-zii-rdu1.dts:	phy-reset-gpios = <&gpio2 14 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx51.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/imx53-cx9020.dts:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-mba53.dts:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-ppd.dts:		reset-gpios = <&gpio4 4 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-ppd.dts:		reset-gpios = <&gpio2 19 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-ppd.dts:	phy-reset-gpios = <&gpio2 16 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-ppd.dts:		reset-gpios = <&gpio2 18 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-ppd.dts:		reset-gpio = <&gpio5 19 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/imx53-qsb-common.dtsi:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-smd.dts:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-tx53-x03x.dts:		reset-gpios = <&gpio2 22 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-tx53.dtsi:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53-voipac-dmm-668.dtsi:	phy-reset-gpios = <&gpio4 2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx53.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/imx6dl-riotboard.dts:	phy-reset-gpios = <&gpio3 31 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-apalis-eval.dts:	reset-gpio = <&gpio1 28 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/imx6q-apalis-eval.dts:	reset-gpio-active-high;
scripts/dtc/include-prefixes/arm/imx6q-apalis-ixora-v1.1.dts:	reset-gpio = <&gpio1 28 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/imx6q-apalis-ixora-v1.1.dts:	reset-gpio-active-high;
scripts/dtc/include-prefixes/arm/imx6q-apalis-ixora.dts:	reset-gpio = <&gpio1 28 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/imx6q-apalis-ixora.dts:	reset-gpio-active-high;
scripts/dtc/include-prefixes/arm/imx6q-ba16.dtsi:	reset-gpio = <&gpio7 12 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-ba16.dtsi:	reset-gpios = <&gpio7 11 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/imx6q-ba16.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6q-cm-fx6.dts:		reset-gpios = <&gpio6 16 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/imx6q-cm-fx6.dts:	reset-gpio = <&gpio1 26 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-dhcom-pdk2.dts:	reset-gpio = <&gpio6 14 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-dhcom-som.dtsi:			reset-gpios = <&gpio5 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-dhcom-som.dtsi:			reset-delay-us = <1000>;
scripts/dtc/include-prefixes/arm/imx6q-dhcom-som.dtsi:			reset-post-delay-us = <1000>;
scripts/dtc/include-prefixes/arm/imx6q-dmo-edmqmx6.dts:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-dmo-edmqmx6.dts:	reset-gpio = <&gpio4 8 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-evi.dts:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-gw5400-a.dts:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-gw5400-a.dts:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-h100.dts:		reset-gpios = <&gpio6 15 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-kp.dtsi:		reset-gpios = <&gpio5 2 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/imx6q-marsboard.dts:	phy-reset-gpios = <&gpio3 31 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-mccmon6.dts:	phy-reset-gpios = <&gpio1 27 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-novena.dts:	phy-reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-novena.dts:	reset-gpio = <&gpio3 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-tbs2910.dts:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-tbs2910.dts:	reset-gpio = <&gpio7 12 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6q-var-dt6customboard.dts:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-apalis.dtsi:	phy-reset-duration = <10>;
scripts/dtc/include-prefixes/arm/imx6qdl-apalis.dtsi:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-apf6.dtsi:	phy-reset-duration = <10>;
scripts/dtc/include-prefixes/arm/imx6qdl-apf6.dtsi:	phy-reset-gpios = <&gpio1 24 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-apf6dev.dtsi:	reset-gpio = <&gpio6 2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-aristainetos.dtsi:	phy-reset-gpios = <&gpio3 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-aristainetos2.dtsi:	phy-reset-gpios = <&gpio7 18 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-aristainetos2.dtsi:	reset-gpio = <&gpio2 16 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw51xx.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw51xx.dtsi:	reset-gpio = <&gpio1 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw51xx.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-gw52xx.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw52xx.dtsi:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw52xx.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-gw53xx.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw53xx.dtsi:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw53xx.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-gw54xx.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw54xx.dtsi:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw54xx.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-gw551x.dtsi:	reset-gpio = <&gpio1 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw551x.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-gw552x.dtsi:	reset-gpio = <&gpio1 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw552x.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-gw553x.dtsi:	reset-gpio = <&gpio1 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw553x.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-gw560x.dtsi:	phy-reset-gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw560x.dtsi:	reset-gpio = <&gpio4 31 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw560x.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-gw5903.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-gw5904.dtsi:	reset-gpio = <&gpio1 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-gw5904.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-hummingboard.dtsi:	reset-gpio = <&gpio3 4 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-hummingboard2.dtsi:	reset-gpio = <&gpio2 11 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-icore-rqs.dtsi:		reset-gpios = <&gpio1 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-icore-rqs.dtsi:	reset-gpio = <&gpio3 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-icore.dtsi:	phy-reset-gpios = <&gpio7 12 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-nit6xlite.dtsi:	phy-reset-gpios = <&gpio1 27 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-nitrogen6_max.dtsi:	phy-reset-gpios = <&gpio1 27 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-nitrogen6_max.dtsi:	reset-gpio = <&gpio6 31 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-nitrogen6_som2.dtsi:	reset-gpio = <&gpio3 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-nitrogen6x.dtsi:	phy-reset-gpios = <&gpio1 27 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-phytec-mira.dtsi:	reset-gpio = <&gpio2 25 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-phytec-pfla02.dtsi:	phy-reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-phytec-pfla02.dtsi:	reset-gpio = <&gpio4 17 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-phytec-phycore-som.dtsi:	phy-reset-gpios = <&gpio1 14 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-rex.dtsi:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sabreauto.dtsi:				reset-gpios = <&gpio1 15 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sabrelite.dtsi:	phy-reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sabrelite.dtsi:		reset-gpios = <&gpio2 5 GPIO_ACTIVE_LOW>; /* NANDF_D5 */
scripts/dtc/include-prefixes/arm/imx6qdl-sabrelite.dtsi:		reset-gpios = <&gpio1 8 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sabresd.dtsi:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sabresd.dtsi:		reset-gpios = <&gpio1 17 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sabresd.dtsi:		reset-gpios = <&gpio1 20 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sabresd.dtsi:	reset-gpio = <&gpio7 12 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sabresd.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6qdl-savageboard.dtsi:	phy-reset-gpios = <&gpio1 25 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sr-som-brcm.dtsi:		reset-gpios = <&gpio5 26 GPIO_ACTIVE_LOW>,
scripts/dtc/include-prefixes/arm/imx6qdl-sr-som-ti.dtsi:		reset-gpios = <&gpio5 26 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-sr-som.dtsi:	phy-reset-duration = <2>;
scripts/dtc/include-prefixes/arm/imx6qdl-sr-som.dtsi:	phy-reset-gpios = <&gpio4 15 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-tx6.dtsi:	phy-reset-gpios = <&gpio7 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-tx6.dtsi:	phy-reset-post-delay = <10>;
scripts/dtc/include-prefixes/arm/imx6qdl-tx6.dtsi:		reset-gpios = <&gpio2 22 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-var-dart.dtsi:	reset-gpio = <&gpio4 11 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-wandboard.dtsi:	phy-reset-gpios = <&gpio3 29 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-zii-rdu2.dtsi:	reset-gpio = <&gpio7 12 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-zii-rdu2.dtsi:	phy-reset-gpios = <&gpio1 23 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6qdl-zii-rdu2.dtsi:	phy-reset-duration = <100>;
scripts/dtc/include-prefixes/arm/imx6qdl.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/imx6sl-warp.dts:		reset-gpios = <&gpio4 5 GPIO_ACTIVE_LOW>, 	/* WL_REG_ON */
scripts/dtc/include-prefixes/arm/imx6sl.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/imx6sx-nitrogen6sx.dts:	reset-gpio = <&gpio4 10 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6sx-nitrogen6sx.dts:	reset-gpios = <&gpio4 26 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6sx-sabreauto.dts:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6sx-sdb.dtsi:	reset-gpio = <&gpio2 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6sx-sdb.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6sx-softing-vining-2000.dts:	phy-reset-gpios = <&gpio5 9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6sx-softing-vining-2000.dts:	phy-reset-duration = <5>;
scripts/dtc/include-prefixes/arm/imx6sx-softing-vining-2000.dts:	phy-reset-gpios = <&gpio5 21 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6sx-softing-vining-2000.dts:	phy-reset-duration = <5>;
scripts/dtc/include-prefixes/arm/imx6sx-softing-vining-2000.dts:		reset-gpios = <&gpio2 10 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/imx6sx-udoo-neo.dtsi:	phy-reset-duration = <10>;
scripts/dtc/include-prefixes/arm/imx6sx-udoo-neo.dtsi:	phy-reset-gpios = <&gpio2 1 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6sx.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/imx6ul-14x14-evk.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6ul-opos6ul.dtsi:		reset-gpios = <&gpio2 9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6ul-opos6ul.dtsi:	phy-reset-duration = <1>;
scripts/dtc/include-prefixes/arm/imx6ul-opos6ul.dtsi:	phy-reset-gpios = <&gpio4 2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6ul-pico-hobbit.dts:	phy-reset-gpios = <&gpio1 28 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6ul-pico-hobbit.dts:	phy-reset-duration = <1>;
scripts/dtc/include-prefixes/arm/imx6ul-pico-hobbit.dts:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx6ul-tx6ul-mainboard.dts:	phy-reset-gpios = <&gpio4 28 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6ul-tx6ul.dtsi:	phy-reset-gpios = <&gpio5 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6ul-tx6ul.dtsi:	phy-reset-gpios = <&gpio4 28 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6ul-tx6ul.dtsi:		reset-gpios = <&gpio5 3 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx6ul.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/imx6ull-colibri-wifi.dtsi:		reset-gpios = <&gpio5 11 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx7d-pico.dtsi:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx7d-sdb.dts:	phy-reset-gpios = <&extended_io 5 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx7d-sdb.dts:	reset-gpio = <&extended_io 1 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/imx7d-sdb.dts:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx7d.dtsi:		reset-names = "pciephy", "apps";
scripts/dtc/include-prefixes/arm/imx7s-warp.dts:	fsl,ext-reset-output;
scripts/dtc/include-prefixes/arm/imx7s.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/keystone-k2e.dtsi:			pscrst: reset-controller {
scripts/dtc/include-prefixes/arm/keystone-k2e.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/keystone-k2e.dtsi:				ti,reset-bits = <
scripts/dtc/include-prefixes/arm/keystone-k2g.dtsi:			k2g_reset: reset-controller {
scripts/dtc/include-prefixes/arm/keystone-k2g.dtsi:				#reset-cells = <2>;
scripts/dtc/include-prefixes/arm/keystone-k2hk.dtsi:			pscrst: reset-controller {
scripts/dtc/include-prefixes/arm/keystone-k2hk.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/keystone-k2hk.dtsi:				ti,reset-bits = <
scripts/dtc/include-prefixes/arm/keystone-k2l.dtsi:			pscrst: reset-controller {
scripts/dtc/include-prefixes/arm/keystone-k2l.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/keystone-k2l.dtsi:				ti,reset-bits = <
scripts/dtc/include-prefixes/arm/keystone.dtsi:			rstctrl: reset-controller@328 {
scripts/dtc/include-prefixes/arm/kirkwood-netgear_readynas_duo_v2.dts:		reset-button {
scripts/dtc/include-prefixes/arm/kirkwood-netgear_readynas_nv+_v2.dts:		reset-button {
scripts/dtc/include-prefixes/arm/kirkwood-ts219-6281.dts:			pmx_reset_button: pmx-reset-button {
scripts/dtc/include-prefixes/arm/kirkwood-ts219-6282.dts:			pmx_reset_button: pmx-reset-button {
scripts/dtc/include-prefixes/arm/kirkwood-ts419.dtsi:			pmx_reset_button: pmx-reset-button {
scripts/dtc/include-prefixes/arm/logicpd-som-lv.dtsi:		reset-gpios = <&gpio1 4 GPIO_ACTIVE_LOW>; /* gpio_4 */
scripts/dtc/include-prefixes/arm/lpc18xx.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/lpc18xx.dtsi:		rgu: reset-controller@40053000 {
scripts/dtc/include-prefixes/arm/lpc18xx.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/lpc3250-ea3250.dts:		reset-gpio = <&gpio 3 2 0>;
scripts/dtc/include-prefixes/arm/lpc3250-phy3250.dts:		reset-gpio = <&gpio 3 2 0>;
scripts/dtc/include-prefixes/arm/meson8.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/meson8.dtsi:	reset: reset-controller@4404 {
scripts/dtc/include-prefixes/arm/meson8.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/meson8b-odroidc1.dts:	snps,reset-gpio = <&gpio GPIOH_4 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/meson8b-odroidc1.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/meson8b-odroidc1.dts:	snps,reset-delays-us = <0 10000 30000>;
scripts/dtc/include-prefixes/arm/meson8b.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/meson8b.dtsi:	reset: reset-controller@4404 {
scripts/dtc/include-prefixes/arm/meson8b.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/meson8b.dtsi:	reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/meson8m2-mxiii-plus.dts:	snps,reset-gpio = <&gpio GPIOH_4 0>;
scripts/dtc/include-prefixes/arm/meson8m2-mxiii-plus.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/meson8m2-mxiii-plus.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/meson8m2.dtsi:	reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/mmp2.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt2701.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt2701.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt2701.dtsi:		reset-names = "therm";
scripts/dtc/include-prefixes/arm/mt2701.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt2701.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt2701.dtsi:		reset-names = "fe", "gmac", "ppe";
scripts/dtc/include-prefixes/arm/mt7623.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt7623.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt7623.dtsi:		reset-names = "pwrap";
scripts/dtc/include-prefixes/arm/mt7623.dtsi:		reset-names = "therm";
scripts/dtc/include-prefixes/arm/mt7623.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt7623.dtsi:		reset-names = "pcie-rst0", "pcie-rst1", "pcie-rst2";
scripts/dtc/include-prefixes/arm/mt7623.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt7623.dtsi:		reset-names = "fe", "gmac", "ppe";
scripts/dtc/include-prefixes/arm/mt7623a-rfb-emmc.dts:			reset-names = "mcm";
scripts/dtc/include-prefixes/arm/mt7623a-rfb-nand.dts:			reset-names = "mcm";
scripts/dtc/include-prefixes/arm/mt7623n-bananapi-bpi-r2.dts:			reset-gpios = <&pio 33 0>;
scripts/dtc/include-prefixes/arm/mt7623n-rfb-emmc.dts:			reset-gpios = <&pio 33 0>;
scripts/dtc/include-prefixes/arm/mt8135.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt8135.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/mt8135.dtsi:			reset-names = "pwrap", "pwrap-bridge";
scripts/dtc/include-prefixes/arm/omap3-beagle-xm.dts:		reset-gpios = <&gpio5 19 GPIO_ACTIVE_LOW>; /* gpio_147 */
scripts/dtc/include-prefixes/arm/omap3-beagle.dts:		reset-gpios = <&gpio5 19 GPIO_ACTIVE_LOW>;	/* gpio_147 */
scripts/dtc/include-prefixes/arm/omap3-cm-t3517.dts:	reset-gpios = <&gpio5 18 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/omap3-cm-t3517.dts:	reset-gpios = <&gpio5 19 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/omap3-cm-t3x30.dtsi:	reset-gpios = <&twl_gpio 6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/omap3-cm-t3x30.dtsi:	reset-gpios = <&twl_gpio 7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/omap3-evm-common.dtsi:		reset-gpios = <&gpio1 21 GPIO_ACTIVE_LOW>; /* gpio_21 */
scripts/dtc/include-prefixes/arm/omap3-evm-common.dtsi:	reset-gpios = <&gpio5 27 GPIO_ACTIVE_HIGH>;	/* gpio155, lcd RESB */
scripts/dtc/include-prefixes/arm/omap3-gta04.dtsi:		reset-gpios = <&gpio6 14 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/omap3-gta04.dtsi:		reset-gpios = <&tca6507 0 GPIO_ACTIVE_LOW>;	/* W2CBW003 reset through tca6507 */
scripts/dtc/include-prefixes/arm/omap3-igep0020-common.dtsi:		reset-gpios = <&gpio1 24 GPIO_ACTIVE_LOW>; /* gpio_24 */
scripts/dtc/include-prefixes/arm/omap3-igep0020.dts:		reset-gpios = <&gpio5 11 GPIO_ACTIVE_LOW>,	/* gpio_139 - RESET_N_W */
scripts/dtc/include-prefixes/arm/omap3-igep0030-common.dtsi:		reset-gpios = <&gpio2 22 GPIO_ACTIVE_LOW>;		/* gpio_54 */
scripts/dtc/include-prefixes/arm/omap3-igep0030.dts:		reset-gpios = <&gpio5 11 GPIO_ACTIVE_LOW>,	/* gpio_139 - RESET_N_W */
scripts/dtc/include-prefixes/arm/omap3-ldp.dts:	reset-gpios = <&gpio2 23 GPIO_ACTIVE_HIGH>;	/* gpio55, lcd RESB */
scripts/dtc/include-prefixes/arm/omap3-n900.dts:		reset-gpios = <&gpio2 28 GPIO_ACTIVE_LOW>; /* 60 */
scripts/dtc/include-prefixes/arm/omap3-n900.dts:		reset-gpios = <&gpio2 28 GPIO_ACTIVE_LOW>; /* 60 */
scripts/dtc/include-prefixes/arm/omap3-n900.dts:                reset-gpios = <&gpio6 3 GPIO_ACTIVE_HIGH>; /* 163 */
scripts/dtc/include-prefixes/arm/omap3-n900.dts:		reset-gpio = <&gpio4 6 GPIO_ACTIVE_HIGH>; /* 102 */
scripts/dtc/include-prefixes/arm/omap3-n900.dts:		reset-gpios = <&gpio6 4 GPIO_ACTIVE_HIGH>;	/* gpio164 */
scripts/dtc/include-prefixes/arm/omap3-n900.dts:		reset-gpios = <&gpio4 8 GPIO_ACTIVE_HIGH>; /* 104 */
scripts/dtc/include-prefixes/arm/omap3-n900.dts:		reset-gpios = <&gpio3 26 GPIO_ACTIVE_HIGH>; /* 90 */
scripts/dtc/include-prefixes/arm/omap3-n900.dts:		reset-gpios = <&gpio3 27 GPIO_ACTIVE_LOW>; /* 91 */
scripts/dtc/include-prefixes/arm/omap3-n950-n9.dtsi:		reset-gpios = <&gpio1 26 GPIO_ACTIVE_LOW>; /* 26 */
scripts/dtc/include-prefixes/arm/omap3-n950.dts:		reset-gpios = <&gpio3 23 GPIO_ACTIVE_HIGH>;	/* 87 */
scripts/dtc/include-prefixes/arm/omap3-overo-base.dtsi:		reset-gpios = <&gpio6 23 GPIO_ACTIVE_LOW>;	/* gpio_183 */
scripts/dtc/include-prefixes/arm/omap3-pandora-common.dtsi:		reset-gpios = <&gpio1 16 GPIO_ACTIVE_LOW>; /* GPIO_16 */
scripts/dtc/include-prefixes/arm/omap3-pandora-common.dtsi:		reset-gpios = <&gpio5 29 GPIO_ACTIVE_LOW>;	/* GPIO_157 */
scripts/dtc/include-prefixes/arm/omap3-sniper.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/omap3-sniper.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/omap3-sniper.dts:	ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/omap3-tao3530.dtsi:		reset-gpios = <&gpio6 2 GPIO_ACTIVE_LOW>;	/* gpio_162 */
scripts/dtc/include-prefixes/arm/omap3430es1-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/omap34xx-omap36xx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/omap36xx-am35xx-omap3430es2plus-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/omap36xx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap36xx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-rate-parent;
scripts/dtc/include-prefixes/arm/omap3xxx-clocks.dtsi:		ti,set-bit-to-disable;
scripts/dtc/include-prefixes/arm/omap4-droid4-xt894.dts:		reset-gpios = <&gpio2 17 GPIO_ACTIVE_HIGH>;	/* gpio_49 */
scripts/dtc/include-prefixes/arm/omap4-droid4-xt894.dts:		reset-gpios = <&gpio4 5 GPIO_ACTIVE_HIGH>;	/* gpio101 */
scripts/dtc/include-prefixes/arm/omap4-droid4-xt894.dts:		reset-gpios = <&gpio6 13 GPIO_ACTIVE_HIGH>; /* gpio173 */
scripts/dtc/include-prefixes/arm/omap4-duovero.dtsi:		reset-gpios = <&gpio2 30 GPIO_ACTIVE_LOW>;	/* gpio_62 */
scripts/dtc/include-prefixes/arm/omap4-panda-common.dtsi:		reset-gpios = <&gpio2 30 GPIO_ACTIVE_LOW>;   /* gpio_62 */
scripts/dtc/include-prefixes/arm/omap4-panda-es.dts:	 ti,no-reset-on-init;
scripts/dtc/include-prefixes/arm/omap4-sdp.dts:		reset-gpios = <&gpio4 6 GPIO_ACTIVE_HIGH>;	/* 102 */
scripts/dtc/include-prefixes/arm/omap4-sdp.dts:		reset-gpios = <&gpio4 8 GPIO_ACTIVE_HIGH>;	/* 104 */
scripts/dtc/include-prefixes/arm/omap4-var-som-om44.dtsi:		reset-gpios = <&gpio6 17 GPIO_ACTIVE_LOW>; /* gpio 177 */
scripts/dtc/include-prefixes/arm/omap5-board-common.dtsi:		reset-gpios = <&gpio3 16 GPIO_ACTIVE_LOW>; /* gpio3_80 HUB_NRESET */
scripts/dtc/include-prefixes/arm/omap5-board-common.dtsi:		reset-gpios = <&gpio3 15 GPIO_ACTIVE_LOW>; /* gpio3_79 ETH_NRESET */
scripts/dtc/include-prefixes/arm/omap5-cm-t54.dts:		reset-gpios = <&gpio3 12 GPIO_ACTIVE_LOW>; /* gpio3_76 HUB_RESET */
scripts/dtc/include-prefixes/arm/omap5-cm-t54.dts:		reset-gpios = <&gpio3 19 GPIO_ACTIVE_LOW>; /* gpio3_83 ETH_RESET */
scripts/dtc/include-prefixes/arm/omap5.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
scripts/dtc/include-prefixes/arm/omap5.dtsi:			ti,ldovbb-vset-mask = <0x1F>;
scripts/dtc/include-prefixes/arm/orion5x-netgear-wnr854t.dts:	pmx_reset_button: pmx-reset-button {
scripts/dtc/include-prefixes/arm/orion5x-rd88f5182-nas.dts:	pmx_reset_switch: pmx-reset-switch {
scripts/dtc/include-prefixes/arm/ox810se.dtsi:				reset: reset-controller {
scripts/dtc/include-prefixes/arm/ox810se.dtsi:					#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/ox820.dtsi:				reset: reset-controller {
scripts/dtc/include-prefixes/arm/ox820.dtsi:					#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x2.dtsi:					regoffset-dat = <0x50>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x2.dtsi:					regoffset-set = <0x00>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x2.dtsi:					regoffset-dirout = <0x04>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x2.dtsi:					regoffset-dat = <0x54>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x2.dtsi:					regoffset-set = <0x0c>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x2.dtsi:					regoffset-dirout = <0x10>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x3.dtsi:					regoffset-dat = <0x50>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x3.dtsi:					regoffset-set = <0x00>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x3.dtsi:					regoffset-dirout = <0x04>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x3.dtsi:					regoffset-dat = <0x54>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x3.dtsi:					regoffset-set = <0x0c>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x3.dtsi:					regoffset-dirout = <0x10>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x3.dtsi:					regoffset-dat = <0x5c>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x3.dtsi:					regoffset-set = <0x24>;
scripts/dtc/include-prefixes/arm/picoxcell-pc3x3.dtsi:					regoffset-dirout = <0x28>;
scripts/dtc/include-prefixes/arm/prima2.dtsi:			rstc: reset-controller@88010000 {
scripts/dtc/include-prefixes/arm/prima2.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/pxa168.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/pxa910.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-apq8060-dragonboard.dts:		aset-gpios = <&pm8058_gpio 35 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/qcom-apq8060-dragonboard.dts:		capella,aset-resistance-ohms = <100000>;
scripts/dtc/include-prefixes/arm/qcom-apq8060-dragonboard.dts:					reset-gpios = <&tlmm 86 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/qcom-apq8060-dragonboard.dts:				reset-gpios = <&tlmm 30 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/qcom-apq8064-asus-nexus7-flo.dts:				reset-gpios = <&tlmm_pinmux 54 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/qcom-apq8064-cm-qs600.dts:			reset-gpios = <&pm8921_gpio 43 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/qcom-apq8064-ifc6410.dts:			reset-gpios = <&pm8921_gpio 43 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:					allow-set-time;
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			reset-names = "core";
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:					reset-names = "por";
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			reset-names = "core";
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:					reset-names = "por";
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			reset-names = "core";
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:					reset-names = "por";
scripts/dtc/include-prefixes/arm/qcom-apq8064.dtsi:			reset-names = "axi", "ahb", "por", "pci", "phy";
scripts/dtc/include-prefixes/arm/qcom-apq8074-dragonboard.dts:						regulator-allow-set-load;
scripts/dtc/include-prefixes/arm/qcom-apq8084.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-ipq4019.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-ipq4019.dtsi:			reset-names = "axi_m",
scripts/dtc/include-prefixes/arm/qcom-ipq4019.dtsi:			reset-names = "wifi_cpu_init", "wifi_radio_srif",
scripts/dtc/include-prefixes/arm/qcom-ipq4019.dtsi:			reset-names = "wifi_cpu_init", "wifi_radio_srif",
scripts/dtc/include-prefixes/arm/qcom-ipq8064.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-ipq8064.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-mdm9615.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-mdm9615.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-mdm9615.dtsi:					allow-set-time;
scripts/dtc/include-prefixes/arm/qcom-msm8660.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-msm8660.dtsi:					allow-set-time;
scripts/dtc/include-prefixes/arm/qcom-msm8960-cdp.dts:					reset-gpios = <&msmgpio 89 0>;
scripts/dtc/include-prefixes/arm/qcom-msm8960.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-msm8960.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-msm8960.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-msm8960.dtsi:					allow-set-time;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-amami.dts:						regulator-allow-set-load;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-amami.dts:			qcom,rset-ohms = <2100>;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-amami.dts:			qcom,vset-millivolts = <3000>;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-castor.dts:						regulator-allow-set-load;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-castor.dts:						regulator-allow-set-load;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-castor.dts:			qcom,rset-ohms = <2100>;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-castor.dts:			qcom,vset-millivolts = <3000>;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-honami.dts:						regulator-allow-set-load;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-honami.dts:			qcom,rset-ohms = <2100>;
scripts/dtc/include-prefixes/arm/qcom-msm8974-sony-xperia-honami.dts:			qcom,vset-millivolts = <3000>;
scripts/dtc/include-prefixes/arm/qcom-msm8974.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-msm8974.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-msm8974.dtsi:			reset-names = "core";
scripts/dtc/include-prefixes/arm/qcom-msm8974.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/qcom-msm8974.dtsi:					reset-names = "phy", "por";
scripts/dtc/include-prefixes/arm/qcom-msm8974.dtsi:					reset-names = "phy", "por";
scripts/dtc/include-prefixes/arm/r7s72100-gr-peach.dts:		reset-gpios = <&port4 2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/r7s72100-gr-peach.dts:		reset-delay-us = <5>;
scripts/dtc/include-prefixes/arm/r8a7743.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/r8a7743.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm/r8a7743.dtsi:			reset-names = "ssi-all",
scripts/dtc/include-prefixes/arm/r8a7745.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/r8a7745.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm/r8a7745.dtsi:			reset-names = "ssi-all",
scripts/dtc/include-prefixes/arm/r8a77470.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/r8a77470.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm/r8a7778.dtsi:	rst: reset-controller@ffcc0000 {
scripts/dtc/include-prefixes/arm/r8a7778.dtsi:		compatible = "renesas,r8a7778-reset-wdt";
scripts/dtc/include-prefixes/arm/r8a7779.dtsi:	rst: reset-controller@ffcc0000 {
scripts/dtc/include-prefixes/arm/r8a7779.dtsi:		compatible = "renesas,r8a7779-reset-wdt";
scripts/dtc/include-prefixes/arm/r8a7790.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/r8a7790.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm/r8a7790.dtsi:			reset-names = "ssi-all",
scripts/dtc/include-prefixes/arm/r8a7791.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/r8a7791.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm/r8a7791.dtsi:			reset-names = "ssi-all",
scripts/dtc/include-prefixes/arm/r8a7792.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/r8a7792.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm/r8a7793.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/r8a7793.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm/r8a7793.dtsi:			reset-names = "ssi-all",
scripts/dtc/include-prefixes/arm/r8a7794.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/r8a7794.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm/r8a7794.dtsi:			reset-names = "ssi-all",
scripts/dtc/include-prefixes/arm/rk3036-evb.dts:	phy-reset-gpios = <&gpio2 RK_PC6 GPIO_ACTIVE_LOW>; /* PHY_RST */
scripts/dtc/include-prefixes/arm/rk3036-evb.dts:	phy-reset-duration = <10>; /* millisecond */
scripts/dtc/include-prefixes/arm/rk3036-kylin.dts:		reset-gpios = <&gpio0 RK_PD2 GPIO_ACTIVE_LOW>, /* WL_REG_ON */
scripts/dtc/include-prefixes/arm/rk3036-kylin.dts:	phy-reset-gpios = <&gpio2 RK_PC6 GPIO_ACTIVE_LOW>; /* PHY_RST */
scripts/dtc/include-prefixes/arm/rk3036-kylin.dts:	phy-reset-duration = <10>; /* millisecond */
scripts/dtc/include-prefixes/arm/rk3036.dtsi:		reset-names = "axi", "ahb", "dclk";
scripts/dtc/include-prefixes/arm/rk3036.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3036.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3036.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3036.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/rk3066a-rayeager.dts:		reset-gpios = <&gpio1 RK_PD6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3066a.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/rk3066a.dtsi:		reset-names = "saradc-apb";
scripts/dtc/include-prefixes/arm/rk3188.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/rk3229-evb.dts:	snps,reset-gpio = <&gpio2 RK_PD0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3229-evb.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3229-evb.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk322x.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/rk322x.dtsi:		reset-names = "tsadc-apb";
scripts/dtc/include-prefixes/arm/rk322x.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk322x.dtsi:		reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/rk3288-evb.dtsi:	snps,reset-gpio = <&gpio4 RK_PA7 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/rk3288-evb.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-evb.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-fennec.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-fennec.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-fennec.dts:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-firefly-reload-core.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-firefly-reload-core.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-firefly-reload-core.dtsi:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-firefly-reload.dts:		reset-gpios = <&gpio4 RK_PD4 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-firefly.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-firefly.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-firefly.dtsi:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-miqi.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-miqi.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-miqi.dts:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-phycore-som.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-phycore-som.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-phycore-som.dtsi:	snps,reset-gpio = <&gpio4 8 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/rk3288-popmetal.dts:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/rk3288-popmetal.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-popmetal.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-r89.dts:	snps,reset-gpio = <&gpio4 RK_PA7 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/rk3288-r89.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-r89.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-rock2-som.dtsi:		reset-gpios = <&gpio3 RK_PB1 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-rock2-som.dtsi:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-rock2-som.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-rock2-som.dtsi:	snps,reset-delays-us = <0 10000 30000>;
scripts/dtc/include-prefixes/arm/rk3288-rock2-square.dts:		reset-gpios = <&gpio4 RK_PD4 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-tinker.dts:	snps,reset-gpio = <&gpio4 7 0>;
scripts/dtc/include-prefixes/arm/rk3288-tinker.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-tinker.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-veyron-analog-audio.dtsi:		rockchip,headset-codec = <&headsetcodec>;
scripts/dtc/include-prefixes/arm/rk3288-veyron-minnie.dts:		reset-gpios = <&gpio2 RK_PB7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-veyron.dtsi:		reset-gpios = <&gpio2 RK_PB1 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/rk3288-veyron.dtsi:		reset-gpios = <&gpio4 RK_PD4 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288-veyron.dtsi:	needs-reset-on-resume;
scripts/dtc/include-prefixes/arm/rk3288-veyron.dtsi:		ap_warm_reset_h: ap-warm-reset-h {
scripts/dtc/include-prefixes/arm/rk3288-vyasa.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/rk3288-vyasa.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/rk3288-vyasa.dts:	snps,reset-gpio = <&gpio4 RK_PB0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "saradc-apb";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "tsadc-apb";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "crypto-rst";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "core", "axi", "ahb";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "axi", "ahb", "dclk";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "axi", "ahb", "dclk";
scripts/dtc/include-prefixes/arm/rk3288.dtsi:		reset-names = "dp";
scripts/dtc/include-prefixes/arm/rk3xxx.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3xxx.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3xxx.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm/rk3xxx.dtsi:		reset-names = "saradc-apb";
scripts/dtc/include-prefixes/arm/rv1108.dtsi:		reset-names = "tsadc-apb";
scripts/dtc/include-prefixes/arm/rv1108.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/s5pv210-goni.dts:		nreset-gpios = <&gpb 2 0>;
scripts/dtc/include-prefixes/arm/sama5d3.dtsi:				atmel,reset-type = "all";
scripts/dtc/include-prefixes/arm/sama5d3xmb.dtsi:					pinctrl_sensor_reset: sensor_reset-0 {
scripts/dtc/include-prefixes/arm/sama5d3xmb_cmp.dtsi:					pinctrl_sensor_reset: sensor_reset-0 {
scripts/dtc/include-prefixes/arm/socfpga.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/socfpga.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/socfpga.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/socfpga.dtsi:			reset-names = "dwc2";
scripts/dtc/include-prefixes/arm/socfpga.dtsi:			reset-names = "dwc2";
scripts/dtc/include-prefixes/arm/socfpga_arria10.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/socfpga_arria10.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/socfpga_arria10.dtsi:			reset-names = "fpgamgr";
scripts/dtc/include-prefixes/arm/socfpga_arria10.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/socfpga_arria10.dtsi:			reset-names = "dwc2";
scripts/dtc/include-prefixes/arm/socfpga_arria10.dtsi:			reset-names = "dwc2";
scripts/dtc/include-prefixes/arm/socfpga_arria10_socdk.dtsi:		a10sr_rst: reset-controller {
scripts/dtc/include-prefixes/arm/socfpga_arria10_socdk.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/socfpga_cyclone5_vining_fpga.dts:	snps,reset-gpio = <&porta 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/socfpga_cyclone5_vining_fpga.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/socfpga_cyclone5_vining_fpga.dts:	snps,reset-delays-us = <10000 10000 10000>;
scripts/dtc/include-prefixes/arm/ste-hrefprev60-stuib.dts:				reset-gpio = <&tc3589x_gpio 13 0x4>;
scripts/dtc/include-prefixes/arm/ste-hrefprev60-stuib.dts:				reset-gpio = <&tc3589x_gpio 13 0x4>;
scripts/dtc/include-prefixes/arm/ste-hrefv60plus-stuib.dts:				reset-gpio = <&gpio4 17 0x4>;
scripts/dtc/include-prefixes/arm/ste-hrefv60plus-stuib.dts:				reset-gpio = <&gpio4 17 0x4>;
scripts/dtc/include-prefixes/arm/ste-nomadik-nhk15.dts:			reset-gpios = <&stmpe_gpio44 10 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/ste-nomadik-nhk15.dts:			reset-gpios = <&gpio2 13 GPIO_ACTIVE_LOW>; // GPIO77
scripts/dtc/include-prefixes/arm/ste-nomadik-nhk15.dts:			reset-gpios = <&gpio2 15 GPIO_ACTIVE_LOW>; // GPIO79
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:		softreset: softreset-controller@0 {
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:		picophyreset: picophyreset-controller@0 {
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			reset-names = "global", "port";
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:				reset-names = "miphy-sw-rst";
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:				reset-names = "miphy-sw-rst";
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:				reset-names = "miphy-sw-rst";
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			reset-names = "pwr-dwn", "sw-rst", "pwr-rst";
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			reset-names = "pwr-dwn",
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			reset-names	= "powerdown", "softreset";
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			reset-names	= "sw_reset";
scripts/dtc/include-prefixes/arm/stih407-family.dtsi:			reset-names	= "sw_reset";
scripts/dtc/include-prefixes/arm/stih407.dtsi:				reset-names = "compo-main", "compo-aux";
scripts/dtc/include-prefixes/arm/stih407.dtsi:				reset-names = "tvout";
scripts/dtc/include-prefixes/arm/stih407.dtsi:				reset-names = "hdmi";
scripts/dtc/include-prefixes/arm/stih410-b2260.dts:			snps,reset-gpio = <&pio0 7 0>;
scripts/dtc/include-prefixes/arm/stih410-b2260.dts:			snps,reset-active-low;
scripts/dtc/include-prefixes/arm/stih410-b2260.dts:			snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/stih410.dtsi:			reset-names = "global", "port";
scripts/dtc/include-prefixes/arm/stih410.dtsi:			reset-names = "global", "port";
scripts/dtc/include-prefixes/arm/stih410.dtsi:			reset-names = "power", "softreset";
scripts/dtc/include-prefixes/arm/stih410.dtsi:			reset-names = "power", "softreset";
scripts/dtc/include-prefixes/arm/stih410.dtsi:			reset-names = "power", "softreset";
scripts/dtc/include-prefixes/arm/stih410.dtsi:			reset-names = "power", "softreset";
scripts/dtc/include-prefixes/arm/stih410.dtsi:				reset-names = "compo-main", "compo-aux";
scripts/dtc/include-prefixes/arm/stih410.dtsi:				reset-names = "tvout";
scripts/dtc/include-prefixes/arm/stih410.dtsi:				reset-names = "hdmi";
scripts/dtc/include-prefixes/arm/stih410.dtsi:				reset-names = "hqvdp";
scripts/dtc/include-prefixes/arm/stih418.dtsi:			reset-names = "global", "port";
scripts/dtc/include-prefixes/arm/stih418.dtsi:			reset-names = "global", "port";
scripts/dtc/include-prefixes/arm/stih418.dtsi:			reset-names = "power", "softreset";
scripts/dtc/include-prefixes/arm/stih418.dtsi:			reset-names = "power", "softreset";
scripts/dtc/include-prefixes/arm/stih418.dtsi:			reset-names = "power", "softreset";
scripts/dtc/include-prefixes/arm/stih418.dtsi:			reset-names = "power", "softreset";
scripts/dtc/include-prefixes/arm/stihxxx-b2120.dtsi:				reset-gpios	= <&pio15 4 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/stm32f429.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/stm32f469-disco.dts:		reset-gpios = <&gpioh 7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/stm32f469.dtsi:			reset-names = "apb";
scripts/dtc/include-prefixes/arm/stm32f746.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/stm32h743.dtsi:		rcc: reset-clock-controller@58024400 {
scripts/dtc/include-prefixes/arm/stm32h743.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/stm32mp157c.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/stm32mp157c.dtsi:			reset-names = "apb";
scripts/dtc/include-prefixes/arm/sun4i-a10-dserve-dsrv9703c.dts:		reset-gpios = <&pio 1 13 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/sun4i-a10.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun4i-a10.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun4i-a10.dtsi:			reset-names = "usb0_reset", "usb1_reset", "usb2_reset";
scripts/dtc/include-prefixes/arm/sun4i-a10.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun5i-gr8-chip-pro.dts:		reset-gpios = <&pio 1 10 GPIO_ACTIVE_LOW>; /* PB10 */
scripts/dtc/include-prefixes/arm/sun5i-r8-chip.dts:		reset-gpios = <&pio 2 19 GPIO_ACTIVE_LOW>; /* PC19 */
scripts/dtc/include-prefixes/arm/sun5i.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun5i.dtsi:			reset-names = "usb0_reset", "usb1_reset";
scripts/dtc/include-prefixes/arm/sun5i.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun6i-a31-hummingbird.dts:		reset-gpios = <&pio 6 10 GPIO_ACTIVE_LOW>; /* PG10 */
scripts/dtc/include-prefixes/arm/sun6i-a31-hummingbird.dts:	snps,reset-gpio = <&pio 0 21 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/sun6i-a31-hummingbird.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/sun6i-a31-hummingbird.dts:	snps,reset-delays-us = <0 10000 30000>;
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "usb0_reset",
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun6i-a31.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun6i-a31s-sinovoip-bpi-m2.dts:		reset-gpios = <&r_pio 0 8 GPIO_ACTIVE_LOW>; /* PL8 WIFI_EN */
scripts/dtc/include-prefixes/arm/sun6i-a31s-sinovoip-bpi-m2.dts:	snps,reset-gpio = <&pio 0 21 GPIO_ACTIVE_HIGH>; /* PA21 */
scripts/dtc/include-prefixes/arm/sun6i-a31s-sinovoip-bpi-m2.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/sun6i-a31s-sinovoip-bpi-m2.dts:	snps,reset-delays-us = <0 10000 30000>;
scripts/dtc/include-prefixes/arm/sun7i-a20-bananapi-m1-plus.dts:		reset-gpios = <&pio 7 22 GPIO_ACTIVE_LOW>; /* PH22 WL-PMU-EN */
scripts/dtc/include-prefixes/arm/sun7i-a20-bananapro.dts:		reset-gpios = <&pio 7 22 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/sun7i-a20-cubietruck.dts:		reset-gpios = <&pio 7 9 GPIO_ACTIVE_LOW>; /* PH9 WIFI_EN */
scripts/dtc/include-prefixes/arm/sun7i-a20-hummingbird.dts:	snps,reset-gpio = <&pio 0 17 GPIO_ACTIVE_HIGH>; /* PA17 */
scripts/dtc/include-prefixes/arm/sun7i-a20-hummingbird.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/sun7i-a20-hummingbird.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/sun7i-a20-olimex-som-evb-emmc.dts:		reset-gpios = <&pio 2 18 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/sun7i-a20-olimex-som204-evb-emmc.dts:		reset-gpios = <&pio 2 16 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/sun7i-a20-olimex-som204-evb.dts:		reset-gpios = <&pio 6 9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/sun7i-a20-olimex-som204-evb.dts:	snps,reset-gpio = <&pio 0 17 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/sun7i-a20-olimex-som204-evb.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm/sun7i-a20-olimex-som204-evb.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm/sun7i-a20-olinuxino-lime2-emmc.dts:		reset-gpios = <&pio 2 16 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/sun7i-a20-olinuxino-micro-emmc.dts:		reset-gpios = <&pio 2 16 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/sun7i-a20-wexler-tab7200.dts:		reset-gpios = <&pio 1 13 GPIO_ACTIVE_HIGH>; /* RST (PB13) */
scripts/dtc/include-prefixes/arm/sun7i-a20-wits-pro-a20-dkt.dts:		reset-gpios = <&pio 7 9 GPIO_ACTIVE_LOW>; /* PH9 WIFI_EN */
scripts/dtc/include-prefixes/arm/sun7i-a20.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun7i-a20.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun7i-a20.dtsi:			reset-names = "usb0_reset", "usb1_reset", "usb2_reset";
scripts/dtc/include-prefixes/arm/sun7i-a20.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun8i-a23-a33.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-a23-a33.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-a23-a33.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-a23-a33.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-a23-a33.dtsi:			reset-names = "usb0_reset",
scripts/dtc/include-prefixes/arm/sun8i-a23-a33.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun8i-a23-a33.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun8i-a23-polaroid-mid2407pxe03.dts:		reset-gpios = <&r_pio 0 6 GPIO_ACTIVE_LOW>; /* PL6 */
scripts/dtc/include-prefixes/arm/sun8i-a23-polaroid-mid2809pxe04.dts:		reset-gpios = <&r_pio 0 6 GPIO_ACTIVE_LOW>; /* PL6 */
scripts/dtc/include-prefixes/arm/sun8i-a33.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun8i-a33.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-a33.dtsi:			reset-names = "be", "sat";
scripts/dtc/include-prefixes/arm/sun8i-a83t-bananapi-m3.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
scripts/dtc/include-prefixes/arm/sun8i-a83t-cubietruck-plus.dts:		reset-gpios = <&pio 4 16 GPIO_ACTIVE_HIGH>; /* PE16 */
scripts/dtc/include-prefixes/arm/sun8i-a83t-cubietruck-plus.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
scripts/dtc/include-prefixes/arm/sun8i-a83t-tbs-a711.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			reset-names = "lcd", "lvds";
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			reset-names = "usb0_reset",
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			reset-names = "ctrl";
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			reset-names = "phy";
scripts/dtc/include-prefixes/arm/sun8i-a83t.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun8i-h2-plus-bananapi-m2-zero.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
scripts/dtc/include-prefixes/arm/sun8i-h2-plus-orangepi-zero.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/sun8i-h3-bananapi-m2-plus.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
scripts/dtc/include-prefixes/arm/sun8i-h3-beelink-x2.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
scripts/dtc/include-prefixes/arm/sun8i-h3-nanopi-m1-plus.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
scripts/dtc/include-prefixes/arm/sun8i-h3-nanopi-neo-air.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
scripts/dtc/include-prefixes/arm/sun8i-h3-orangepi-2.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 WIFI_EN */
scripts/dtc/include-prefixes/arm/sun8i-q8-common.dtsi:		 * pinctrl, instead of listing them as active-low reset-gpios.
scripts/dtc/include-prefixes/arm/sun8i-r16-bananapi-m2m.dts:		reset-gpios = <&r_pio 0 6 GPIO_ACTIVE_LOW>; /* PL06 */
scripts/dtc/include-prefixes/arm/sun8i-r16-parrot.dts:		reset-gpios = <&r_pio 0 6 GPIO_ACTIVE_LOW>; /* PL06 */
scripts/dtc/include-prefixes/arm/sun8i-r40-bananapi-m2-ultra.dts:		reset-gpios = <&pio 6 10 GPIO_ACTIVE_LOW>; /* PG10 WIFI_EN */
scripts/dtc/include-prefixes/arm/sun8i-r40.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-r40.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-r40.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-r40.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-r40.dtsi:			reset-names = "usb0_reset",
scripts/dtc/include-prefixes/arm/sun8i-r40.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun8i-r40.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/sun8i-v3s.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun8i-v3s.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sun8i-v3s.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-v3s.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-v3s.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun8i-v3s.dtsi:			reset-names = "usb0_reset";
scripts/dtc/include-prefixes/arm/sun8i-v3s.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun8i-v40-bananapi-m2-berry.dts:		reset-gpios = <&pio 6 10 GPIO_ACTIVE_LOW>; /* PG10 WIFI_EN */
scripts/dtc/include-prefixes/arm/sun9i-a80-cubieboard4.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
scripts/dtc/include-prefixes/arm/sun9i-a80-optimus.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 WL-PMU-EN */
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "phy";
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "hsic",
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "hsic",
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "lcd", "edp";
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			reset-names = "lcd", "edp";
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sun9i-a80.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			reset-names = "lcd";
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			reset-names = "usb0_reset",
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			reset-names = "ctrl";
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			reset-names = "phy";
scripts/dtc/include-prefixes/arm/sunxi-h3-h5.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "host1x";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "2d";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "3d";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "hdmi";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "dma";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "pwm";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "kbc";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "fuse";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "d_audio", "apbif", "i2s0", "i2s1", "i2s2",
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra114.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra124-nyan.dtsi:		reset-gpios = <&gpio TEGRA_GPIO(X, 7) GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "pex", "afi", "pcie_x";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "host1x";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "hdmi";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "sor";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "dpaux";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "gpu";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "actmon";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "dma";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "pwm";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "fuse";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "sata", "sata-oob", "sata-cold";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "hda", "hda2hdmi", "hda2codec_2x";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "xusb_host", "xusb_ss", "xusb_src";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "padctl";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "soctherm";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "dvco";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "d_audio", "apbif", "i2s0", "i2s1", "i2s2",
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra124.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra20-colibri-512.dtsi:		nvidia,codec-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
scripts/dtc/include-prefixes/arm/tegra20-colibri-512.dtsi:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
scripts/dtc/include-prefixes/arm/tegra20-colibri-512.dtsi:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
scripts/dtc/include-prefixes/arm/tegra20-harmony.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
scripts/dtc/include-prefixes/arm/tegra20-harmony.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
scripts/dtc/include-prefixes/arm/tegra20-paz00.dts:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra20-paz00.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
scripts/dtc/include-prefixes/arm/tegra20-paz00.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
scripts/dtc/include-prefixes/arm/tegra20-seaboard.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
scripts/dtc/include-prefixes/arm/tegra20-seaboard.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
scripts/dtc/include-prefixes/arm/tegra20-trimslice.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
scripts/dtc/include-prefixes/arm/tegra20-trimslice.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 0)
scripts/dtc/include-prefixes/arm/tegra20-ventana.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
scripts/dtc/include-prefixes/arm/tegra20-ventana.dts:		nvidia,phy-reset-gpio = <&gpio TEGRA_GPIO(V, 1)
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "host1x";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "mpe";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "vi";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "epp";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "isp";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "2d";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "3d";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "hdmi";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "dma";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "ac97";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "gmi";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "pwm";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "kbc";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "fuse";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "pex", "afi", "pcie_x";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra20.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "pex", "afi", "pcie_x";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "host1x";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "mpe";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "vi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "epp";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "isp";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "2d";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "3d", "3d2";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "hdmi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "dma";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "gmi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "pwm";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "kbc";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "fuse";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "hda", "hda2hdmi", "hda2codec_2x";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "d_audio", "apbif", "i2s0", "i2s1", "i2s2",
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm/tegra30.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm/uniphier-ld4.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-ld4.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-ld4.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pro4.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pro4.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pro4.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pro4.dtsi:			reset-names = "gio", "ether";
scripts/dtc/include-prefixes/arm/uniphier-pro5.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pro5.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pro5.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pxs2.dtsi:			reset-names = "aio";
scripts/dtc/include-prefixes/arm/uniphier-pxs2.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pxs2.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pxs2.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-pxs2.dtsi:			reset-names = "ether";
scripts/dtc/include-prefixes/arm/uniphier-sld8.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-sld8.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/uniphier-sld8.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/vf610-zii-dev-rev-b.dts:		reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/vf610-zii-dev-rev-c.dts:		reset-gpio = <&gpio6 10 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm/vf610-zii-dev-rev-c.dts:		reset-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm/zynq-7000.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm/zynq-zybo-z7.dts:		reset-gpios = <&gpio0 46 1>;
scripts/dtc/include-prefixes/arm/zynq-zybo.dts:		reset-gpios = <&gpio0 46 1>;
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64-bananapi-m64.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 */
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64-olinuxino.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 */
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64-teres-i.dts:		reset-gpios = <&r_pio 0 2 GPIO_ACTIVE_LOW>; /* PL2 */
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64.dtsi:			reset-names = "ahb";
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64.dtsi:			reset-names = "usb0_reset",
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-a64.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h5-nanopi-neo-plus2.dts:		reset-gpios = <&r_pio 0 7 GPIO_ACTIVE_LOW>; /* PL7 */
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h5-orangepi-prime.dts:		reset-gpios = <&pio 2 14 GPIO_ACTIVE_LOW>; /* PC14 */
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h5-orangepi-zero-plus2.dts:		reset-gpios = <&pio 0 9 GPIO_ACTIVE_LOW>; /* PA9 */
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h6.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/allwinner/sun50i-h6.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/altera/socfpga_stratix10.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm64/altera/socfpga_stratix10.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm64/altera/socfpga_stratix10.dtsi:			reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm64/altera/socfpga_stratix10.dtsi:			reset-names = "reset";
scripts/dtc/include-prefixes/arm64/altera/socfpga_stratix10.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/altera/socfpga_stratix10.dtsi:			reset-names = "dwc2", "dwc2-ecc";
scripts/dtc/include-prefixes/arm64/altera/socfpga_stratix10.dtsi:			reset-names = "dwc2", "dwc2-ecc";
scripts/dtc/include-prefixes/arm64/amlogic/meson-axg-s400.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-axg-s400.dts:		reset-gpios = <&gpio GPIOX_7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-axg.dtsi:			reset: reset-controller@1004 {
scripts/dtc/include-prefixes/arm64/amlogic/meson-axg.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-axg.dtsi:					#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gx-p23x-q20x.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gx-p23x-q20x.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gx.dtsi:			reset: reset-controller@4404 {
scripts/dtc/include-prefixes/arm64/amlogic/meson-gx.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gx.dtsi:					#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nanopi-k2.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nanopi-k2.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nanopi-k2.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nanopi-k2.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nanopi-k2.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nexbox-a95x.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nexbox-a95x.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nexbox-a95x.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nexbox-a95x.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-nexbox-a95x.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-odroidc2.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-odroidc2.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-odroidc2.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-odroidc2.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-p200.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-p200.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-p200.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-p201.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-p201.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-p201.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-p20x.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-p20x.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-vega-s95.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-vega-s95.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>,
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-vega-s95.dtsi:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-vega-s95.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-vega-s95.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-wetek.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-wetek.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-wetek.dtsi:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-wetek.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb-wetek.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxbb.dtsi:	reset-names = "hdmitx_apb", "hdmitx", "hdmitx_phy";
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905d-p230.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905d-p230.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905d-p230.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905x-hwacom-amazetv.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905x-hwacom-amazetv.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905x-libretech-cc.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905x-nexbox-a95x.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905x-nexbox-a95x.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905x-p212.dtsi:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl-s905x-p212.dtsi:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl.dtsi:			reset-names = "usb_otg";
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl.dtsi:		reset-names = "phy";
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl.dtsi:		reset-names = "phy";
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl.dtsi:		reset-names = "phy", "peripheral";
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxl.dtsi:	reset-names = "hdmitx_apb", "hdmitx", "hdmitx_phy";
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-khadas-vim2.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-khadas-vim2.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-khadas-vim2.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-khadas-vim2.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-khadas-vim2.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-nexbox-a1.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-nexbox-a1.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-nexbox-a1.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-nexbox-a1.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-q200.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-q200.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-q200.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-rbox-pro.dts:		reset-gpios = <&gpio BOOT_9 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-rbox-pro.dts:		reset-gpios = <&gpio GPIOX_6 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-rbox-pro.dts:	snps,reset-gpio = <&gpio GPIOZ_14 0>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-rbox-pro.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm-rbox-pro.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/amlogic/meson-gxm.dtsi:		reset-names = "phy";
scripts/dtc/include-prefixes/arm64/exynos/exynos5433-tm2-common.dtsi:		reset-gpios = <&gpv7 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/exynos/exynos5433-tm2.dts:		reset-gpios = <&gpg0 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/exynos/exynos5433-tm2e.dts:		reset-gpios = <&gpg0 0 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi3660.dtsi:			#reset-cells = <2>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi3660.dtsi:			#reset-cells = <2>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi3660.dtsi:			reset-gpios = <&gpio11 1 0 >;
scripts/dtc/include-prefixes/arm64/hisilicon/hi3660.dtsi:			reset-names = "reset";
scripts/dtc/include-prefixes/arm64/hisilicon/hi3660.dtsi:			reset-names = "reset";
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200-poplar.dts:	hisilicon,phy-reset-delays-us = <10000 10000 30000>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200-poplar.dts:	reset-gpios = <&gpio4 4 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:		crg: clock-reset-controller@8a22000 {
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			#reset-cells = <2>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			gmacphyrst: reset-controller {
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:				ti,reset-bits =
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			#reset-cells = <2>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			reset-names = "reset";
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			reset-names = "reset";
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			reset-names = "mac_core", "mac_ifc", "phy";
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			reset-names = "mac_core", "mac_ifc", "phy";
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			reset-names = "soft", "sys", "bus";
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			reset-names = "bus";
scripts/dtc/include-prefixes/arm64/hisilicon/hi3798cv200.dtsi:			reset-names = "bus", "phy", "utmi";
scripts/dtc/include-prefixes/arm64/hisilicon/hi6220-hikey.dts:		reset-gpios = <&gpio0 5 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi6220.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi6220.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/hisilicon/hi6220.dtsi:			reset-names = "reset";
scripts/dtc/include-prefixes/arm64/hisilicon/hi6220.dtsi:			reset-names = "reset";
scripts/dtc/include-prefixes/arm64/hisilicon/hi6220.dtsi:			reset-names = "reset";
scripts/dtc/include-prefixes/arm64/hisilicon/hip06.dtsi:			reset-field-offset = <0>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip06.dtsi:			ctrl-reset-reg = <0xa60>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip06.dtsi:			ctrl-reset-sts-reg = <0x5a30>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip06.dtsi:			ctrl-reset-reg = <0xa18>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip06.dtsi:			ctrl-reset-sts-reg = <0x5a0c>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip06.dtsi:			ctrl-reset-reg = <0xae0>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip06.dtsi:			ctrl-reset-sts-reg = <0x5a70>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip07.dtsi:			reset-field-offset = <0>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip07.dtsi:			ctrl-reset-reg = <0xa60>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip07.dtsi:			ctrl-reset-sts-reg = <0x5a30>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip07.dtsi:			ctrl-reset-reg = <0xa18>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip07.dtsi:			ctrl-reset-sts-reg = <0x5a0c>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip07.dtsi:			ctrl-reset-reg = <0xae0>;
scripts/dtc/include-prefixes/arm64/hisilicon/hip07.dtsi:			ctrl-reset-sts-reg = <0x5a70>;
scripts/dtc/include-prefixes/arm64/marvell/armada-8040-mcbin.dts:	reset-gpio = <&cp0_gpio1 20 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/mediatek/mt7622.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/mediatek/mt7622.dtsi:		reset-names = "pwrap";
scripts/dtc/include-prefixes/arm64/mediatek/mt7622.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/mediatek/mt7622.dtsi:		reset-names = "therm";
scripts/dtc/include-prefixes/arm64/mediatek/mt7622.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/mediatek/mt7622.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/mediatek/mt7622.dtsi:		reset-names = "axi", "sw", "reg";
scripts/dtc/include-prefixes/arm64/mediatek/mt7622.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/mediatek/mt8173.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/mediatek/mt8173.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/mediatek/mt8173.dtsi:			reset-names = "pwrap";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132-norrin.dts:		nvidia,reset-gpio = <&gpio TEGRA_GPIO(I, 5) GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "pex", "afi", "pcie_x";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "host1x";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "hdmi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "sor";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "dpaux";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "gpu";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "actmon";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "dma";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "pwm";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "fuse";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "sata", "sata-oob", "sata-cold";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "hda", "hda2hdmi", "hda2codec_2x";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "padctl";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "soctherm";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "d_audio", "apbif", "i2s0", "i2s1", "i2s2",
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:			reset-names = "i2s";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm64/nvidia/tegra132.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186-p3310.dtsi:		phy-reset-gpios = <&gpio TEGRA_MAIN_GPIO(M, 4) GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "eqos";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "afi", "pex", "pcie_x";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "host1x";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "dpaux";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "misc", "wgrp0", "wgrp1", "wgrp2",
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:				reset-names = "dc";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:				reset-names = "dc";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:				reset-names = "dc";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "vic";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "sor";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "sor";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "dpaux";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		reset-names = "gpu";
scripts/dtc/include-prefixes/arm64/nvidia/tegra186.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:			reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra194.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/nvidia/tegra210-smaug.dts:			realtek,reset-gpio = <&gpio TEGRA_GPIO(BB, 3) GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "pex", "afi", "pcie_x";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "host1x";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:			reset-names = "dpaux";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:			reset-names = "dc";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:			reset-names = "vic";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:			reset-names = "dsi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:			reset-names = "sor";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:			reset-names = "sor";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:			reset-names = "dpaux";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "gpu";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "dma";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "serial";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "pwm";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "i2c";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "spi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:				reset-names = "vic";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "fuse";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "sata", "sata-oob", "sata-cold";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "hda", "hda2hdmi", "hda2codec_2x";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "xusb_host", "xusb_ss", "xusb_src";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "padctl";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:				reset-names = "phy";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:				reset-names = "phy";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "sdhci";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "qspi";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "usb";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "usb", "utmi-pads";
scripts/dtc/include-prefixes/arm64/nvidia/tegra210.dtsi:		reset-names = "soctherm";
scripts/dtc/include-prefixes/arm64/qcom/apq8016-sbc.dtsi:		reset-gpios = <&pm8916_gpios 3 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/qcom/apq8096-db820c.dtsi:					regulator-allow-set-load;
scripts/dtc/include-prefixes/arm64/qcom/apq8096-db820c.dtsi:					regulator-allow-set-load;
scripts/dtc/include-prefixes/arm64/qcom/apq8096-db820c.dtsi:					regulator-allow-set-load;
scripts/dtc/include-prefixes/arm64/qcom/ipq8074.dtsi:			#reset-cells = <0x1>;
scripts/dtc/include-prefixes/arm64/qcom/ipq8074.dtsi:			reset-names = "phy",
scripts/dtc/include-prefixes/arm64/qcom/ipq8074.dtsi:			reset-names = "pipe",
scripts/dtc/include-prefixes/arm64/qcom/ipq8074.dtsi:			reset-names = "phy",
scripts/dtc/include-prefixes/arm64/qcom/ipq8074.dtsi:			reset-names = "pipe",
scripts/dtc/include-prefixes/arm64/qcom/msm8916.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/qcom/msm8916.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/qcom/msm8916.dtsi:			reset-names = "core";
scripts/dtc/include-prefixes/arm64/qcom/msm8916.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/qcom/msm8916.dtsi:					reset-names = "phy", "por";
scripts/dtc/include-prefixes/arm64/qcom/msm8916.dtsi:			reset-names = "mss_restart";
scripts/dtc/include-prefixes/arm64/qcom/msm8992.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/qcom/msm8994-smd-rpm.dtsi:					regulator-allow-set-load;
scripts/dtc/include-prefixes/arm64/qcom/msm8994-smd-rpm.dtsi:					regulator-allow-set-load;
scripts/dtc/include-prefixes/arm64/qcom/msm8994.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/qcom/msm8996.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/qcom/msm8996.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/qcom/msm8996.dtsi:			reset-names = "phy", "common", "cfg";
scripts/dtc/include-prefixes/arm64/qcom/msm8996.dtsi:				reset-names = "lane0";
scripts/dtc/include-prefixes/arm64/qcom/msm8996.dtsi:				reset-names = "lane1";
scripts/dtc/include-prefixes/arm64/qcom/msm8996.dtsi:				reset-names = "lane2";
scripts/dtc/include-prefixes/arm64/qcom/msm8996.dtsi:			reset-names = "phy", "common";
scripts/dtc/include-prefixes/arm64/qcom/sdm845.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/renesas/r8a7795.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/renesas/r8a7795.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm64/renesas/r8a7795.dtsi:			reset-names = "ssi-all",
scripts/dtc/include-prefixes/arm64/renesas/r8a7796.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/renesas/r8a7796.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm64/renesas/r8a7796.dtsi:			reset-names = "ssi-all",
scripts/dtc/include-prefixes/arm64/renesas/r8a77965.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/renesas/r8a77965.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm64/renesas/r8a77970.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/renesas/r8a77970.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm64/renesas/r8a77980.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/renesas/r8a77980.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm64/renesas/r8a77990-ebisu.dts:		reset-gpios = <&gpio1 20 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/renesas/r8a77990.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/renesas/r8a77990.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm64/renesas/r8a77995.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/renesas/r8a77995.dtsi:		rst: reset-controller@e6160000 {
scripts/dtc/include-prefixes/arm64/renesas/salvator-common.dtsi:		reset-gpios = <&gpio2 10 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/renesas/ulcb-kf.dtsi:		reset-gpios = <&gpio5 3 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/renesas/ulcb-kf.dtsi:		reset-gpios= <&gpio3 15 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/renesas/ulcb.dtsi:		reset-gpios = <&gpio2 10 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3328-evb.dts:		reset-gpios = <&gpio1 18 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3328-roc-cc.dts:	snps,reset-gpio = <&gpio1 RK_PC2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3328-roc-cc.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3328-roc-cc.dts:	snps,reset-delays-us = <0 10000 50000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3328-rock64.dts:	snps,reset-gpio = <&gpio1 RK_PC2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3328-rock64.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3328-rock64.dts:	snps,reset-delays-us = <0 10000 50000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3328.dtsi:		reset-names = "tsadc-apb";
scripts/dtc/include-prefixes/arm64/rockchip/rk3328.dtsi:		reset-names = "saradc-apb";
scripts/dtc/include-prefixes/arm64/rockchip/rk3328.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3328.dtsi:		reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm64/rockchip/rk3328.dtsi:		reset-names = "stmmaceth", "mac-phy";
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-evb.dtsi:		reset-gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-evb.dtsi:	snps,reset-gpio = <&gpio3 RK_PB4 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-evb.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-evb.dtsi:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-lion.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-lion.dtsi:	snps,reset-delays-us = <0 10000 50000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-lion.dtsi:	snps,reset-gpio = <&gpio3 RK_PB3 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-orion-r68-meta.dts:		reset-gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-orion-r68-meta.dts:	snps,reset-gpio = <&gpio3 RK_PB4 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-orion-r68-meta.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-orion-r68-meta.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-r88.dts:		reset-gpios = <&gpio2 RK_PA3 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-r88.dts:		reset-gpios =
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-r88.dts:	snps,reset-gpio = <&gpio3 RK_PB4 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-r88.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368-r88.dts:	snps,reset-delays-us = <0 10000 1000000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3368.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm64/rockchip/rk3368.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm64/rockchip/rk3368.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm64/rockchip/rk3368.dtsi:		reset-names = "saradc-apb";
scripts/dtc/include-prefixes/arm64/rockchip/rk3368.dtsi:		reset-names = "tsadc-apb";
scripts/dtc/include-prefixes/arm64/rockchip/rk3368.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-evb.dts:	snps,reset-gpio = <&gpio3 RK_PB7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-evb.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-evb.dts:	snps,reset-delays-us = <0 10000 50000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-firefly.dts:		reset-gpios = <&gpio0 RK_PB2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-firefly.dts:	snps,reset-gpio = <&gpio3 RK_PB7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-firefly.dts:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-firefly.dts:	snps,reset-delays-us = <0 10000 50000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-gru.dtsi:		headset_int_l: headset-int-l {
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-gru.dtsi:		touch_reset_l: touch-reset-l {
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-gru.dtsi:		wlan_module_reset_l: wlan-module-reset-l {
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-puma.dtsi:	snps,reset-gpio = <&gpio3 RK_PC0 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-puma.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-puma.dtsi:	snps,reset-delays-us = <0 10000 50000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-sapphire-excavator.dts:		reset-gpios = <&gpio0 RK_PB2 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-sapphire.dtsi:	snps,reset-gpio = <&gpio3 RK_PB7 GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-sapphire.dtsi:	snps,reset-active-low;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399-sapphire.dtsi:	snps,reset-delays-us = <0 10000 50000>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "core", "mgmt", "mgmt-sticky", "pipe",
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "stmmaceth";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "reset";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "usb3-otg";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "usb3-otg";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "spdif", "dptx", "apb", "core";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "saradc-apb";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "tsadc-apb";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "core", "axi", "ahb";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:			reset-names = "phy";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "uphy", "uphy-pipe", "uphy-tcphy";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "uphy", "uphy-pipe", "uphy-tcphy";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "axi", "ahb", "dclk";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "axi", "ahb", "dclk";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "apb";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "apb";
scripts/dtc/include-prefixes/arm64/rockchip/rk3399.dtsi:		reset-names = "dp";
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11-global.dts:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(23, 4) GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11.dtsi:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(3, 2) GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11.dtsi:			reset-names = "aio";
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11.dtsi:			reset-names = "evea", "exiv", "adamv";
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld11.dtsi:			reset-names = "ether";
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld20-global.dts:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(0, 0) GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld20.dtsi:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(3, 2) GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld20.dtsi:			reset-names = "aio";
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld20.dtsi:			reset-names = "evea", "exiv", "adamv";
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld20.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld20.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld20.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld20.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-ld20.dtsi:			reset-names = "ether";
scripts/dtc/include-prefixes/arm64/socionext/uniphier-pxs3.dtsi:		reset-gpios = <&gpio UNIPHIER_GPIO_PORT(5, 7) GPIO_ACTIVE_LOW>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-pxs3.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-pxs3.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-pxs3.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/arm64/socionext/uniphier-pxs3.dtsi:			reset-names = "ether";
scripts/dtc/include-prefixes/arm64/socionext/uniphier-pxs3.dtsi:			reset-names = "ether";
scripts/dtc/include-prefixes/arm64/xilinx/zynqmp-zcu100-revC.dts:		reset-gpios = <&gpio 7 GPIO_ACTIVE_LOW>; /* WIFI_EN */
scripts/dtc/include-prefixes/c6x/tms320c6455.dtsi:			ti,c64x+pll-reset-delay = <15360>;
scripts/dtc/include-prefixes/c6x/tms320c6457.dtsi:			ti,c64x+pll-reset-delay = <24000>;
scripts/dtc/include-prefixes/c6x/tms320c6472.dtsi:			ti,c64x+pll-reset-delay = <12000>;
scripts/dtc/include-prefixes/c6x/tms320c6474.dtsi:			ti,c64x+pll-reset-delay = <30000>;
scripts/dtc/include-prefixes/c6x/tms320c6678.dtsi:			ti,c64x+pll-reset-delay = <12000>;
scripts/dtc/include-prefixes/microblaze/system.dts:	hard-reset-gpios = <&LEDs_8Bit 2 1>;
scripts/dtc/include-prefixes/microblaze/system.dts:			xlnx,reset-msr = <0x0>;
scripts/dtc/include-prefixes/mips/img/boston.dts:					phy-reset-gpios = <&eg20t_gpio 6
scripts/dtc/include-prefixes/mips/img/pistachio.dtsi:		reset-names = "rst";
scripts/dtc/include-prefixes/mips/img/pistachio.dtsi:		reset-names = "rst";
scripts/dtc/include-prefixes/mips/img/pistachio.dtsi:		reset-names = "rst";
scripts/dtc/include-prefixes/mips/img/pistachio.dtsi:		pistachio_reset: reset-controller {
scripts/dtc/include-prefixes/mips/img/pistachio.dtsi:			#reset-cells = <1>;
scripts/dtc/include-prefixes/mips/ingenic/ci20.dts:		reset-gpios = <&gpf 12 GPIO_ACTIVE_HIGH>;
scripts/dtc/include-prefixes/mips/qca/ar9132.dtsi:			rst: reset-controller@1806001c {
scripts/dtc/include-prefixes/mips/qca/ar9132.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/mips/qca/ar9132.dtsi:		reset-names = "usb-phy", "usb-suspend-override";
scripts/dtc/include-prefixes/mips/qca/ar9331.dtsi:			rst: reset-controller@1806001c {
scripts/dtc/include-prefixes/mips/qca/ar9331.dtsi:				#reset-cells = <1>;
scripts/dtc/include-prefixes/mips/qca/ar9331.dtsi:		reset-names = "usb-phy", "usb-suspend-override";
scripts/dtc/include-prefixes/mips/ralink/mt7628a.dtsi:	resetc: reset-controller {
scripts/dtc/include-prefixes/mips/ralink/mt7628a.dtsi:		#reset-cells = <1>;
scripts/dtc/include-prefixes/mips/ralink/mt7628a.dtsi:			reset-names = "intc";
scripts/dtc/include-prefixes/mips/ralink/mt7628a.dtsi:			reset-names = "uart0";
scripts/dtc/include-prefixes/mips/ralink/mt7628a.dtsi:			reset-names = "uart1";
scripts/dtc/include-prefixes/mips/ralink/mt7628a.dtsi:			reset-names = "uart2";
scripts/dtc/include-prefixes/mips/ralink/mt7628a.dtsi:		reset-names = "host", "device";
scripts/dtc/include-prefixes/nios2/10m50_devboard.dts:			altr,reset-addr = <0xd4000000>;
scripts/dtc/include-prefixes/nios2/3c120_devboard.dts:			altr,reset-addr = <0xc2800000>;
scripts/dtc/include-prefixes/powerpc/fsp2.dts:		reset-warning-irq {
scripts/dtc/include-prefixes/powerpc/fsp2.dts:			compatible = "ibm,reset-warning-irq";
scripts/dtc/include-prefixes/powerpc/icon.dts:			reset-type = <2>;	/* Use chip-reset */
scripts/dtc/include-prefixes/powerpc/katmai.dts:			reset-type = <2>;	/* Use chip-reset */
scripts/leaking_addresses.pl:	--page-offset-32-bit=o		Page offset (for 32-bit kernel 0xABCD1234).
scripts/leaking_addresses.pl:	'page-offset-32-bit=o'	=> \$page_offset_32bit,
scripts/leaking_addresses.pl:	printf("\n\t--32-bit or --page-offset-32-bit=<page offset>\n\n");
scripts/leaking_addresses.pl:	# Allow --32-bit or --page-offset-32-bit to override
scripts/leaking_addresses.pl:       # Allow --page-offset-32bit to override.
security/apparmor/label.c:	AA_BUG(I->i > set->size);
security/apparmor/label.c:	while (I->j < sub->size && I->i < set->size) {
security/apparmor/label.c:		int res = profile_cmp(sub->vec[I->j], set->vec[I->i]);
sound/arm/pxa2xx-ac97-lib.c:						      "reset-gpios", 0);
sound/core/seq/seq_midi_emul.c:	if (chanset->channels == NULL)
sound/core/seq/seq_midi_emul.c:		if (dest_channel >= chanset->max_channels) {
sound/core/seq/seq_midi_emul.c:				   dest_channel, chanset->max_channels);
sound/core/seq/seq_midi_emul.c:	chan = chanset->channels + dest_channel;
sound/core/seq/seq_midi_emul.c:	drv  = chanset->private_data;
sound/core/seq/seq_midi_emul.c:		if (chset->midi_mode == SNDRV_MIDI_MODE_XG) {
sound/core/seq/seq_midi_emul.c:	chset->midi_mode = SNDRV_MIDI_MODE_GM;
sound/core/seq/seq_midi_emul.c:	chset->gs_master_volume = 127;
sound/core/seq/seq_midi_emul.c:	for (i = 0; i < chset->max_channels; i++) {
sound/core/seq/seq_midi_emul.c:		struct snd_midi_channel *chan = chset->channels + i;
sound/core/seq/seq_midi_emul.c:	if (chset->midi_mode != SNDRV_MIDI_MODE_NONE) {
sound/core/seq/seq_midi_emul.c:		if (chset->midi_mode != SNDRV_MIDI_MODE_GS &&
sound/core/seq/seq_midi_emul.c:		    chset->midi_mode != SNDRV_MIDI_MODE_XG) {
sound/core/seq/seq_midi_emul.c:			chset->midi_mode = SNDRV_MIDI_MODE_GM;
sound/core/seq/seq_midi_emul.c:		if (chset->midi_mode != SNDRV_MIDI_MODE_GS &&
sound/core/seq/seq_midi_emul.c:		    chset->midi_mode != SNDRV_MIDI_MODE_XG)
sound/core/seq/seq_midi_emul.c:			chset->midi_mode = SNDRV_MIDI_MODE_GS;
sound/core/seq/seq_midi_emul.c:			if (p < chset->max_channels) {
sound/core/seq/seq_midi_emul.c:					chset->channels[p].drum_channel = 1;
sound/core/seq/seq_midi_emul.c:					chset->channels[p].drum_channel = 0;
sound/core/seq/seq_midi_emul.c:			if (p < chset->max_channels &&
sound/core/seq/seq_midi_emul.c:			    ! chset->channels[p].drum_channel) {
sound/core/seq/seq_midi_emul.c:				chset->channels[p].midi_program = buf[7];
sound/core/seq/seq_midi_emul.c:			chset->gs_reverb_mode = buf[7];
sound/core/seq/seq_midi_emul.c:			chset->gs_chorus_mode = buf[7];
sound/core/seq/seq_midi_emul.c:			chset->gs_master_volume = buf[7];
sound/core/seq/seq_midi_emul.c:		chset->midi_mode = SNDRV_MIDI_MODE_XG;
sound/core/seq/seq_midi_emul.c:		for (i = 0; i < chset->max_channels; i++) {
sound/core/seq/seq_midi_emul.c:			if (chset->channels[i].drum_channel)
sound/core/seq/seq_midi_emul.c:				chset->channels[i].control[MIDI_CTL_MSB_BANK] = 127;
sound/core/seq/seq_midi_emul.c:				chset->channels[i].control[MIDI_CTL_MSB_BANK] = 0;
sound/core/seq/seq_midi_emul.c:	for (ch = 0; ch < chset->max_channels; ch++) {
sound/core/seq/seq_midi_emul.c:		struct snd_midi_channel *chan = chset->channels + ch;
sound/core/seq/seq_midi_emul.c:		chset->channels = snd_midi_channel_init_set(n);
sound/core/seq/seq_midi_emul.c:		chset->private_data = NULL;
sound/core/seq/seq_midi_emul.c:		chset->max_channels = n;
sound/core/seq/seq_midi_emul.c:	kfree(chset->channels);
sound/drivers/opl3/opl3_oss.c:	opl3->oss_chset->private_data = opl3;
sound/drivers/opl3/opl3_oss.c:	opl3->oss_chset->client = opl3->seq_client;
sound/drivers/opl3/opl3_oss.c:	opl3->oss_chset->port = snd_seq_event_port_attach(opl3->seq_client, &callbacks,
sound/drivers/opl3/opl3_oss.c:	if (opl3->oss_chset->port < 0) {
sound/drivers/opl3/opl3_oss.c:		port = opl3->oss_chset->port;
sound/drivers/opl3/opl3_oss.c:	arg->addr.client = opl3->oss_chset->client;
sound/drivers/opl3/opl3_oss.c:	arg->addr.port = opl3->oss_chset->port;
sound/drivers/opl3/opl3_seq.c:	opl3->chset->private_data = opl3;
sound/drivers/opl3/opl3_seq.c:	opl3->chset->client = opl3->seq_client;
sound/drivers/opl3/opl3_seq.c:	opl3->chset->port = snd_seq_event_port_attach(opl3->seq_client, &callbacks,
sound/drivers/opl3/opl3_seq.c:	if (opl3->chset->port < 0) {
sound/drivers/opl3/opl3_seq.c:		port = opl3->chset->port;
sound/drivers/opl4/opl4_seq.c:	opl4->chset->private_data = opl4;
sound/drivers/opl4/opl4_seq.c:	opl4->chset->client = client;
sound/drivers/opl4/opl4_seq.c:	opl4->chset->port = snd_seq_event_port_attach(client, &pcallbacks,
sound/drivers/opl4/opl4_seq.c:	if (opl4->chset->port < 0) {
sound/drivers/opl4/opl4_seq.c:		int err = opl4->chset->port;
sound/drivers/opl4/opl4_synth.c:	att += snd_opl4_volume_table[opl4->chset->gs_master_volume & 0x7f];
sound/isa/sb/emu8000_callback.c:		hw->chorus_mode = chset->gs_chorus_mode;
sound/isa/sb/emu8000_callback.c:		hw->reverb_mode = chset->gs_reverb_mode;
sound/oss/dmasound/dmasound.h:/* description of the set-up applies to either hard or soft settings */
sound/oss/dmasound/dmasound_core.c:	write_sq.rear = -1 ; /* same as for set-up */
sound/oss/dmasound/dmasound_core.c:     *  This function is called by _one_ chipset-specific driver
sound/pci/ac97/ac97_patch.c:	/* set-up multi channel */
sound/pci/ac97/ac97_patch.c:	/* set-up multi channel */
sound/pci/au88x0/au88x0_eq.c:	vortex_EqHw_SetLeftCoefs(vortex, coefset->LeftCoefs);
sound/pci/au88x0/au88x0_eq.c:	vortex_EqHw_SetRightCoefs(vortex, coefset->RightCoefs);
sound/pci/au88x0/au88x0_eq.c:	vortex_EqHw_SetLeftGainsCurrent(vortex, coefset->LeftGains);
sound/pci/au88x0/au88x0_eq.c:	vortex_EqHw_SetRightGainsTarget(vortex, coefset->RightGains);
sound/pci/au88x0/au88x0_eq.c:	vortex_EqHw_SetLeftGainsTarget(vortex, coefset->LeftGains);
sound/pci/au88x0/au88x0_eq.c:	vortex_EqHw_SetRightGainsCurrent(vortex, coefset->RightGains);
sound/pci/hda/hda_bind.c:	err = snd_hda_codec_set_name(codec, codec->preset->name);
sound/pci/hda/hda_bind.c:	patch = (hda_codec_patch_t)codec->preset->driver_data;
sound/pci/hda/hda_codec.c:	/* clear reset-flag when the communication gets recovered */
sound/pci/hda/hda_generic.h:	struct hda_multi_out multiout;	/* playback set-up
sound/pci/hda/patch_hdmi.c:	switch (codec->preset->vendor_id) {
sound/pci/hda/patch_hdmi.c:	switch (codec->preset->vendor_id) {
sound/pci/hda/patch_realtek.c:	{.id = ALC269_FIXUP_HEADSET_MIC, .name = "headset-mic"},
sound/pci/hda/patch_realtek.c:	{.id = ALC269_FIXUP_HEADSET_MODE, .name = "headset-mode"},
sound/pci/hda/patch_realtek.c:	{.id = ALC269_FIXUP_HEADSET_MODE_NO_HP_MIC, .name = "headset-mode-no-hp-mic"},
sound/pci/hda/patch_realtek.c:	{.id = ALC269_FIXUP_DELL1_MIC_NO_PRESENCE, .name = "dell-headset-multi"},
sound/pci/hda/patch_realtek.c:	{.id = ALC269_FIXUP_DELL2_MIC_NO_PRESENCE, .name = "dell-headset-dock"},
sound/pci/hda/patch_realtek.c:	{.id = ALC269_FIXUP_ASPIRE_HEADSET_MIC, .name = "aspire-headset-mic"},
sound/pci/hda/patch_realtek.c:	{.id = ALC225_FIXUP_HEADSET_JACK, .name = "alc-headset-jack"},
sound/pci/hda/patch_realtek.c:	{.id = ALC662_FIXUP_DELL_MIC_NO_PRESENCE, .name = "alc662-headset-multi"},
sound/pci/hda/patch_realtek.c:	{.id = ALC668_FIXUP_DELL_MIC_NO_PRESENCE, .name = "dell-headset-multi"},
sound/pci/hda/patch_realtek.c:	{.id = ALC891_FIXUP_DELL_MIC_NO_PRESENCE, .name = "alc891-headset-multi"},
sound/pci/hda/patch_sigmatel.c:	{ .id = STAC_92HD83XXX_HEADSET_JACK, .name = "headset-jack" },
sound/pci/nm256/nm256.c:			end_offset--;
sound/soc/codecs/adau1701.c:		gpio_nreset = of_get_named_gpio(dev->of_node, "reset-gpio", 0);
sound/soc/codecs/ak5386.c:						      "reset-gpio", 0);
sound/soc/codecs/cs35l33.c:			"reset-gpios", GPIOD_OUT_HIGH);
sound/soc/codecs/cs35l34.c:				"reset-gpios", GPIOD_OUT_LOW);
sound/soc/codecs/cs4271.c:			of_get_named_gpio(dev->of_node, "reset-gpio", 0);
sound/soc/codecs/cs42l52.c:						"cirrus,reset-gpio", 0);
sound/soc/codecs/cs42l73.c:						"reset-gpio", 0);
sound/soc/codecs/hdac_hda.c:	ret = snd_hda_codec_set_name(hcodec, hcodec->preset->name);
sound/soc/codecs/hdac_hda.c:		dev_err(&hdev->dev, "name failed %s\n", hcodec->preset->name);
sound/soc/codecs/hdac_hda.c:	patch = (hda_codec_patch_t)hcodec->preset->driver_data;
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 0, 0, coef_set->band1);
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 0, 1, coef_set->band2);
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 0, 2, coef_set->band3);
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 0, 3, coef_set->band4);
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 0, 4, coef_set->band5);
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 1, 0, coef_set->band1);
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 1, 1, coef_set->band2);
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 1, 2, coef_set->band3);
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 1, 3, coef_set->band4);
sound/soc/codecs/max98088.c:       m98088_eq_band(component, 1, 4, coef_set->band5);
sound/soc/codecs/max98095.c:	m98095_eq_band(component, channel, 0, coef_set->band1);
sound/soc/codecs/max98095.c:	m98095_eq_band(component, channel, 1, coef_set->band2);
sound/soc/codecs/max98095.c:	m98095_eq_band(component, channel, 2, coef_set->band3);
sound/soc/codecs/max98095.c:	m98095_eq_band(component, channel, 3, coef_set->band4);
sound/soc/codecs/max98095.c:	m98095_eq_band(component, channel, 4, coef_set->band5);
sound/soc/codecs/max98095.c:	m98095_biquad_band(component, channel, 0, coef_set->band1);
sound/soc/codecs/max98095.c:	m98095_biquad_band(component, channel, 1, coef_set->band2);
sound/soc/codecs/mt6351.c:		offset--;
sound/soc/codecs/mt6358.c:		offset--;
sound/soc/codecs/tas5086.c:		gpio_nreset = of_get_named_gpio(of_node, "reset-gpio", 0);
sound/soc/codecs/tlv320aic32x4.c:	aic32x4->rstn_gpio = of_get_named_gpio(np, "reset-gpios", 0);
sound/soc/codecs/tlv320aic3x.c:		ret = of_get_named_gpio(np, "reset-gpios", 0);
sound/soc/codecs/wcd9335.c:	wcd->reset_gpio = of_get_named_gpio(np,	"reset-gpios", 0);
sound/soc/fsl/imx-es8328.c:		.name = "headset-gpio",
sound/soc/hisilicon/hi6210-i2s.c:#include <linux/reset-controller.h>
sound/soc/intel/boards/cht_bsw_rt5672.c:	{ "headset-gpios", &headset_gpios, 1 },
sound/soc/mediatek/mt8183/mt8183-da7219-max98357.c:				 "mediatek,headset-codec", 0);
sound/soc/mediatek/mt8183/mt8183-da7219-max98357.c:			"Property 'mediatek,headset-codec' missing/invalid\n");
sound/soc/mediatek/mt8183/mt8183-mt6358-ts3a227-max98357.c:				 "mediatek,headset-codec", 0);
sound/soc/mediatek/mt8183/mt8183-mt6358-ts3a227-max98357.c:			"Property 'mediatek,headset-codec' missing/invalid\n");
sound/soc/rockchip/rockchip_max98090.c:			"rockchip,headset-codec", 0);
sound/soc/rockchip/rockchip_max98090.c:			"Property 'rockchip,headset-codec' missing/invalid\n");
sound/soc/sof/pcm.c:	 * check if hw_params needs to be set-up again.
sound/soc/sof/pm.c:	 * SOF requires hw_params to be set-up internally upon resume.
sound/soc/tegra/tegra20_ac97.c:					     "nvidia,codec-reset-gpio", 0);
sound/synth/emux/soundfont.c:/* check if specified type is special font (GUS or preset-alias) */
tools/perf/bench/Build:perf-$(CONFIG_X86_64) += mem-memset-x86-64-asm.o
tools/perf/bench/mem-functions.c:#include "mem-memset-arch.h"
tools/perf/bench/mem-functions.c:# include "mem-memset-x86-64-asm-def.h"
tools/perf/bench/mem-memset-arch.h:#include "mem-memset-x86-64-asm-def.h"
tools/perf/builtin-config.c:	perf_config_items__for_each_entry(&set->sections, section) {
tools/perf/builtin-config.c:	perf_config_items__for_each_entry(&set->sections, section) {
tools/perf/pmu-events/arch/powerpc/power9/other.json:    "BriefDescription": "An ERAT miss was detected after a set-p hit. Erat tracker indicates fail due to tlbmiss and the instruction gets flushed because the instruction was working on the wrong address"
tools/perf/pmu-events/arch/x86/broadwell/virtual-memory.json:        "PublicDescription": "This event counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).",
tools/perf/pmu-events/arch/x86/broadwellde/virtual-memory.json:        "PublicDescription": "This event counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).",
tools/perf/pmu-events/arch/x86/broadwellx/virtual-memory.json:        "PublicDescription": "This event counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).",
tools/perf/pmu-events/arch/x86/cascadelakex/virtual-memory.json:        "PublicDescription": "Counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).",
tools/perf/pmu-events/arch/x86/skylake/virtual-memory.json:        "PublicDescription": "Counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).",
tools/perf/pmu-events/arch/x86/skylakex/virtual-memory.json:        "PublicDescription": "Counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).",
tools/perf/ui/browser.c:		while (offset-- != 0)
tools/perf/ui/browser.c:		while (offset-- != 0)
tools/perf/ui/browsers/hists.c:		arg->row_offset--;
tools/perf/ui/browsers/hists.c:			arg->row_offset--;
tools/perf/ui/browsers/hists.c:		row_offset--;
tools/perf/util/config.c:	sections = &set->sections;
tools/perf/util/config.c:		INIT_LIST_HEAD(&set->sections);
tools/perf/util/config.c:	list_for_each_entry_safe(section, tmp, &set->sections, node) {
tools/perf/util/config.h:	perf_config_sections__for_each_entry(&set->sections, section)		\
tools/perf/util/cs-etm.c:			offset--;
tools/testing/selftests/bpf/test_tunnel.sh:	# Set static ARP entry here because iptables set-mark works
tools/testing/selftests/bpf/test_tunnel.sh:	ip netns exec at_ns0 iptables -A OUTPUT -j MARK --set-mark 0x800FF
tools/testing/selftests/kvm/lib/sparsebit.c:	s->num_set--;
tools/testing/selftests/kvm/lib/sparsebit.c:				s->num_set--;
tools/testing/selftests/timers/.gitignore:set-2038
tools/testing/selftests/timers/.gitignore:set-tai
tools/testing/selftests/timers/.gitignore:set-timer-lat
tools/testing/selftests/timers/.gitignore:set-tz
tools/testing/selftests/timers/Makefile:TEST_GEN_PROGS = posix_timers nanosleep nsleep-lat set-timer-lat mqueue-lat \
tools/testing/selftests/timers/Makefile:		      leapcrash set-tai set-2038 set-tz
tools/testing/selftests/timers/set-2038.c: *	$ gcc set-2038.c -o set-2038 -lrt
tools/testing/selftests/timers/set-timer-lat.c: *	$ gcc set-timer-lat.c -o set-timer-lat -lrt
cscope.files:./arch/arc/lib/memset-archs.S
cscope.files:./arch/arm/mach-tegra/reset-handler.S
cscope.files:./arch/sh/lib/memset-sh4.S
cscope.files:./drivers/reset/hisilicon/reset-hi3660.c
cscope.files:./drivers/reset/reset-a10sr.c
cscope.files:./drivers/reset/reset-ath79.c
cscope.files:./drivers/reset/reset-axs10x.c
cscope.files:./drivers/reset/reset-berlin.c
cscope.files:./drivers/reset/reset-hsdk.c
cscope.files:./drivers/reset/reset-imx7.c
cscope.files:./drivers/reset/reset-lantiq.c
cscope.files:./drivers/reset/reset-lpc18xx.c
cscope.files:./drivers/reset/reset-meson.c
cscope.files:./drivers/reset/reset-oxnas.c
cscope.files:./drivers/reset/reset-pistachio.c
cscope.files:./drivers/reset/reset-simple.c
cscope.files:./drivers/reset/reset-simple.h
cscope.files:./drivers/reset/reset-stm32mp1.c
cscope.files:./drivers/reset/reset-sunxi.c
cscope.files:./drivers/reset/reset-ti-sci.c
cscope.files:./drivers/reset/reset-ti-syscon.c
cscope.files:./drivers/reset/reset-uniphier.c
cscope.files:./drivers/reset/reset-zynq.c
cscope.files:./drivers/reset/sti/reset-stih407.c
cscope.files:./drivers/reset/sti/reset-syscfg.c
cscope.files:./drivers/reset/sti/reset-syscfg.h
cscope.files:./drivers/reset/tegra/reset-bpmp.c
cscope.files:./include/linux/reset-controller.h
cscope.files:./samples/kobject/kset-example.c
cscope.files:./tools/perf/bench/mem-memset-arch.h
cscope.files:./tools/perf/bench/mem-memset-x86-64-asm-def.h
cscope.files:./tools/perf/bench/mem-memset-x86-64-asm.S
cscope.files:./tools/testing/selftests/timers/set-2038.c
cscope.files:./tools/testing/selftests/timers/set-tai.c
cscope.files:./tools/testing/selftests/timers/set-timer-lat.c
cscope.files:./tools/testing/selftests/timers/set-tz.c
匹配到二进制文件 cscope.in.out
cscope.out:	@arch/arc/lib/memset-archs.S
cscope.out:, "resets", "#reset-cells",
cscope.out:->dev, "neponset-ncr",
cscope.out:->dev, "neponset-mdm-ctl0",
cscope.out:->dev, "neponset-mdm-ctl1",
cscope.out:->dev, "neponset-aud-ctl",
cscope.out:	@arch/arm/mach-tegra/reset-handler.S
cscope.out:, "altr,reset-addr");
cscope.out:("set-64-bit-addressing"),
cscope.out:("set-indicator");
cscope.out:("set-power-level");
cscope.out:("set-indicator");
cscope.out:("set-indicator");
cscope.out:("ibm,set-eeh-option");
cscope.out:("ibm,set-slot-reset");
cscope.out:("ibm,read-slot-reset-state2");
cscope.out:("ibm,read-slot-reset-state");
cscope.out:, "hcall-set-mode"},
cscope.out:("ics-hal: set-affinity irq %d [hw 0x%x] server: 0x%x/0x%x\n",
cscope.out:("ibm,set-xive");
cscope.out:("set-indicator");
cscope.out:	@arch/sh/lib/memset-sh4.S
cscope.out: "SUNW,set-trap-table"
cscope.out:("Patch-ID 0x%08x: chipset-specific code unsupported.\n",
cscope.out:(64U, set->queue_depth);
cscope.out:, "set-in-sync");
cscope.out: = "ti,no-reset-on-init",
cscope.out:, "ti,set-rate-parent"))
cscope.out:, "ti,set-rate-parent"))
cscope.out:, "ti,set-rate-parent"))
cscope.out:, "ti,set-bit-to-disable"))
cscope.out:, "ti,set-rate-parent"))
cscope.out:, "set-vdnap0");
cscope.out:, "set-frequency-high");
cscope.out:, "set-frequency-low");
cscope.out:, "set-voltage-high-0");
cscope.out:, "set-voltage-low-0");
cscope.out:, "set-voltage-high-1");
cscope.out:, "set-voltage-low-1");
cscope.out: != set->fb) {
cscope.out: != set->crtc->y)
cscope.out: = set->fb;
cscope.out: = set->x;
cscope.out: = set->y;
cscope.out: = set->fb;
cscope.out:, "reset-gpios", 0);
cscope.out:, "reset-gpios", 0);
cscope.out:, "reset-gpios", 0);
cscope.out:, "%s clock set-up failed\n",
cscope.out:, "mcu-reset-gpios", 0);
cscope.out:, "mcu-reset-gpios");
cscope.out:, "syna,offset-x", 1);
cscope.out:, "syna,offset-y", 1);
cscope.out:, "reset-gpio", 0);
cscope.out: = "gpio-reset-ctrl";
cscope.out:, "reset-gpios", 0);
cscope.out:, "st,reset-signal");
cscope.out:, "st,reset-por");
cscope.out:, "reset-duration",
cscope.out:], "%s-qset-err-%d",
cscope.out:, "reset-gpios", 0,
cscope.out:, "phy-reset-gpios", 0);
cscope.out:, "phy-reset-active-high");
cscope.out:, "reset-field-offset",
cscope.out:; offset--;)
cscope.out:, "reset-gpios",
cscope.out:, "reset-gpio", 0);
cscope.out:, "reset-gpio", 0);
cscope.out:, "reset-gpios", 0,
cscope.out: = 0; offset >= 0x1d; offset--) {
cscope.out:, "reset-n-io", 0);
cscope.out:, "invalid interleave-set-cookie\n");
cscope.out:("nvme-reset-wq",
cscope.out:, "reset-assert-us",
cscope.out:, "reset-deassert-us",
cscope.out:, "reset-gpio", 0);
cscope.out:, "reset-gpio", 0);
cscope.out:, "reset-delay-us",
cscope.out:, "qcom,imp-res-offset-value",
cscope.out:, "regulator-allow-set-load"))
cscope.out: = "ti,ldovbb-vset-mask";
cscope.out:, "resets", "#reset-cells",
cscope.out:, "resets", "#reset-cells");
cscope.out: = "reset-hi6220",
cscope.out:	@drivers/reset/hisilicon/reset-hi3660.c
cscope.out:	@drivers/reset/reset-a10sr.c
cscope.out:	@drivers/reset/reset-ath79.c
cscope.out:	@drivers/reset/reset-axs10x.c
cscope.out:	@drivers/reset/reset-berlin.c
cscope.out:	@drivers/reset/reset-hsdk.c
cscope.out:	@drivers/reset/reset-imx7.c
cscope.out:	@drivers/reset/reset-lantiq.c
cscope.out:	@drivers/reset/reset-lpc18xx.c
cscope.out:	@drivers/reset/reset-meson.c
cscope.out:	@drivers/reset/reset-oxnas.c
cscope.out:	@drivers/reset/reset-pistachio.c
cscope.out:	@drivers/reset/reset-simple.c
cscope.out:	@drivers/reset/reset-simple.h
cscope.out:	@drivers/reset/reset-stm32mp1.c
cscope.out:	@drivers/reset/reset-sunxi.c
cscope.out:	@drivers/reset/reset-ti-sci.c
cscope.out:	@drivers/reset/reset-ti-syscon.c
cscope.out:	@drivers/reset/reset-uniphier.c
cscope.out:	@drivers/reset/reset-zynq.c
cscope.out:	@drivers/reset/sti/reset-stih407.c
cscope.out: = "reset-stih407",
cscope.out:	@drivers/reset/sti/reset-syscfg.c
cscope.out:	@drivers/reset/sti/reset-syscfg.h
cscope.out:	@drivers/reset/tegra/reset-bpmp.c
cscope.out:, "reset-pin-assert-time-ms",
cscope.out:, "ctrl-reset-reg",
cscope.out:, "ctrl-reset-sts-reg",
cscope.out:, "resets", "#reset-cells",
cscope.out:, "lantiq,offset-endianness",
cscope.out:, "reset-gpios", 0);
cscope.out:("/chosen/linux,sysrq-reset-seq");
cscope.out:, "TDC set- completion\n");
cscope.out:, 0, (qset->qh.overlay));
cscope.out: != qset->pause_after_urb))
cscope.out:, "reset-gpios", 0);
cscope.out:, "nvidia,phy-reset-gpio", 0);
cscope.out:, "reset-gpios", 0);
cscope.out:, "reset-gpios", 0);
cscope.out:, "reset-gpios", 0);
cscope.out:, "reset-gpios", 0);
cscope.out:, "reset-on-timeout");
cscope.out:("set-indicator");
cscope.out:, 21), "omap-set-vals") \
cscope.out:, 22), "omap-set-header") \
cscope.out:, 35), "set-alloc-hint") \
cscope.out:, 3), "pg-hitset-ls") \
cscope.out:->sig[3] >> 32); v.sig[6] = set->sig[3];
cscope.out:->sig[2] >> 32); v.sig[4] = set->sig[2];
cscope.out:->sig[1] >> 32); v.sig[2] = set->sig[1];
cscope.out:->sig[0] >> 32); v.sig[0] = set->sig[0];
cscope.out:	@include/linux/reset-controller.h
cscope.out:[3] | set->sig[2] |
cscope.out:[1] | set->sig[0]) == 0;
cscope.out:[1] | set->sig[0]) == 0;
cscope.out:(set->sig[3]); \
cscope.out:(set->sig[2]); \
cscope.out:(set->sig[1]); \
cscope.out:(set->sig[0]); \
cscope.out:, (cset->subsys)))
cscope.out:, (cset->subsys));
cscope.out:; offset--) {
cscope.out:(&kobj->kset->kobj) : "<NULL>");
cscope.out:] = set->osds[i];
cscope.out:] = set->osds[i];
cscope.out:, set ? set->name : "",
cscope.out:	@samples/kobject/kset-example.c
cscope.out:, "resets", "#reset-cells");
cscope.out: = "headset-mic"},
cscope.out: = "headset-mode"},
cscope.out: = "headset-mode-no-hp-mic"},
cscope.out: = "dell-headset-multi"},
cscope.out: = "dell-headset-dock"},
cscope.out: = "aspire-headset-mic"},
cscope.out: = "alc-headset-jack"},
cscope.out: = "alc662-headset-multi"},
cscope.out: = "dell-headset-multi"},
cscope.out: = "alc891-headset-multi"},
cscope.out: = "headset-jack" },
cscope.out:, "reset-gpio", 0);
cscope.out:, "reset-gpio", 0);
cscope.out:, "reset-gpio", 0);
cscope.out:, "reset-gpios", 0);
cscope.out:, "reset-gpios", 0);
cscope.out:, "reset-gpios", 0);
cscope.out: = "headset-gpio",
cscope.out:	@tools/perf/bench/mem-memset-arch.h
cscope.out:	@tools/perf/bench/mem-memset-x86-64-asm-def.h
cscope.out:	@tools/perf/bench/mem-memset-x86-64-asm.S
cscope.out:	@tools/testing/selftests/timers/set-2038.c
cscope.out:	@tools/testing/selftests/timers/set-tai.c
cscope.out:	@tools/testing/selftests/timers/set-timer-lat.c
cscope.out:	@tools/testing/selftests/timers/set-tz.c
cscope.out:arch/arc/lib/memset-archs.S
cscope.out:arch/arm/mach-tegra/reset-handler.S
cscope.out:arch/sh/lib/memset-sh4.S
cscope.out:drivers/reset/hisilicon/reset-hi3660.c
cscope.out:drivers/reset/reset-a10sr.c
cscope.out:drivers/reset/reset-ath79.c
cscope.out:drivers/reset/reset-axs10x.c
cscope.out:drivers/reset/reset-berlin.c
cscope.out:drivers/reset/reset-hsdk.c
cscope.out:drivers/reset/reset-imx7.c
cscope.out:drivers/reset/reset-lantiq.c
cscope.out:drivers/reset/reset-lpc18xx.c
cscope.out:drivers/reset/reset-meson.c
cscope.out:drivers/reset/reset-oxnas.c
cscope.out:drivers/reset/reset-pistachio.c
cscope.out:drivers/reset/reset-simple.c
cscope.out:drivers/reset/reset-simple.h
cscope.out:drivers/reset/reset-stm32mp1.c
cscope.out:drivers/reset/reset-sunxi.c
cscope.out:drivers/reset/reset-ti-sci.c
cscope.out:drivers/reset/reset-ti-syscon.c
cscope.out:drivers/reset/reset-uniphier.c
cscope.out:drivers/reset/reset-zynq.c
cscope.out:drivers/reset/sti/reset-stih407.c
cscope.out:drivers/reset/sti/reset-syscfg.c
cscope.out:drivers/reset/sti/reset-syscfg.h
cscope.out:drivers/reset/tegra/reset-bpmp.c
cscope.out:include/linux/reset-controller.h
cscope.out:samples/kobject/kset-example.c
cscope.out:tools/perf/bench/mem-memset-arch.h
cscope.out:tools/perf/bench/mem-memset-x86-64-asm-def.h
cscope.out:tools/perf/bench/mem-memset-x86-64-asm.S
cscope.out:tools/testing/selftests/timers/set-2038.c
cscope.out:tools/testing/selftests/timers/set-tai.c
cscope.out:tools/testing/selftests/timers/set-timer-lat.c
cscope.out:tools/testing/selftests/timers/set-tz.c
匹配到二进制文件 cscope.out
tags:AXS10X_MAX_RESETS	drivers/reset/reset-axs10x.c	18;"	d	file:
tags:BERLIN_MAX_RESETS	drivers/reset/reset-berlin.c	26;"	d	file:
tags:BITS_PER_REG	drivers/reset/reset-meson.c	68;"	d	file:
tags:CGU_IP_SW_RESET	drivers/reset/reset-hsdk.c	45;"	d	file:
tags:CGU_IP_SW_RESET_DELAY	drivers/reset/reset-hsdk.c	48;"	d	file:
tags:CGU_IP_SW_RESET_DELAY_MASK	drivers/reset/reset-hsdk.c	47;"	d	file:
tags:CGU_IP_SW_RESET_DELAY_SHIFT	drivers/reset/reset-hsdk.c	46;"	d	file:
tags:CGU_IP_SW_RESET_RESET	drivers/reset/reset-hsdk.c	49;"	d	file:
tags:CGU_SYS_RST_CTRL	drivers/reset/reset-hsdk.c	44;"	d	file:
tags:CLOCK_BOOTTIME	tools/testing/selftests/timers/set-timer-lat.c	40;"	d	file:
tags:CLOCK_BOOTTIME_ALARM	tools/testing/selftests/timers/set-timer-lat.c	42;"	d	file:
tags:CLOCK_HWSPECIFIC	tools/testing/selftests/timers/set-timer-lat.c	43;"	d	file:
tags:CLOCK_MONOTONIC	tools/testing/selftests/timers/set-timer-lat.c	34;"	d	file:
tags:CLOCK_MONOTONIC_COARSE	tools/testing/selftests/timers/set-timer-lat.c	39;"	d	file:
tags:CLOCK_MONOTONIC_RAW	tools/testing/selftests/timers/set-timer-lat.c	37;"	d	file:
tags:CLOCK_PROCESS_CPUTIME_ID	tools/testing/selftests/timers/set-timer-lat.c	35;"	d	file:
tags:CLOCK_REALTIME	tools/testing/selftests/timers/set-timer-lat.c	33;"	d	file:
tags:CLOCK_REALTIME_ALARM	tools/testing/selftests/timers/set-timer-lat.c	41;"	d	file:
tags:CLOCK_REALTIME_COARSE	tools/testing/selftests/timers/set-timer-lat.c	38;"	d	file:
tags:CLOCK_TAI	tools/testing/selftests/timers/set-timer-lat.c	44;"	d	file:
tags:CLOCK_THREAD_CPUTIME_ID	tools/testing/selftests/timers/set-timer-lat.c	36;"	d	file:
tags:CLR_OFFSET	drivers/reset/reset-stm32mp1.c	14;"	d	file:
tags:FULL_CHIP_RESET	drivers/reset/reset-ath79.c	31;"	d	file:
tags:HSDK_MAX_RESETS	drivers/reset/reset-hsdk.c	42;"	d	file:
tags:KTIME_MAX	tools/testing/selftests/timers/set-2038.c	34;"	d	file:
tags:KTIME_SEC_MAX	tools/testing/selftests/timers/set-2038.c	35;"	d	file:
tags:LANTIQ_RCU_RESET_TIMEOUT	drivers/reset/reset-lantiq.c	21;"	d	file:
tags:LEVEL_OFFSET	drivers/reset/reset-meson.c	69;"	d	file:
tags:LPC18XX_RGU_ACTIVE_STATUS0	drivers/reset/reset-lpc18xx.c	26;"	d	file:
tags:LPC18XX_RGU_ACTIVE_STATUS1	drivers/reset/reset-lpc18xx.c	27;"	d	file:
tags:LPC18XX_RGU_CORE_RST	drivers/reset/reset-lpc18xx.c	32;"	d	file:
tags:LPC18XX_RGU_CTRL0	drivers/reset/reset-lpc18xx.c	24;"	d	file:
tags:LPC18XX_RGU_CTRL1	drivers/reset/reset-lpc18xx.c	25;"	d	file:
tags:LPC18XX_RGU_RESETS_PER_REG	drivers/reset/reset-lpc18xx.c	29;"	d	file:
tags:LPC43XX_RGU_M0APP_RST	drivers/reset/reset-lpc18xx.c	34;"	d	file:
tags:LPC43XX_RGU_M0SUB_RST	drivers/reset/reset-lpc18xx.c	33;"	d	file:
tags:LPM_SYSCFG_1	drivers/reset/sti/reset-stih407.c	59;"	d	file:
tags:MEMSET_FN	tools/perf/bench/mem-memset-arch.h	10;"	d
tags:MEMSET_FN	tools/perf/bench/mem-memset-arch.h	5;"	d
tags:NR_CLOCKIDS	tools/testing/selftests/timers/set-timer-lat.c	45;"	d	file:
tags:NSEC_PER_SEC	tools/testing/selftests/timers/set-2038.c	32;"	d	file:
tags:NSEC_PER_SEC	tools/testing/selftests/timers/set-timer-lat.c	48;"	d	file:
tags:OBJCOPYFLAGS_info.bin	arch/s390/boot/compressed/Makefile	/^OBJCOPYFLAGS_info.bin := -O binary --only-section=.vmlinux.info --set-section-flags .vmlinux.info=load$/;"	m
tags:PISTACHIO_SOFT_RESET	drivers/reset/reset-pistachio.c	23;"	d	file:
tags:PMC_SCRATCH41	arch/arm/mach-tegra/reset-handler.S	/^#define PMC_SCRATCH41	0x140$/;"	d
tags:REG_COUNT	drivers/reset/reset-meson.c	67;"	d	file:
tags:RESET_DATA	arch/arm/mach-tegra/reset-handler.S	/^#define RESET_DATA(x)	((TEGRA_RESET_##x)*4)$/;"	d
tags:RESET_LOOKUP	include/linux/reset-controller.h	46;"	d
tags:RST_CLR_REGOFFSET	drivers/reset/reset-oxnas.c	33;"	d	file:
tags:RST_SET_REGOFFSET	drivers/reset/reset-oxnas.c	32;"	d	file:
tags:SOCFPGA_NR_BANKS	drivers/reset/reset-simple.c	108;"	d	file:
tags:SRC_A7RCR0	drivers/reset/reset-imx7.c	/^	SRC_A7RCR0		= 0x0004,$/;"	e	enum:imx7_src_registers	file:
tags:SRC_DDRC_RCR	drivers/reset/reset-imx7.c	/^	SRC_DDRC_RCR		= 0x1000,$/;"	e	enum:imx7_src_registers	file:
tags:SRC_ERCR	drivers/reset/reset-imx7.c	/^	SRC_ERCR		= 0x0014,$/;"	e	enum:imx7_src_registers	file:
tags:SRC_HSICPHY_RCR	drivers/reset/reset-imx7.c	/^	SRC_HSICPHY_RCR		= 0x001c,$/;"	e	enum:imx7_src_registers	file:
tags:SRC_M4RCR	drivers/reset/reset-imx7.c	/^	SRC_M4RCR		= 0x000c,$/;"	e	enum:imx7_src_registers	file:
tags:SRC_MIPIPHY_RCR	drivers/reset/reset-imx7.c	/^	SRC_MIPIPHY_RCR		= 0x0028,$/;"	e	enum:imx7_src_registers	file:
tags:SRC_PCIEPHY_RCR	drivers/reset/reset-imx7.c	/^	SRC_PCIEPHY_RCR		= 0x002c,$/;"	e	enum:imx7_src_registers	file:
tags:SRC_USBOPHY1_RCR	drivers/reset/reset-imx7.c	/^	SRC_USBOPHY1_RCR	= 0x0020,$/;"	e	enum:imx7_src_registers	file:
tags:SRC_USBOPHY2_RCR	drivers/reset/reset-imx7.c	/^	SRC_USBOPHY2_RCR	= 0x0024,$/;"	e	enum:imx7_src_registers	file:
tags:STIH407_PDN_0	drivers/reset/sti/reset-stih407.c	22;"	d	file:
tags:STIH407_PDN_1	drivers/reset/sti/reset-stih407.c	24;"	d	file:
tags:STIH407_PDN_ETH	drivers/reset/sti/reset-stih407.c	26;"	d	file:
tags:STIH407_SRST_CORE	drivers/reset/sti/reset-stih407.c	61;"	d	file:
tags:STIH407_SRST_LPM	drivers/reset/sti/reset-stih407.c	67;"	d	file:
tags:STIH407_SRST_SBC	drivers/reset/sti/reset-stih407.c	64;"	d	file:
tags:SW_RESET_TIMEOUT	drivers/reset/reset-hsdk.c	50;"	d	file:
tags:SYSCFG_4002	drivers/reset/sti/reset-stih407.c	39;"	d	file:
tags:SYSCFG_4032	drivers/reset/sti/reset-stih407.c	37;"	d	file:
tags:SYSCFG_5000	drivers/reset/sti/reset-stih407.c	30;"	d	file:
tags:SYSCFG_5001	drivers/reset/sti/reset-stih407.c	33;"	d	file:
tags:SYSCFG_5061	drivers/reset/sti/reset-stih407.c	107;"	d	file:
tags:SYSCFG_5128	drivers/reset/sti/reset-stih407.c	55;"	d	file:
tags:SYSCFG_5131	drivers/reset/sti/reset-stih407.c	56;"	d	file:
tags:SYSCFG_5132	drivers/reset/sti/reset-stih407.c	57;"	d	file:
tags:SYSSTAT_4520	drivers/reset/sti/reset-stih407.c	38;"	d	file:
tags:SYSSTAT_5500	drivers/reset/sti/reset-stih407.c	31;"	d	file:
tags:SYSSTAT_5501	drivers/reset/sti/reset-stih407.c	34;"	d	file:
tags:TEST_GEN_PROGS	tools/testing/selftests/timers/Makefile	/^TEST_GEN_PROGS = posix_timers nanosleep nsleep-lat set-timer-lat mqueue-lat \\$/;"	m
tags:TIMER_SECS	tools/testing/selftests/timers/set-timer-lat.c	51;"	d	file:
tags:UNIPHIER_MIO_RESET_DMAC	drivers/reset/reset-uniphier.c	167;"	d	file:
tags:UNIPHIER_MIO_RESET_EMMC_HW_RESET	drivers/reset/reset-uniphier.c	158;"	d	file:
tags:UNIPHIER_MIO_RESET_SD	drivers/reset/reset-uniphier.c	152;"	d	file:
tags:UNIPHIER_MIO_RESET_SD_BRIDGE	drivers/reset/reset-uniphier.c	155;"	d	file:
tags:UNIPHIER_MIO_RESET_USB2	drivers/reset/reset-uniphier.c	161;"	d	file:
tags:UNIPHIER_MIO_RESET_USB2_BRIDGE	drivers/reset/reset-uniphier.c	164;"	d	file:
tags:UNIPHIER_PERI_RESET_FI2C	drivers/reset/reset-uniphier.c	202;"	d	file:
tags:UNIPHIER_PERI_RESET_I2C	drivers/reset/reset-uniphier.c	199;"	d	file:
tags:UNIPHIER_PERI_RESET_UART	drivers/reset/reset-uniphier.c	196;"	d	file:
tags:UNIPHIER_RESET	drivers/reset/reset-uniphier.c	37;"	d	file:
tags:UNIPHIER_RESETX	drivers/reset/reset-uniphier.c	44;"	d	file:
tags:UNIPHIER_RESET_ACTIVE_LOW	drivers/reset/reset-uniphier.c	29;"	d	file:
tags:UNIPHIER_RESET_END	drivers/reset/reset-uniphier.c	34;"	d	file:
tags:UNIPHIER_RESET_ID_END	drivers/reset/reset-uniphier.c	32;"	d	file:
tags:UNRESONABLE_LATENCY	tools/testing/selftests/timers/set-timer-lat.c	49;"	d	file:
tags:YEAR_1901	tools/testing/selftests/timers/set-2038.c	37;"	d	file:
tags:YEAR_1970	tools/testing/selftests/timers/set-2038.c	38;"	d	file:
tags:YEAR_2038	tools/testing/selftests/timers/set-2038.c	39;"	d	file:
tags:YEAR_2262	tools/testing/selftests/timers/set-2038.c	40;"	d	file:
tags:YEAR_MAX	tools/testing/selftests/timers/set-2038.c	41;"	d	file:
tags:_LINUX_RESET_CONTROLLER_H_	include/linux/reset-controller.h	3;"	d
tags:_SYSCFG_RST_CH	drivers/reset/sti/reset-syscfg.h	32;"	d
tags:_SYSCFG_RST_CH_NO_ACK	drivers/reset/sti/reset-syscfg.h	37;"	d
tags:__RESET_SIMPLE_H__	drivers/reset/reset-simple.h	17;"	d
tags:__STI_RESET_SYSCFG_H	drivers/reset/sti/reset-syscfg.h	11;"	d
tags:__die	arch/arm/mach-tegra/reset-handler.S	/^__die:$/;"	l
tags:__initconst	drivers/reset/reset-sunxi.c	/^static const struct of_device_id sunxi_early_reset_dt_ids[] __initconst = {$/;"	v	typeref:struct:sunxi_early_reset_dt_ids	file:
tags:__is_not_lp1	arch/arm/mach-tegra/reset-handler.S	/^__is_not_lp1:$/;"	l
tags:__is_not_lp2	arch/arm/mach-tegra/reset-handler.S	/^__is_not_lp2:$/;"	l
tags:__no_cpu0_chk	arch/arm/mach-tegra/reset-handler.S	/^__no_cpu0_chk:$/;"	l
tags:__tegra_cpu_reset_handler_data	arch/arm/mach-tegra/reset-handler.S	/^__tegra_cpu_reset_handler_data:$/;"	l
tags:a10sr_reset	drivers/reset/reset-a10sr.c	/^struct a10sr_reset {$/;"	s	file:
tags:a10sr_reset_assert	drivers/reset/reset-a10sr.c	/^static int a10sr_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:a10sr_reset_deassert	drivers/reset/reset-a10sr.c	/^static int a10sr_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:a10sr_reset_driver	drivers/reset/reset-a10sr.c	/^module_platform_driver(a10sr_reset_driver);$/;"	v
tags:a10sr_reset_driver	drivers/reset/reset-a10sr.c	/^static struct platform_driver a10sr_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:a10sr_reset_of_match	drivers/reset/reset-a10sr.c	/^static const struct of_device_id a10sr_reset_of_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:a10sr_reset_ops	drivers/reset/reset-a10sr.c	/^static const struct reset_control_ops a10sr_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:a10sr_reset_probe	drivers/reset/reset-a10sr.c	/^static int a10sr_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:a10sr_reset_shift	drivers/reset/reset-a10sr.c	/^static inline int a10sr_reset_shift(unsigned long id)$/;"	f	file:
tags:a10sr_reset_status	drivers/reset/reset-a10sr.c	/^static int a10sr_reset_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:a10sr_reset_update	drivers/reset/reset-a10sr.c	/^static int a10sr_reset_update(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ack	drivers/reset/sti/reset-syscfg.c	/^	struct regmap_field *ack;$/;"	m	struct:syscfg_reset_channel	typeref:struct:syscfg_reset_channel::regmap_field	file:
tags:ack	drivers/reset/sti/reset-syscfg.h	/^	struct reg_field ack;$/;"	m	struct:syscfg_reset_channel_data	typeref:struct:syscfg_reset_channel_data::reg_field
tags:active_low	drivers/reset/reset-simple.c	/^	bool active_low;$/;"	m	struct:reset_simple_devdata	file:
tags:active_low	drivers/reset/reset-simple.h	/^	bool				active_low;$/;"	m	struct:reset_simple_data
tags:active_low	drivers/reset/sti/reset-syscfg.c	/^	bool active_low;$/;"	m	struct:syscfg_reset_controller	file:
tags:active_low	drivers/reset/sti/reset-syscfg.h	/^	bool active_low;$/;"	m	struct:syscfg_reset_controller_data
tags:after_errata	arch/arm/mach-tegra/reset-handler.S	/^after_errata:$/;"	l
tags:after_t20_check	arch/arm/mach-tegra/reset-handler.S	/^after_t20_check:$/;"	l
tags:after_t30_check	arch/arm/mach-tegra/reset-handler.S	/^after_t30_check:$/;"	l
tags:alarmcount	tools/testing/selftests/timers/set-timer-lat.c	/^int alarmcount;$/;"	v
tags:altinstr_replacement	tools/perf/bench/mem-memset-x86-64-asm.S	/^#define altinstr_replacement text$/;"	d
tags:assert	include/linux/reset-controller.h	/^	int (*assert)(struct reset_controller_dev *rcdev, unsigned long id);$/;"	m	struct:reset_control_ops
tags:assert_bit	drivers/reset/reset-ti-syscon.c	/^	unsigned int assert_bit;$/;"	m	struct:ti_syscon_reset_control	file:
tags:assert_offset	drivers/reset/reset-ti-syscon.c	/^	unsigned int assert_offset;$/;"	m	struct:ti_syscon_reset_control	file:
tags:ath79_reset	drivers/reset/reset-ath79.c	/^struct ath79_reset {$/;"	s	file:
tags:ath79_reset_assert	drivers/reset/reset-ath79.c	/^static int ath79_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ath79_reset_deassert	drivers/reset/reset-ath79.c	/^static int ath79_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ath79_reset_driver	drivers/reset/reset-ath79.c	/^builtin_platform_driver(ath79_reset_driver);$/;"	v
tags:ath79_reset_driver	drivers/reset/reset-ath79.c	/^static struct platform_driver ath79_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:ath79_reset_dt_ids	drivers/reset/reset-ath79.c	/^static const struct of_device_id ath79_reset_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:ath79_reset_ops	drivers/reset/reset-ath79.c	/^static const struct reset_control_ops ath79_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:ath79_reset_probe	drivers/reset/reset-ath79.c	/^static int ath79_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:ath79_reset_restart_handler	drivers/reset/reset-ath79.c	/^static int ath79_reset_restart_handler(struct notifier_block *nb,$/;"	f	file:
tags:ath79_reset_status	drivers/reset/reset-ath79.c	/^static int ath79_reset_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ath79_reset_update	drivers/reset/reset-ath79.c	/^static int ath79_reset_update(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:attr	samples/kobject/kset-example.c	/^	struct attribute attr;$/;"	m	struct:foo_attribute	typeref:struct:foo_attribute::attribute	file:
tags:axs10x_reset_driver	drivers/reset/reset-axs10x.c	/^builtin_platform_driver(axs10x_reset_driver);$/;"	v
tags:axs10x_reset_driver	drivers/reset/reset-axs10x.c	/^static struct platform_driver axs10x_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:axs10x_reset_dt_match	drivers/reset/reset-axs10x.c	/^static const struct of_device_id axs10x_reset_dt_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:axs10x_reset_ops	drivers/reset/reset-axs10x.c	/^static const struct reset_control_ops axs10x_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:axs10x_reset_probe	drivers/reset/reset-axs10x.c	/^static int axs10x_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:axs10x_reset_reset	drivers/reset/reset-axs10x.c	/^static int axs10x_reset_reset(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:axs10x_rst	drivers/reset/reset-axs10x.c	/^struct axs10x_rst {$/;"	s	file:
tags:b_show	samples/kobject/kset-example.c	/^static ssize_t b_show(struct foo_obj *foo_obj, struct foo_attribute *attr,$/;"	f	file:
tags:b_store	samples/kobject/kset-example.c	/^static ssize_t b_store(struct foo_obj *foo_obj, struct foo_attribute *attr,$/;"	f	file:
tags:bar	samples/kobject/kset-example.c	/^	int bar;$/;"	m	struct:foo_obj	file:
tags:bar_attribute	samples/kobject/kset-example.c	/^static struct foo_attribute bar_attribute =$/;"	v	typeref:struct:foo_attribute	file:
tags:bar_obj	samples/kobject/kset-example.c	/^static struct foo_obj *bar_obj;$/;"	v	typeref:struct:foo_obj	file:
tags:bas_gigaset-y	drivers/isdn/gigaset/Makefile	/^bas_gigaset-y := bas-gigaset.o isocdata.o$/;"	m
tags:base	drivers/reset/reset-ath79.c	/^	void __iomem *base;$/;"	m	struct:ath79_reset	file:
tags:base	drivers/reset/reset-lpc18xx.c	/^	void __iomem *base;$/;"	m	struct:lpc18xx_rgu_data	file:
tags:baz	samples/kobject/kset-example.c	/^	int baz;$/;"	m	struct:foo_obj	file:
tags:baz_attribute	samples/kobject/kset-example.c	/^static struct foo_attribute baz_attribute =$/;"	v	typeref:struct:foo_attribute	file:
tags:baz_obj	samples/kobject/kset-example.c	/^static struct foo_obj *baz_obj;$/;"	v	typeref:struct:foo_obj	file:
tags:berlin2_reset_probe	drivers/reset/reset-berlin.c	/^static int berlin2_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:berlin_reset_driver	drivers/reset/reset-berlin.c	/^builtin_platform_driver(berlin_reset_driver);$/;"	v
tags:berlin_reset_driver	drivers/reset/reset-berlin.c	/^static struct platform_driver berlin_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:berlin_reset_dt_match	drivers/reset/reset-berlin.c	/^static const struct of_device_id berlin_reset_dt_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:berlin_reset_ops	drivers/reset/reset-berlin.c	/^static const struct reset_control_ops berlin_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:berlin_reset_priv	drivers/reset/reset-berlin.c	/^struct berlin_reset_priv {$/;"	s	file:
tags:berlin_reset_reset	drivers/reset/reset-berlin.c	/^static int berlin_reset_reset(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:berlin_reset_xlate	drivers/reset/reset-berlin.c	/^static int berlin_reset_xlate(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:bit	drivers/reset/reset-imx7.c	/^	unsigned int offset, bit;$/;"	m	struct:imx7_src_signal	file:
tags:bit	drivers/reset/reset-uniphier.c	/^	unsigned int bit;$/;"	m	struct:uniphier_reset_data	file:
tags:cfg_num_rx_irqs	drivers/net/ethernet/emulex/benet/be.h	/^	u16 cfg_num_rx_irqs;		\/* configured via set-channels *\/$/;"	m	struct:be_adapter
tags:cfg_num_tx_irqs	drivers/net/ethernet/emulex/benet/be.h	/^	u16 cfg_num_tx_irqs;		\/* configured via set-channels *\/$/;"	m	struct:be_adapter
tags:channels	drivers/reset/sti/reset-syscfg.c	/^	struct syscfg_reset_channel *channels;$/;"	m	struct:syscfg_reset_controller	typeref:struct:syscfg_reset_controller::syscfg_reset_channel	file:
tags:channels	drivers/reset/sti/reset-syscfg.h	/^	const struct syscfg_reset_channel_data *channels;$/;"	m	struct:syscfg_reset_controller_data	typeref:struct:syscfg_reset_controller_data::syscfg_reset_channel_data
tags:check_alarmcount	tools/testing/selftests/timers/set-timer-lat.c	/^int check_alarmcount(int flags, int interval)$/;"	f
tags:check_timer_latency	tools/testing/selftests/timers/set-timer-lat.c	/^int check_timer_latency(int flags, int interval)$/;"	f
tags:clk_delay	drivers/reset/reset-lpc18xx.c	/^	struct clk *clk_delay;$/;"	m	struct:lpc18xx_rgu_data	typeref:struct:lpc18xx_rgu_data::clk	file:
tags:clk_reg	drivers/reset/reset-lpc18xx.c	/^	struct clk *clk_reg;$/;"	m	struct:lpc18xx_rgu_data	typeref:struct:lpc18xx_rgu_data::clk	file:
tags:clock_id	tools/testing/selftests/timers/set-timer-lat.c	/^int clock_id;$/;"	v
tags:clockstring	tools/testing/selftests/timers/set-timer-lat.c	/^char *clockstring(int clockid)$/;"	f
tags:compatible	drivers/reset/sti/reset-syscfg.h	/^	const char *compatible;$/;"	m	struct:syscfg_reset_channel_data
tags:con_id	include/linux/reset-controller.h	/^	const char *con_id;$/;"	m	struct:reset_control_lookup
tags:config_data	include/linux/ide.h	/^	unsigned long	config_data;	\/* for use by chipset-specific code *\/$/;"	m	struct:hwif_s
tags:controls	drivers/reset/reset-ti-syscon.c	/^	struct ti_syscon_reset_control *controls;$/;"	m	struct:ti_syscon_reset_data	typeref:struct:ti_syscon_reset_data::ti_syscon_reset_control	file:
tags:create_foo_obj	samples/kobject/kset-example.c	/^static struct foo_obj *create_foo_obj(const char *name)$/;"	f	file:
tags:data	drivers/reset/reset-uniphier.c	/^	const struct uniphier_reset_data *data;$/;"	m	struct:uniphier_reset_priv	typeref:struct:uniphier_reset_priv::uniphier_reset_data	file:
tags:deassert	include/linux/reset-controller.h	/^	int (*deassert)(struct reset_controller_dev *rcdev, unsigned long id);$/;"	m	struct:reset_control_ops
tags:deassert_bit	drivers/reset/reset-ti-syscon.c	/^	unsigned int deassert_bit;$/;"	m	struct:ti_syscon_reset_control	file:
tags:deassert_offset	drivers/reset/reset-ti-syscon.c	/^	unsigned int deassert_offset;$/;"	m	struct:ti_syscon_reset_control	file:
tags:delay_us	drivers/reset/reset-lpc18xx.c	/^	u32 delay_us;$/;"	m	struct:lpc18xx_rgu_data	file:
tags:desc	drivers/gpio/gpio-ich.c	/^	struct ichx_desc *desc;	\/* Pointer to chipset-specific description *\/$/;"	m	struct:__anon2638	typeref:struct:__anon2638::ichx_desc	file:
tags:describe_timer	tools/testing/selftests/timers/set-timer-lat.c	/^void describe_timer(int flags, int interval)$/;"	f
tags:destroy_foo_obj	samples/kobject/kset-example.c	/^static void destroy_foo_obj(struct foo_obj *foo)$/;"	f	file:
tags:dev	drivers/reset/reset-lantiq.c	/^	struct device *dev;$/;"	m	struct:lantiq_rcu_reset_priv	typeref:struct:lantiq_rcu_reset_priv::device	file:
tags:dev	drivers/reset/reset-ti-sci.c	/^	struct device *dev;$/;"	m	struct:ti_sci_reset_data	typeref:struct:ti_sci_reset_data::device	file:
tags:dev	drivers/reset/reset-uniphier.c	/^	struct device *dev;$/;"	m	struct:uniphier_reset_priv	typeref:struct:uniphier_reset_priv::device	file:
tags:dev	include/linux/reset-controller.h	/^	struct device *dev;$/;"	m	struct:reset_controller_dev	typeref:struct:reset_controller_dev::device
tags:dev_id	drivers/reset/reset-ti-sci.c	/^	u32 dev_id;$/;"	m	struct:ti_sci_reset_control	file:
tags:dev_id	include/linux/reset-controller.h	/^	const char *dev_id;$/;"	m	struct:reset_control_lookup
tags:do_tests	tools/testing/selftests/timers/set-2038.c	/^int do_tests(void)$/;"	f
tags:do_timer	tools/testing/selftests/timers/set-timer-lat.c	/^int do_timer(int clock_id, int flags)$/;"	f
tags:do_timer_oneshot	tools/testing/selftests/timers/set-timer-lat.c	/^int do_timer_oneshot(int clock_id, int flags)$/;"	f
tags:end_ca9_scu_l2_resume	arch/arm/mach-tegra/reset-handler.S	/^end_ca9_scu_l2_resume:$/;"	l
tags:end_ns	drivers/net/ethernet/sfc/ptp.c	/^	end_ns = timeset->host_end & MC_NANOSECOND_MASK;$/;"	m	struct:timeset	file:
tags:example_exit	samples/kobject/kset-example.c	/^module_exit(example_exit);$/;"	v
tags:example_exit	samples/kobject/kset-example.c	/^static void __exit example_exit(void)$/;"	f	file:
tags:example_init	samples/kobject/kset-example.c	/^module_init(example_init);$/;"	v
tags:example_init	samples/kobject/kset-example.c	/^static int __init example_init(void)$/;"	f	file:
tags:example_kset	samples/kobject/kset-example.c	/^static struct kset *example_kset;$/;"	v	typeref:struct:kset	file:
tags:flags	drivers/reset/reset-ti-syscon.c	/^	u32 flags;$/;"	m	struct:ti_syscon_reset_control	file:
tags:flags	drivers/reset/reset-uniphier.c	/^	unsigned int flags;$/;"	m	struct:uniphier_reset_data	file:
tags:foo	samples/kobject/kset-example.c	/^	int foo;$/;"	m	struct:foo_obj	file:
tags:foo_attr_show	samples/kobject/kset-example.c	/^static ssize_t foo_attr_show(struct kobject *kobj,$/;"	f	file:
tags:foo_attr_store	samples/kobject/kset-example.c	/^static ssize_t foo_attr_store(struct kobject *kobj,$/;"	f	file:
tags:foo_attribute	samples/kobject/kset-example.c	/^static struct foo_attribute foo_attribute =$/;"	v	typeref:struct:foo_attribute	file:
tags:foo_attribute	samples/kobject/kset-example.c	/^struct foo_attribute {$/;"	s	file:
tags:foo_default_attrs	samples/kobject/kset-example.c	/^static struct attribute *foo_default_attrs[] = {$/;"	v	typeref:struct:attribute	file:
tags:foo_ktype	samples/kobject/kset-example.c	/^static struct kobj_type foo_ktype = {$/;"	v	typeref:struct:kobj_type	file:
tags:foo_obj	samples/kobject/kset-example.c	/^static struct foo_obj *foo_obj;$/;"	v	typeref:struct:foo_obj	file:
tags:foo_obj	samples/kobject/kset-example.c	/^struct foo_obj {$/;"	s	file:
tags:foo_release	samples/kobject/kset-example.c	/^static void foo_release(struct kobject *kobj)$/;"	f	file:
tags:foo_show	samples/kobject/kset-example.c	/^static ssize_t foo_show(struct foo_obj *foo_obj, struct foo_attribute *attr,$/;"	f	file:
tags:foo_store	samples/kobject/kset-example.c	/^static ssize_t foo_store(struct foo_obj *foo_obj, struct foo_attribute *attr,$/;"	f	file:
tags:foo_sysfs_ops	samples/kobject/kset-example.c	/^static const struct sysfs_ops foo_sysfs_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
tags:get_tai	tools/testing/selftests/timers/set-tai.c	/^int get_tai(void)$/;"	f
tags:get_tz_dst	tools/testing/selftests/timers/set-tz.c	/^int get_tz_dst(void)$/;"	f
tags:get_tz_min	tools/testing/selftests/timers/set-tz.c	/^int get_tz_min(void)$/;"	f
tags:gigaset-y	drivers/isdn/gigaset/Makefile	/^gigaset-y := common.o interface.o proc.o ev-layer.o asyncdata.o$/;"	m
tags:globl	tools/perf/bench/mem-memset-x86-64-asm.S	/^#define globl p2align 4; .globl$/;"	d
tags:gpio_pinstate	drivers/gpu/drm/amd/include/atomfirmware.h	/^  uint8_t gpio_pinstate;         \/\/ Pin state showing how to set-up the pin$/;"	m	struct:atom_gpio_pin_control_pair
tags:hi	drivers/parport/parport_serial.c	/^		int hi; \/* -1 if not there, >6 for offset-method (max$/;"	m	struct:parport_pc_pci::__anon8351	file:
tags:hi3660_reset_assert	drivers/reset/hisilicon/reset-hi3660.c	/^static int hi3660_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:hi3660_reset_controller	drivers/reset/hisilicon/reset-hi3660.c	/^struct hi3660_reset_controller {$/;"	s	file:
tags:hi3660_reset_deassert	drivers/reset/hisilicon/reset-hi3660.c	/^static int hi3660_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:hi3660_reset_dev	drivers/reset/hisilicon/reset-hi3660.c	/^static int hi3660_reset_dev(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:hi3660_reset_driver	drivers/reset/hisilicon/reset-hi3660.c	/^static struct platform_driver hi3660_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:hi3660_reset_init	drivers/reset/hisilicon/reset-hi3660.c	/^arch_initcall(hi3660_reset_init);$/;"	v
tags:hi3660_reset_init	drivers/reset/hisilicon/reset-hi3660.c	/^static int __init hi3660_reset_init(void)$/;"	f	file:
tags:hi3660_reset_match	drivers/reset/hisilicon/reset-hi3660.c	/^static const struct of_device_id hi3660_reset_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:hi3660_reset_ops	drivers/reset/hisilicon/reset-hi3660.c	/^static struct reset_control_ops hi3660_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:hi3660_reset_probe	drivers/reset/hisilicon/reset-hi3660.c	/^static int hi3660_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:hi3660_reset_program_hw	drivers/reset/hisilicon/reset-hi3660.c	/^static int hi3660_reset_program_hw(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:hi3660_reset_xlate	drivers/reset/hisilicon/reset-hi3660.c	/^static int hi3660_reset_xlate(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:hsdk_reset_config	drivers/reset/reset-hsdk.c	/^static void hsdk_reset_config(struct hsdk_rst *rst, unsigned long id)$/;"	f	file:
tags:hsdk_reset_do	drivers/reset/reset-hsdk.c	/^static int hsdk_reset_do(struct hsdk_rst *rst)$/;"	f	file:
tags:hsdk_reset_driver	drivers/reset/reset-hsdk.c	/^builtin_platform_driver(hsdk_reset_driver);$/;"	v
tags:hsdk_reset_driver	drivers/reset/reset-hsdk.c	/^static struct platform_driver hsdk_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:hsdk_reset_dt_match	drivers/reset/reset-hsdk.c	/^static const struct of_device_id hsdk_reset_dt_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:hsdk_reset_ops	drivers/reset/reset-hsdk.c	/^static const struct reset_control_ops hsdk_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:hsdk_reset_probe	drivers/reset/reset-hsdk.c	/^static int hsdk_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:hsdk_reset_reset	drivers/reset/reset-hsdk.c	/^static int hsdk_reset_reset(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:hsdk_rst	drivers/reset/reset-hsdk.c	/^struct hsdk_rst {$/;"	s	file:
tags:id	drivers/reset/reset-uniphier.c	/^	unsigned int id;$/;"	m	struct:uniphier_reset_data	file:
tags:idr	drivers/reset/reset-ti-sci.c	/^	struct idr idr;$/;"	m	struct:ti_sci_reset_data	typeref:struct:ti_sci_reset_data::idr	file:
tags:imx7_reset_assert	drivers/reset/reset-imx7.c	/^static int imx7_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:imx7_reset_deassert	drivers/reset/reset-imx7.c	/^static int imx7_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:imx7_reset_driver	drivers/reset/reset-imx7.c	/^builtin_platform_driver(imx7_reset_driver);$/;"	v
tags:imx7_reset_driver	drivers/reset/reset-imx7.c	/^static struct platform_driver imx7_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:imx7_reset_dt_ids	drivers/reset/reset-imx7.c	/^static const struct of_device_id imx7_reset_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:imx7_reset_ops	drivers/reset/reset-imx7.c	/^static const struct reset_control_ops imx7_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:imx7_reset_probe	drivers/reset/reset-imx7.c	/^static int imx7_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:imx7_reset_set	drivers/reset/reset-imx7.c	/^static int imx7_reset_set(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:imx7_src	drivers/reset/reset-imx7.c	/^struct imx7_src {$/;"	s	file:
tags:imx7_src_registers	drivers/reset/reset-imx7.c	/^enum imx7_src_registers {$/;"	g	file:
tags:imx7_src_signal	drivers/reset/reset-imx7.c	/^struct imx7_src_signal {$/;"	s	file:
tags:imx7_src_signals	drivers/reset/reset-imx7.c	/^static const struct imx7_src_signal imx7_src_signals[IMX7_RESET_NUM] = {$/;"	v	typeref:struct:imx7_src_signal	file:
tags:index	include/linux/reset-controller.h	/^	unsigned int index;$/;"	m	struct:reset_control_lookup
tags:ip_set-y	net/netfilter/ipset/Makefile	/^ip_set-y := ip_set_core.o ip_set_getport.o pfxlen.o$/;"	m
tags:is32bits	tools/testing/selftests/timers/set-2038.c	/^int is32bits(void)$/;"	f
tags:iters_node	include/linux/cgroup.h	/^	struct list_head		iters_node;	\/* css_set->task_iters *\/$/;"	m	struct:css_task_iter	typeref:struct:css_task_iter::list_head
tags:kobj	samples/kobject/kset-example.c	/^	struct kobject kobj;$/;"	m	struct:foo_obj	typeref:struct:foo_obj::kobject	file:
tags:lantiq_rcu_reset_assert	drivers/reset/reset-lantiq.c	/^static int lantiq_rcu_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lantiq_rcu_reset_deassert	drivers/reset/reset-lantiq.c	/^static int lantiq_rcu_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lantiq_rcu_reset_driver	drivers/reset/reset-lantiq.c	/^module_platform_driver(lantiq_rcu_reset_driver);$/;"	v
tags:lantiq_rcu_reset_driver	drivers/reset/reset-lantiq.c	/^static struct platform_driver lantiq_rcu_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:lantiq_rcu_reset_dt_ids	drivers/reset/reset-lantiq.c	/^static const struct of_device_id lantiq_rcu_reset_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:lantiq_rcu_reset_of_parse	drivers/reset/reset-lantiq.c	/^static int lantiq_rcu_reset_of_parse(struct platform_device *pdev,$/;"	f	file:
tags:lantiq_rcu_reset_ops	drivers/reset/reset-lantiq.c	/^static const struct reset_control_ops lantiq_rcu_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:lantiq_rcu_reset_priv	drivers/reset/reset-lantiq.c	/^struct lantiq_rcu_reset_priv {$/;"	s	file:
tags:lantiq_rcu_reset_probe	drivers/reset/reset-lantiq.c	/^static int lantiq_rcu_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:lantiq_rcu_reset_reset	drivers/reset/reset-lantiq.c	/^static int lantiq_rcu_reset_reset(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lantiq_rcu_reset_status	drivers/reset/reset-lantiq.c	/^static int lantiq_rcu_reset_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lantiq_rcu_reset_status_timeout	drivers/reset/reset-lantiq.c	/^static int lantiq_rcu_reset_status_timeout(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lantiq_rcu_reset_update	drivers/reset/reset-lantiq.c	/^static int lantiq_rcu_reset_update(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lantiq_rcu_reset_xlate	drivers/reset/reset-lantiq.c	/^static int lantiq_rcu_reset_xlate(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:list	include/linux/reset-controller.h	/^	struct list_head list;$/;"	m	struct:reset_control_lookup	typeref:struct:reset_control_lookup::list_head
tags:list	include/linux/reset-controller.h	/^	struct list_head list;$/;"	m	struct:reset_controller_dev	typeref:struct:reset_controller_dev::list_head
tags:lock	drivers/reset/reset-ath79.c	/^	spinlock_t lock;$/;"	m	struct:ath79_reset	file:
tags:lock	drivers/reset/reset-axs10x.c	/^	spinlock_t			lock;$/;"	m	struct:axs10x_rst	file:
tags:lock	drivers/reset/reset-hsdk.c	/^	spinlock_t			lock;$/;"	m	struct:hsdk_rst	file:
tags:lock	drivers/reset/reset-lpc18xx.c	/^	spinlock_t lock;$/;"	m	struct:lpc18xx_rgu_data	file:
tags:lock	drivers/reset/reset-meson.c	/^	spinlock_t lock;$/;"	m	struct:meson_reset	file:
tags:lock	drivers/reset/reset-simple.h	/^	spinlock_t			lock;$/;"	m	struct:reset_simple_data
tags:lock	drivers/reset/reset-ti-sci.c	/^	struct mutex lock;$/;"	m	struct:ti_sci_reset_control	typeref:struct:ti_sci_reset_control::mutex	file:
tags:long_name_offset	fs/exofs/common.h	/^	__le64	long_name_offset;	\/* If !0 then offset-in-file *\/$/;"	m	struct:exofs_dt_device_info
tags:lpc18xx_rgu_assert	drivers/reset/reset-lpc18xx.c	/^static int lpc18xx_rgu_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lpc18xx_rgu_data	drivers/reset/reset-lpc18xx.c	/^struct lpc18xx_rgu_data {$/;"	s	file:
tags:lpc18xx_rgu_deassert	drivers/reset/reset-lpc18xx.c	/^static int lpc18xx_rgu_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lpc18xx_rgu_driver	drivers/reset/reset-lpc18xx.c	/^builtin_platform_driver(lpc18xx_rgu_driver);$/;"	v
tags:lpc18xx_rgu_driver	drivers/reset/reset-lpc18xx.c	/^static struct platform_driver lpc18xx_rgu_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:lpc18xx_rgu_match	drivers/reset/reset-lpc18xx.c	/^static const struct of_device_id lpc18xx_rgu_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:lpc18xx_rgu_ops	drivers/reset/reset-lpc18xx.c	/^static const struct reset_control_ops lpc18xx_rgu_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:lpc18xx_rgu_probe	drivers/reset/reset-lpc18xx.c	/^static int lpc18xx_rgu_probe(struct platform_device *pdev)$/;"	f	file:
tags:lpc18xx_rgu_reset	drivers/reset/reset-lpc18xx.c	/^static int lpc18xx_rgu_reset(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lpc18xx_rgu_restart	drivers/reset/reset-lpc18xx.c	/^static int lpc18xx_rgu_restart(struct notifier_block *nb, unsigned long mode,$/;"	f	file:
tags:lpc18xx_rgu_setclear_reset	drivers/reset/reset-lpc18xx.c	/^static int lpc18xx_rgu_setclear_reset(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:lpc18xx_rgu_status	drivers/reset/reset-lpc18xx.c	/^static int lpc18xx_rgu_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:main	tools/testing/selftests/timers/set-2038.c	/^int main(int argc, char *argv[])$/;"	f
tags:main	tools/testing/selftests/timers/set-tai.c	/^int main(int argc, char **argv)$/;"	f
tags:main	tools/testing/selftests/timers/set-timer-lat.c	/^int main(void)$/;"	f
tags:main	tools/testing/selftests/timers/set-tz.c	/^int main(int argc, char **argv)$/;"	f
tags:map	drivers/reset/hisilicon/reset-hi3660.c	/^	struct regmap *map;$/;"	m	struct:hi3660_reset_controller	typeref:struct:hi3660_reset_controller::regmap	file:
tags:max_latency_ns	tools/testing/selftests/timers/set-timer-lat.c	/^long long max_latency_ns;$/;"	v
tags:membase	drivers/reset/reset-simple.h	/^	void __iomem			*membase;$/;"	m	struct:reset_simple_data
tags:membase	drivers/reset/reset-stm32mp1.c	/^	void __iomem			*membase;$/;"	m	struct:stm32_reset_data	file:
tags:memset	tools/perf/bench/mem-memset-x86-64-asm.S	/^#define memset MEMSET \/* don't hide glibc's memset() *\/$/;"	d
tags:memset-y	arch/sh/lib/Makefile	/^memset-y			:= memset.o$/;"	m
tags:meson_reset	drivers/reset/reset-meson.c	/^struct meson_reset {$/;"	s	file:
tags:meson_reset_assert	drivers/reset/reset-meson.c	/^static int meson_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:meson_reset_deassert	drivers/reset/reset-meson.c	/^static int meson_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:meson_reset_driver	drivers/reset/reset-meson.c	/^builtin_platform_driver(meson_reset_driver);$/;"	v
tags:meson_reset_driver	drivers/reset/reset-meson.c	/^static struct platform_driver meson_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:meson_reset_dt_ids	drivers/reset/reset-meson.c	/^static const struct of_device_id meson_reset_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:meson_reset_level	drivers/reset/reset-meson.c	/^static int meson_reset_level(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:meson_reset_ops	drivers/reset/reset-meson.c	/^static const struct reset_control_ops meson_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:meson_reset_probe	drivers/reset/reset-meson.c	/^static int meson_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:meson_reset_reset	drivers/reset/reset-meson.c	/^static int meson_reset_reset(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:multiout	sound/pci/hda/hda_generic.h	/^	struct hda_multi_out multiout;	\/* playback set-up$/;"	m	struct:hda_gen_spec	typeref:struct:hda_gen_spec::hda_multi_out
tags:nf_tables_set-objs	net/netfilter/Makefile	/^nf_tables_set-objs := nf_tables_set_core.o \\$/;"	m
tags:nr_channels	drivers/reset/sti/reset-syscfg.h	/^	int nr_channels;$/;"	m	struct:syscfg_reset_controller_data
tags:nr_controls	drivers/reset/reset-ti-syscon.c	/^	unsigned int nr_controls;$/;"	m	struct:ti_syscon_reset_data	file:
tags:nr_resets	drivers/reset/reset-simple.c	/^	u32 nr_resets;$/;"	m	struct:reset_simple_devdata	file:
tags:nr_resets	include/linux/reset-controller.h	/^	unsigned int nr_resets;$/;"	m	struct:reset_controller_dev
tags:of_node	include/linux/reset-controller.h	/^	struct device_node *of_node;$/;"	m	struct:reset_controller_dev	typeref:struct:reset_controller_dev::device_node
tags:of_reset_n_cells	include/linux/reset-controller.h	/^	int of_reset_n_cells;$/;"	m	struct:reset_controller_dev
tags:of_xlate	include/linux/reset-controller.h	/^	int (*of_xlate)(struct reset_controller_dev *rcdev,$/;"	m	struct:reset_controller_dev
tags:offset	drivers/reset/reset-imx7.c	/^	unsigned int offset, bit;$/;"	m	struct:imx7_src_signal	file:
tags:offset	drivers/reset/reset-zynq.c	/^	u32 offset;$/;"	m	struct:zynq_reset_data	file:
tags:ops	include/linux/reset-controller.h	/^	const struct reset_control_ops *ops;$/;"	m	struct:reset_controller_dev	typeref:struct:reset_controller_dev::reset_control_ops
tags:owner	include/linux/reset-controller.h	/^	struct module *owner;$/;"	m	struct:reset_controller_dev	typeref:struct:reset_controller_dev::module
tags:oxnas_reset	drivers/reset/reset-oxnas.c	/^struct oxnas_reset {$/;"	s	file:
tags:oxnas_reset_assert	drivers/reset/reset-oxnas.c	/^static int oxnas_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:oxnas_reset_deassert	drivers/reset/reset-oxnas.c	/^static int oxnas_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:oxnas_reset_driver	drivers/reset/reset-oxnas.c	/^builtin_platform_driver(oxnas_reset_driver);$/;"	v
tags:oxnas_reset_driver	drivers/reset/reset-oxnas.c	/^static struct platform_driver oxnas_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:oxnas_reset_dt_ids	drivers/reset/reset-oxnas.c	/^static const struct of_device_id oxnas_reset_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:oxnas_reset_ops	drivers/reset/reset-oxnas.c	/^static const struct reset_control_ops oxnas_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:oxnas_reset_probe	drivers/reset/reset-oxnas.c	/^static int oxnas_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:oxnas_reset_reset	drivers/reset/reset-oxnas.c	/^static int oxnas_reset_reset(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:periph_regs	drivers/reset/reset-pistachio.c	/^	struct regmap			*periph_regs;$/;"	m	struct:pistachio_reset_data	typeref:struct:pistachio_reset_data::regmap	file:
tags:pistachio_reset_assert	drivers/reset/reset-pistachio.c	/^static int pistachio_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:pistachio_reset_data	drivers/reset/reset-pistachio.c	/^struct pistachio_reset_data {$/;"	s	file:
tags:pistachio_reset_deassert	drivers/reset/reset-pistachio.c	/^static int pistachio_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:pistachio_reset_driver	drivers/reset/reset-pistachio.c	/^builtin_platform_driver(pistachio_reset_driver);$/;"	v
tags:pistachio_reset_driver	drivers/reset/reset-pistachio.c	/^static struct platform_driver pistachio_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:pistachio_reset_dt_ids	drivers/reset/reset-pistachio.c	/^static const struct of_device_id pistachio_reset_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:pistachio_reset_ops	drivers/reset/reset-pistachio.c	/^static const struct reset_control_ops pistachio_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:pistachio_reset_probe	drivers/reset/reset-pistachio.c	/^static int pistachio_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:pistachio_reset_shift	drivers/reset/reset-pistachio.c	/^static inline int pistachio_reset_shift(unsigned long id)$/;"	f	file:
tags:provider	include/linux/reset-controller.h	/^	const char *provider;$/;"	m	struct:reset_control_lookup
tags:rcdev	drivers/reset/reset-a10sr.c	/^	struct reset_controller_dev     rcdev;$/;"	m	struct:a10sr_reset	typeref:struct:a10sr_reset::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-ath79.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:ath79_reset	typeref:struct:ath79_reset::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-axs10x.c	/^	struct reset_controller_dev	rcdev;$/;"	m	struct:axs10x_rst	typeref:struct:axs10x_rst::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-berlin.c	/^	struct reset_controller_dev	rcdev;$/;"	m	struct:berlin_reset_priv	typeref:struct:berlin_reset_priv::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-hsdk.c	/^	struct reset_controller_dev	rcdev;$/;"	m	struct:hsdk_rst	typeref:struct:hsdk_rst::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-imx7.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:imx7_src	typeref:struct:imx7_src::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-lantiq.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:lantiq_rcu_reset_priv	typeref:struct:lantiq_rcu_reset_priv::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-lpc18xx.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:lpc18xx_rgu_data	typeref:struct:lpc18xx_rgu_data::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-meson.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:meson_reset	typeref:struct:meson_reset::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-oxnas.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:oxnas_reset	typeref:struct:oxnas_reset::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-pistachio.c	/^	struct reset_controller_dev	rcdev;$/;"	m	struct:pistachio_reset_data	typeref:struct:pistachio_reset_data::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-simple.h	/^	struct reset_controller_dev	rcdev;$/;"	m	struct:reset_simple_data	typeref:struct:reset_simple_data::reset_controller_dev
tags:rcdev	drivers/reset/reset-stm32mp1.c	/^	struct reset_controller_dev	rcdev;$/;"	m	struct:stm32_reset_data	typeref:struct:stm32_reset_data::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-ti-sci.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:ti_sci_reset_data	typeref:struct:ti_sci_reset_data::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-ti-syscon.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:ti_syscon_reset_data	typeref:struct:ti_syscon_reset_data::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-uniphier.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:uniphier_reset_priv	typeref:struct:uniphier_reset_priv::reset_controller_dev	file:
tags:rcdev	drivers/reset/reset-zynq.c	/^	struct reset_controller_dev rcdev;$/;"	m	struct:zynq_reset_data	typeref:struct:zynq_reset_data::reset_controller_dev	file:
tags:reg	drivers/reset/reset-uniphier.c	/^	unsigned int reg;$/;"	m	struct:uniphier_reset_data	file:
tags:reg_base	drivers/reset/reset-meson.c	/^	void __iomem *reg_base;$/;"	m	struct:meson_reset	file:
tags:reg_offset	drivers/reset/reset-simple.c	/^	u32 reg_offset;$/;"	m	struct:reset_simple_devdata	file:
tags:regmap	drivers/reset/reset-a10sr.c	/^	struct regmap *regmap;$/;"	m	struct:a10sr_reset	typeref:struct:a10sr_reset::regmap	file:
tags:regmap	drivers/reset/reset-berlin.c	/^	struct regmap			*regmap;$/;"	m	struct:berlin_reset_priv	typeref:struct:berlin_reset_priv::regmap	file:
tags:regmap	drivers/reset/reset-imx7.c	/^	struct regmap *regmap;$/;"	m	struct:imx7_src	typeref:struct:imx7_src::regmap	file:
tags:regmap	drivers/reset/reset-lantiq.c	/^	struct regmap *regmap;$/;"	m	struct:lantiq_rcu_reset_priv	typeref:struct:lantiq_rcu_reset_priv::regmap	file:
tags:regmap	drivers/reset/reset-oxnas.c	/^	struct regmap *regmap;$/;"	m	struct:oxnas_reset	typeref:struct:oxnas_reset::regmap	file:
tags:regmap	drivers/reset/reset-ti-syscon.c	/^	struct regmap *regmap;$/;"	m	struct:ti_syscon_reset_data	typeref:struct:ti_syscon_reset_data::regmap	file:
tags:regmap	drivers/reset/reset-uniphier.c	/^	struct regmap *regmap;$/;"	m	struct:uniphier_reset_priv	typeref:struct:uniphier_reset_priv::regmap	file:
tags:regs_ctl	drivers/reset/reset-hsdk.c	/^	void __iomem			*regs_ctl;$/;"	m	struct:hsdk_rst	file:
tags:regs_rst	drivers/reset/reset-axs10x.c	/^	void __iomem			*regs_rst;$/;"	m	struct:axs10x_rst	file:
tags:regs_rst	drivers/reset/reset-hsdk.c	/^	void __iomem			*regs_rst;$/;"	m	struct:hsdk_rst	file:
tags:reset	drivers/reset/sti/reset-syscfg.c	/^	struct regmap_field *reset;$/;"	m	struct:syscfg_reset_channel	typeref:struct:syscfg_reset_channel::regmap_field	file:
tags:reset	drivers/reset/sti/reset-syscfg.h	/^	struct reg_field reset;$/;"	m	struct:syscfg_reset_channel_data	typeref:struct:syscfg_reset_channel_data::reg_field
tags:reset	include/linux/reset-controller.h	/^	int (*reset)(struct reset_controller_dev *rcdev, unsigned long id);$/;"	m	struct:reset_control_ops
tags:reset_control_head	include/linux/reset-controller.h	/^	struct list_head reset_control_head;$/;"	m	struct:reset_controller_dev	typeref:struct:reset_controller_dev::list_head
tags:reset_control_lookup	include/linux/reset-controller.h	/^struct reset_control_lookup {$/;"	s
tags:reset_control_ops	include/linux/reset-controller.h	/^struct reset_control_ops {$/;"	s
tags:reset_controller_dev	include/linux/reset-controller.h	/^struct reset_controller_dev {$/;"	s
tags:reset_mask	drivers/reset/reset-ti-sci.c	/^	u32 reset_mask;$/;"	m	struct:ti_sci_reset_control	file:
tags:reset_offset	drivers/reset/reset-lantiq.c	/^	u32 reset_offset;$/;"	m	struct:lantiq_rcu_reset_priv	file:
tags:reset_simple_active_low	drivers/reset/reset-simple.c	/^static const struct reset_simple_devdata reset_simple_active_low = {$/;"	v	typeref:struct:reset_simple_devdata	file:
tags:reset_simple_assert	drivers/reset/reset-simple.c	/^static int reset_simple_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:reset_simple_data	drivers/reset/reset-simple.h	/^struct reset_simple_data {$/;"	s
tags:reset_simple_deassert	drivers/reset/reset-simple.c	/^static int reset_simple_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:reset_simple_devdata	drivers/reset/reset-simple.c	/^struct reset_simple_devdata {$/;"	s	file:
tags:reset_simple_driver	drivers/reset/reset-simple.c	/^builtin_platform_driver(reset_simple_driver);$/;"	v
tags:reset_simple_driver	drivers/reset/reset-simple.c	/^static struct platform_driver reset_simple_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:reset_simple_dt_ids	drivers/reset/reset-simple.c	/^static const struct of_device_id reset_simple_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:reset_simple_ops	drivers/reset/reset-simple.c	/^const struct reset_control_ops reset_simple_ops = {$/;"	v	typeref:struct:reset_control_ops
tags:reset_simple_probe	drivers/reset/reset-simple.c	/^static int reset_simple_probe(struct platform_device *pdev)$/;"	f	file:
tags:reset_simple_socfpga	drivers/reset/reset-simple.c	/^static const struct reset_simple_devdata reset_simple_socfpga = {$/;"	v	typeref:struct:reset_simple_devdata	file:
tags:reset_simple_status	drivers/reset/reset-simple.c	/^static int reset_simple_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:reset_simple_update	drivers/reset/reset-simple.c	/^static int reset_simple_update(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:restart_nb	drivers/reset/reset-ath79.c	/^	struct notifier_block restart_nb;$/;"	m	struct:ath79_reset	typeref:struct:ath79_reset::notifier_block	file:
tags:restart_nb	drivers/reset/reset-lpc18xx.c	/^	struct notifier_block restart_nb;$/;"	m	struct:lpc18xx_rgu_data	typeref:struct:lpc18xx_rgu_data::notifier_block	file:
tags:rst	drivers/reset/hisilicon/reset-hi3660.c	/^	struct reset_controller_dev rst;$/;"	m	struct:hi3660_reset_controller	typeref:struct:hi3660_reset_controller::reset_controller_dev	file:
tags:rst	drivers/reset/sti/reset-syscfg.c	/^	struct reset_controller_dev rst;$/;"	m	struct:syscfg_reset_controller	typeref:struct:syscfg_reset_controller::reset_controller_dev	file:
tags:rst_map	drivers/reset/reset-hsdk.c	/^static const u32 rst_map[] = {$/;"	v	file:
tags:sci	drivers/reset/reset-ti-sci.c	/^	const struct ti_sci_handle *sci;$/;"	m	struct:ti_sci_reset_data	typeref:struct:ti_sci_reset_data::ti_sci_handle	file:
tags:select_data	include/linux/ide.h	/^	unsigned long	select_data;	\/* for use by chipset-specific code *\/$/;"	m	struct:hwif_s
tags:ser_gigaset-y	drivers/isdn/gigaset/Makefile	/^ser_gigaset-y := ser-gigaset.o$/;"	m
tags:set_tai	tools/testing/selftests/timers/set-tai.c	/^int set_tai(int offset)$/;"	f
tags:set_tz	tools/testing/selftests/timers/set-tz.c	/^int set_tz(int min, int dst)$/;"	f
tags:settime	tools/testing/selftests/timers/set-2038.c	/^int settime(long long time)$/;"	f
tags:setup_timer	tools/testing/selftests/timers/set-timer-lat.c	/^int setup_timer(int clock_id, int flags, int interval, timer_t *tm1)$/;"	f
tags:show	samples/kobject/kset-example.c	/^	ssize_t (*show)(struct foo_obj *foo, struct foo_attribute *attr, char *buf);$/;"	m	struct:foo_attribute	file:
tags:sigalarm	tools/testing/selftests/timers/set-timer-lat.c	/^void sigalarm(int signo)$/;"	f
tags:slcr	drivers/reset/reset-zynq.c	/^	struct regmap *slcr;$/;"	m	struct:zynq_reset_data	typeref:struct:zynq_reset_data::regmap	file:
tags:start_ns	drivers/net/ethernet/sfc/ptp.c	/^	start_ns = timeset->host_start & MC_NANOSECOND_MASK;$/;"	m	struct:timeset	file:
tags:start_time	tools/testing/selftests/timers/set-timer-lat.c	/^struct timespec start_time;$/;"	v	typeref:struct:timespec
tags:status	include/linux/reset-controller.h	/^	int (*status)(struct reset_controller_dev *rcdev, unsigned long id);$/;"	m	struct:reset_control_ops
tags:status_active_low	drivers/reset/reset-simple.c	/^	bool status_active_low;$/;"	m	struct:reset_simple_devdata	file:
tags:status_active_low	drivers/reset/reset-simple.h	/^	bool				status_active_low;$/;"	m	struct:reset_simple_data
tags:status_bit	drivers/reset/reset-ti-syscon.c	/^	unsigned int status_bit;$/;"	m	struct:ti_syscon_reset_control	file:
tags:status_offset	drivers/reset/reset-lantiq.c	/^	u32 status_offset;$/;"	m	struct:lantiq_rcu_reset_priv	file:
tags:status_offset	drivers/reset/reset-ti-syscon.c	/^	unsigned int status_offset;$/;"	m	struct:ti_syscon_reset_control	file:
tags:stih407_core	drivers/reset/sti/reset-stih407.c	/^static const char stih407_core[] = "st,stih407-core-syscfg";$/;"	v	file:
tags:stih407_lpm	drivers/reset/sti/reset-stih407.c	/^static const char stih407_lpm[] = "st,stih407-lpm-syscfg";$/;"	v	file:
tags:stih407_picophyreset_controller	drivers/reset/sti/reset-stih407.c	/^static const struct syscfg_reset_controller_data stih407_picophyreset_controller = {$/;"	v	typeref:struct:syscfg_reset_controller_data	file:
tags:stih407_picophyresets	drivers/reset/sti/reset-stih407.c	/^static const struct syscfg_reset_channel_data stih407_picophyresets[] = {$/;"	v	typeref:struct:syscfg_reset_channel_data	file:
tags:stih407_powerdown_controller	drivers/reset/sti/reset-stih407.c	/^static const struct syscfg_reset_controller_data stih407_powerdown_controller = {$/;"	v	typeref:struct:syscfg_reset_controller_data	file:
tags:stih407_powerdowns	drivers/reset/sti/reset-stih407.c	/^static const struct syscfg_reset_channel_data stih407_powerdowns[] = {$/;"	v	typeref:struct:syscfg_reset_channel_data	file:
tags:stih407_reset_driver	drivers/reset/sti/reset-stih407.c	/^static struct platform_driver stih407_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:stih407_reset_init	drivers/reset/sti/reset-stih407.c	/^arch_initcall(stih407_reset_init);$/;"	v
tags:stih407_reset_init	drivers/reset/sti/reset-stih407.c	/^static int __init stih407_reset_init(void)$/;"	f	file:
tags:stih407_reset_match	drivers/reset/sti/reset-stih407.c	/^static const struct of_device_id stih407_reset_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:stih407_sbc_reg	drivers/reset/sti/reset-stih407.c	/^static const char stih407_sbc_reg[] = "st,stih407-sbc-reg-syscfg";$/;"	v	file:
tags:stih407_softreset_controller	drivers/reset/sti/reset-stih407.c	/^static const struct syscfg_reset_controller_data stih407_softreset_controller = {$/;"	v	typeref:struct:syscfg_reset_controller_data	file:
tags:stih407_softresets	drivers/reset/sti/reset-stih407.c	/^static const struct syscfg_reset_channel_data stih407_softresets[] = {$/;"	v	typeref:struct:syscfg_reset_channel_data	file:
tags:stm32_reset_assert	drivers/reset/reset-stm32mp1.c	/^static int stm32_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:stm32_reset_data	drivers/reset/reset-stm32mp1.c	/^struct stm32_reset_data {$/;"	s	file:
tags:stm32_reset_deassert	drivers/reset/reset-stm32mp1.c	/^static int stm32_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:stm32_reset_driver	drivers/reset/reset-stm32mp1.c	/^builtin_platform_driver(stm32_reset_driver);$/;"	v
tags:stm32_reset_driver	drivers/reset/reset-stm32mp1.c	/^static struct platform_driver stm32_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:stm32_reset_dt_ids	drivers/reset/reset-stm32mp1.c	/^static const struct of_device_id stm32_reset_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:stm32_reset_ops	drivers/reset/reset-stm32mp1.c	/^static const struct reset_control_ops stm32_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:stm32_reset_probe	drivers/reset/reset-stm32mp1.c	/^static int stm32_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:stm32_reset_status	drivers/reset/reset-stm32mp1.c	/^static int stm32_reset_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:stm32_reset_update	drivers/reset/reset-stm32mp1.c	/^static int stm32_reset_update(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:store	samples/kobject/kset-example.c	/^	ssize_t (*store)(struct foo_obj *foo, struct foo_attribute *attr, const char *buf, size_t count);$/;"	m	struct:foo_attribute	file:
tags:sun6i_reset_init	drivers/reset/reset-sunxi.c	/^void __init sun6i_reset_init(void)$/;"	f
tags:sunxi_reset_init	drivers/reset/reset-sunxi.c	/^static int sunxi_reset_init(struct device_node *np)$/;"	f	file:
tags:syscfg_reset_assert	drivers/reset/sti/reset-syscfg.c	/^static int syscfg_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:syscfg_reset_channel	drivers/reset/sti/reset-syscfg.c	/^struct syscfg_reset_channel {$/;"	s	file:
tags:syscfg_reset_channel_data	drivers/reset/sti/reset-syscfg.h	/^struct syscfg_reset_channel_data {$/;"	s
tags:syscfg_reset_controller	drivers/reset/sti/reset-syscfg.c	/^struct syscfg_reset_controller {$/;"	s	file:
tags:syscfg_reset_controller_data	drivers/reset/sti/reset-syscfg.h	/^struct syscfg_reset_controller_data {$/;"	s
tags:syscfg_reset_controller_register	drivers/reset/sti/reset-syscfg.c	/^static int syscfg_reset_controller_register(struct device *dev,$/;"	f	file:
tags:syscfg_reset_deassert	drivers/reset/sti/reset-syscfg.c	/^static int syscfg_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:syscfg_reset_dev	drivers/reset/sti/reset-syscfg.c	/^static int syscfg_reset_dev(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:syscfg_reset_ops	drivers/reset/sti/reset-syscfg.c	/^static const struct reset_control_ops syscfg_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:syscfg_reset_probe	drivers/reset/sti/reset-syscfg.c	/^int syscfg_reset_probe(struct platform_device *pdev)$/;"	f
tags:syscfg_reset_program_hw	drivers/reset/sti/reset-syscfg.c	/^static int syscfg_reset_program_hw(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:syscfg_reset_status	drivers/reset/sti/reset-syscfg.c	/^static int syscfg_reset_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:t20_check	arch/arm/mach-tegra/reset-handler.S	/^t20_check:$/;"	l
tags:t20_errata	arch/arm/mach-tegra/reset-handler.S	/^t20_errata:$/;"	l
tags:t30_check	arch/arm/mach-tegra/reset-handler.S	/^t30_check:$/;"	l
tags:t30_errata	arch/arm/mach-tegra/reset-handler.S	/^t30_errata:$/;"	l
tags:tegra_bpmp_init_resets	drivers/reset/tegra/reset-bpmp.c	/^int tegra_bpmp_init_resets(struct tegra_bpmp *bpmp)$/;"	f
tags:tegra_bpmp_reset_assert	drivers/reset/tegra/reset-bpmp.c	/^static int tegra_bpmp_reset_assert(struct reset_controller_dev *rstc,$/;"	f	file:
tags:tegra_bpmp_reset_common	drivers/reset/tegra/reset-bpmp.c	/^static int tegra_bpmp_reset_common(struct reset_controller_dev *rstc,$/;"	f	file:
tags:tegra_bpmp_reset_deassert	drivers/reset/tegra/reset-bpmp.c	/^static int tegra_bpmp_reset_deassert(struct reset_controller_dev *rstc,$/;"	f	file:
tags:tegra_bpmp_reset_module	drivers/reset/tegra/reset-bpmp.c	/^static int tegra_bpmp_reset_module(struct reset_controller_dev *rstc,$/;"	f	file:
tags:tegra_bpmp_reset_ops	drivers/reset/tegra/reset-bpmp.c	/^static const struct reset_control_ops tegra_bpmp_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:test-drm_modeset-y	drivers/gpu/drm/selftests/Makefile	/^test-drm_modeset-y := test-drm_modeset_common.o test-drm_plane_helper.o \\$/;"	m
tags:ti_sci_reset_assert	drivers/reset/reset-ti-sci.c	/^static int ti_sci_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ti_sci_reset_control	drivers/reset/reset-ti-sci.c	/^struct ti_sci_reset_control {$/;"	s	file:
tags:ti_sci_reset_data	drivers/reset/reset-ti-sci.c	/^struct ti_sci_reset_data {$/;"	s	file:
tags:ti_sci_reset_deassert	drivers/reset/reset-ti-sci.c	/^static int ti_sci_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ti_sci_reset_driver	drivers/reset/reset-ti-sci.c	/^module_platform_driver(ti_sci_reset_driver);$/;"	v
tags:ti_sci_reset_driver	drivers/reset/reset-ti-sci.c	/^static struct platform_driver ti_sci_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:ti_sci_reset_of_match	drivers/reset/reset-ti-sci.c	/^static const struct of_device_id ti_sci_reset_of_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:ti_sci_reset_of_xlate	drivers/reset/reset-ti-sci.c	/^static int ti_sci_reset_of_xlate(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ti_sci_reset_ops	drivers/reset/reset-ti-sci.c	/^static const struct reset_control_ops ti_sci_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:ti_sci_reset_probe	drivers/reset/reset-ti-sci.c	/^static int ti_sci_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:ti_sci_reset_remove	drivers/reset/reset-ti-sci.c	/^static int ti_sci_reset_remove(struct platform_device *pdev)$/;"	f	file:
tags:ti_sci_reset_set	drivers/reset/reset-ti-sci.c	/^static int ti_sci_reset_set(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ti_sci_reset_status	drivers/reset/reset-ti-sci.c	/^static int ti_sci_reset_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ti_syscon_reset_assert	drivers/reset/reset-ti-syscon.c	/^static int ti_syscon_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ti_syscon_reset_control	drivers/reset/reset-ti-syscon.c	/^struct ti_syscon_reset_control {$/;"	s	file:
tags:ti_syscon_reset_data	drivers/reset/reset-ti-syscon.c	/^struct ti_syscon_reset_data {$/;"	s	file:
tags:ti_syscon_reset_deassert	drivers/reset/reset-ti-syscon.c	/^static int ti_syscon_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:ti_syscon_reset_driver	drivers/reset/reset-ti-syscon.c	/^module_platform_driver(ti_syscon_reset_driver);$/;"	v
tags:ti_syscon_reset_driver	drivers/reset/reset-ti-syscon.c	/^static struct platform_driver ti_syscon_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:ti_syscon_reset_of_match	drivers/reset/reset-ti-syscon.c	/^static const struct of_device_id ti_syscon_reset_of_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:ti_syscon_reset_ops	drivers/reset/reset-ti-syscon.c	/^static const struct reset_control_ops ti_syscon_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:ti_syscon_reset_probe	drivers/reset/reset-ti-syscon.c	/^static int ti_syscon_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:ti_syscon_reset_status	drivers/reset/reset-ti-syscon.c	/^static int ti_syscon_reset_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:timer_fired_early	tools/testing/selftests/timers/set-timer-lat.c	/^int timer_fired_early;$/;"	v
tags:timespec_sub	tools/testing/selftests/timers/set-timer-lat.c	/^long long timespec_sub(struct timespec a, struct timespec b)$/;"	f
tags:to_a10sr_rst	drivers/reset/reset-a10sr.c	/^static inline struct a10sr_reset *to_a10sr_rst(struct reset_controller_dev *rc)$/;"	f	file:
tags:to_axs10x_rst	drivers/reset/reset-axs10x.c	16;"	d	file:
tags:to_berlin_reset_priv	drivers/reset/reset-berlin.c	28;"	d	file:
tags:to_foo_attr	samples/kobject/kset-example.c	43;"	d	file:
tags:to_foo_obj	samples/kobject/kset-example.c	35;"	d	file:
tags:to_hi3660_reset_controller	drivers/reset/hisilicon/reset-hi3660.c	23;"	d	file:
tags:to_hsdk_rst	drivers/reset/reset-hsdk.c	21;"	d	file:
tags:to_imx7_src	drivers/reset/reset-imx7.c	/^static struct imx7_src *to_imx7_src(struct reset_controller_dev *rcdev)$/;"	f	file:
tags:to_lantiq_rcu_reset_priv	drivers/reset/reset-lantiq.c	/^static struct lantiq_rcu_reset_priv *to_lantiq_rcu_reset_priv($/;"	f	file:
tags:to_reset_simple_data	drivers/reset/reset-simple.c	/^to_reset_simple_data(struct reset_controller_dev *rcdev)$/;"	f	file:
tags:to_rgu_data	drivers/reset/reset-lpc18xx.c	46;"	d	file:
tags:to_stm32_reset_data	drivers/reset/reset-stm32mp1.c	/^to_stm32_reset_data(struct reset_controller_dev *rcdev)$/;"	f	file:
tags:to_syscfg_reset_controller	drivers/reset/sti/reset-syscfg.c	49;"	d	file:
tags:to_tegra_bpmp	drivers/reset/tegra/reset-bpmp.c	/^static struct tegra_bpmp *to_tegra_bpmp(struct reset_controller_dev *rstc)$/;"	f	file:
tags:to_ti_sci_reset_data	drivers/reset/reset-ti-sci.c	51;"	d	file:
tags:to_ti_syscon_reset_data	drivers/reset/reset-ti-syscon.c	61;"	d	file:
tags:to_uniphier_reset_priv	drivers/reset/reset-uniphier.c	247;"	d	file:
tags:to_zynq_reset_data	drivers/reset/reset-zynq.c	34;"	d	file:
tags:ucDefaultMVDDC_ID	drivers/gpu/drm/amd/include/atombios.h	/^  UCHAR                      ucDefaultMVDDC_ID; \/\/ Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;$/;"	m	struct:_ATOM_VRAM_MODULE_V1
tags:ucDefaultMVDDC_ID	drivers/gpu/drm/amd/include/atombios.h	/^  UCHAR                      ucDefaultMVDDC_ID; \/\/ Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;$/;"	m	struct:_ATOM_VRAM_MODULE_V2
tags:ucDefaultMVDDC_ID	drivers/gpu/drm/radeon/atombios.h	/^  UCHAR                      ucDefaultMVDDC_ID; \/\/ Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;$/;"	m	struct:_ATOM_VRAM_MODULE_V1
tags:ucDefaultMVDDC_ID	drivers/gpu/drm/radeon/atombios.h	/^  UCHAR                      ucDefaultMVDDC_ID; \/\/ Default MVDDC setting for this memory block, ID linking to MVDDC info table to find real set-up data;$/;"	m	struct:_ATOM_VRAM_MODULE_V2
tags:ucDefaultMVDDQ_ID	drivers/gpu/drm/amd/include/atombios.h	/^  UCHAR                      ucDefaultMVDDQ_ID; \/\/ Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;$/;"	m	struct:_ATOM_VRAM_MODULE_V1
tags:ucDefaultMVDDQ_ID	drivers/gpu/drm/amd/include/atombios.h	/^  UCHAR                      ucDefaultMVDDQ_ID; \/\/ Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;$/;"	m	struct:_ATOM_VRAM_MODULE_V2
tags:ucDefaultMVDDQ_ID	drivers/gpu/drm/radeon/atombios.h	/^  UCHAR                      ucDefaultMVDDQ_ID; \/\/ Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;$/;"	m	struct:_ATOM_VRAM_MODULE_V1
tags:ucDefaultMVDDQ_ID	drivers/gpu/drm/radeon/atombios.h	/^  UCHAR                      ucDefaultMVDDQ_ID; \/\/ Default MVDDQ setting for this memory block, ID linking to MVDDQ info table to find real set-up data;$/;"	m	struct:_ATOM_VRAM_MODULE_V2
tags:ucGPIO_PinState	drivers/gpu/drm/amd/include/atombios.h	/^  UCHAR                       ucGPIO_PinState;        \/\/ Pin state showing how to set-up the pin$/;"	m	struct:_ATOM_GPIO_PIN_CONTROL_PAIR
tags:ucGPIO_PinState	drivers/gpu/drm/radeon/atombios.h	/^  UCHAR                       ucGPIO_PinState;        \/\/ Pin state showing how to set-up the pin$/;"	m	struct:_ATOM_GPIO_PIN_CONTROL_PAIR
tags:uniphier_ld11_adamv_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_ld11_adamv_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_ld11_sys_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_ld11_sys_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_ld20_sys_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_ld20_sys_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_ld4_mio_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_ld4_mio_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_ld4_peri_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_ld4_peri_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_ld4_sys_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_ld4_sys_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_pro4_peri_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_pro4_peri_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_pro4_sys_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_pro4_sys_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_pro5_sd_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_pro5_sd_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_pro5_sys_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_pro5_sys_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_pxs2_sys_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_pxs2_sys_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_pxs3_sys_reset_data	drivers/reset/reset-uniphier.c	/^static const struct uniphier_reset_data uniphier_pxs3_sys_reset_data[] = {$/;"	v	typeref:struct:uniphier_reset_data	file:
tags:uniphier_reset_assert	drivers/reset/reset-uniphier.c	/^static int uniphier_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:uniphier_reset_data	drivers/reset/reset-uniphier.c	/^struct uniphier_reset_data {$/;"	s	file:
tags:uniphier_reset_deassert	drivers/reset/reset-uniphier.c	/^static int uniphier_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:uniphier_reset_driver	drivers/reset/reset-uniphier.c	/^module_platform_driver(uniphier_reset_driver);$/;"	v
tags:uniphier_reset_driver	drivers/reset/reset-uniphier.c	/^static struct platform_driver uniphier_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:uniphier_reset_match	drivers/reset/reset-uniphier.c	/^static const struct of_device_id uniphier_reset_match[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:uniphier_reset_ops	drivers/reset/reset-uniphier.c	/^static const struct reset_control_ops uniphier_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:uniphier_reset_priv	drivers/reset/reset-uniphier.c	/^struct uniphier_reset_priv {$/;"	s	file:
tags:uniphier_reset_probe	drivers/reset/reset-uniphier.c	/^static int uniphier_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:uniphier_reset_status	drivers/reset/reset-uniphier.c	/^static int uniphier_reset_status(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:uniphier_reset_update	drivers/reset/reset-uniphier.c	/^static int uniphier_reset_update(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:usb_f_ecm_subset-y	drivers/usb/gadget/function/Makefile	/^usb_f_ecm_subset-y		:= f_subset.o$/;"	m
tags:usb_gigaset-y	drivers/isdn/gigaset/Makefile	/^usb_gigaset-y := usb-gigaset.o$/;"	m
tags:wait_for_ack	drivers/reset/sti/reset-syscfg.h	/^	bool wait_for_ack;$/;"	m	struct:syscfg_reset_controller_data
tags:zynq_reset_assert	drivers/reset/reset-zynq.c	/^static int zynq_reset_assert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:zynq_reset_data	drivers/reset/reset-zynq.c	/^struct zynq_reset_data {$/;"	s	file:
tags:zynq_reset_deassert	drivers/reset/reset-zynq.c	/^static int zynq_reset_deassert(struct reset_controller_dev *rcdev,$/;"	f	file:
tags:zynq_reset_driver	drivers/reset/reset-zynq.c	/^builtin_platform_driver(zynq_reset_driver);$/;"	v
tags:zynq_reset_driver	drivers/reset/reset-zynq.c	/^static struct platform_driver zynq_reset_driver = {$/;"	v	typeref:struct:platform_driver	file:
tags:zynq_reset_dt_ids	drivers/reset/reset-zynq.c	/^static const struct of_device_id zynq_reset_dt_ids[] = {$/;"	v	typeref:struct:of_device_id	file:
tags:zynq_reset_ops	drivers/reset/reset-zynq.c	/^static const struct reset_control_ops zynq_reset_ops = {$/;"	v	typeref:struct:reset_control_ops	file:
tags:zynq_reset_probe	drivers/reset/reset-zynq.c	/^static int zynq_reset_probe(struct platform_device *pdev)$/;"	f	file:
tags:zynq_reset_status	drivers/reset/reset-zynq.c	/^static int zynq_reset_status(struct reset_controller_dev *rcdev,$/;"	f	file:
